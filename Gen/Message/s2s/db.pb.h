// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s/db.proto

#ifndef PROTOBUF_INCLUDED_s2s_2fdb_2eproto
#define PROTOBUF_INCLUDED_s2s_2fdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2fdb_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2fdb_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2fdb_2eproto();
namespace db {
class mongo;
class mongoDefaultTypeInternal;
extern mongoDefaultTypeInternal _mongo_default_instance_;
class mongo_aggregate;
class mongo_aggregateDefaultTypeInternal;
extern mongo_aggregateDefaultTypeInternal _mongo_aggregate_default_instance_;
class mongo_aggregate_facet;
class mongo_aggregate_facetDefaultTypeInternal;
extern mongo_aggregate_facetDefaultTypeInternal _mongo_aggregate_facet_default_instance_;
class mongo_aggregate_request;
class mongo_aggregate_requestDefaultTypeInternal;
extern mongo_aggregate_requestDefaultTypeInternal _mongo_aggregate_request_default_instance_;
class mongo_command;
class mongo_commandDefaultTypeInternal;
extern mongo_commandDefaultTypeInternal _mongo_command_default_instance_;
class mongo_command_request;
class mongo_command_requestDefaultTypeInternal;
extern mongo_command_requestDefaultTypeInternal _mongo_command_request_default_instance_;
class mongo_command_response;
class mongo_command_responseDefaultTypeInternal;
extern mongo_command_responseDefaultTypeInternal _mongo_command_response_default_instance_;
class mongo_count;
class mongo_countDefaultTypeInternal;
extern mongo_countDefaultTypeInternal _mongo_count_default_instance_;
class mongo_count_request;
class mongo_count_requestDefaultTypeInternal;
extern mongo_count_requestDefaultTypeInternal _mongo_count_request_default_instance_;
class mongo_count_response;
class mongo_count_responseDefaultTypeInternal;
extern mongo_count_responseDefaultTypeInternal _mongo_count_response_default_instance_;
class mongo_find;
class mongo_findDefaultTypeInternal;
extern mongo_findDefaultTypeInternal _mongo_find_default_instance_;
class mongo_find_distinct;
class mongo_find_distinctDefaultTypeInternal;
extern mongo_find_distinctDefaultTypeInternal _mongo_find_distinct_default_instance_;
class mongo_find_modify;
class mongo_find_modifyDefaultTypeInternal;
extern mongo_find_modifyDefaultTypeInternal _mongo_find_modify_default_instance_;
class mongo_find_modify_request;
class mongo_find_modify_requestDefaultTypeInternal;
extern mongo_find_modify_requestDefaultTypeInternal _mongo_find_modify_request_default_instance_;
class mongo_find_modify_response;
class mongo_find_modify_responseDefaultTypeInternal;
extern mongo_find_modify_responseDefaultTypeInternal _mongo_find_modify_response_default_instance_;
class mongo_find_more;
class mongo_find_moreDefaultTypeInternal;
extern mongo_find_moreDefaultTypeInternal _mongo_find_more_default_instance_;
class mongo_find_one;
class mongo_find_oneDefaultTypeInternal;
extern mongo_find_oneDefaultTypeInternal _mongo_find_one_default_instance_;
class mongo_find_one_request;
class mongo_find_one_requestDefaultTypeInternal;
extern mongo_find_one_requestDefaultTypeInternal _mongo_find_one_request_default_instance_;
class mongo_find_one_response;
class mongo_find_one_responseDefaultTypeInternal;
extern mongo_find_one_responseDefaultTypeInternal _mongo_find_one_response_default_instance_;
class mongo_find_page;
class mongo_find_pageDefaultTypeInternal;
extern mongo_find_pageDefaultTypeInternal _mongo_find_page_default_instance_;
class mongo_find_request;
class mongo_find_requestDefaultTypeInternal;
extern mongo_find_requestDefaultTypeInternal _mongo_find_request_default_instance_;
class mongo_find_response;
class mongo_find_responseDefaultTypeInternal;
extern mongo_find_responseDefaultTypeInternal _mongo_find_response_default_instance_;
class mongo_inc;
class mongo_incDefaultTypeInternal;
extern mongo_incDefaultTypeInternal _mongo_inc_default_instance_;
class mongo_inc_request;
class mongo_inc_requestDefaultTypeInternal;
extern mongo_inc_requestDefaultTypeInternal _mongo_inc_request_default_instance_;
class mongo_inc_response;
class mongo_inc_responseDefaultTypeInternal;
extern mongo_inc_responseDefaultTypeInternal _mongo_inc_response_default_instance_;
class mongo_index;
class mongo_indexDefaultTypeInternal;
extern mongo_indexDefaultTypeInternal _mongo_index_default_instance_;
class mongo_insert;
class mongo_insertDefaultTypeInternal;
extern mongo_insertDefaultTypeInternal _mongo_insert_default_instance_;
class mongo_merge;
class mongo_mergeDefaultTypeInternal;
extern mongo_mergeDefaultTypeInternal _mongo_merge_default_instance_;
class mongo_merge_request;
class mongo_merge_requestDefaultTypeInternal;
extern mongo_merge_requestDefaultTypeInternal _mongo_merge_request_default_instance_;
class mongo_merge_response;
class mongo_merge_responseDefaultTypeInternal;
extern mongo_merge_responseDefaultTypeInternal _mongo_merge_response_default_instance_;
class mongo_remove;
class mongo_removeDefaultTypeInternal;
extern mongo_removeDefaultTypeInternal _mongo_remove_default_instance_;
class mongo_response;
class mongo_responseDefaultTypeInternal;
extern mongo_responseDefaultTypeInternal _mongo_response_default_instance_;
class mongo_update;
class mongo_updateDefaultTypeInternal;
extern mongo_updateDefaultTypeInternal _mongo_update_default_instance_;
class mongo_updater;
class mongo_updaterDefaultTypeInternal;
extern mongo_updaterDefaultTypeInternal _mongo_updater_default_instance_;
class mongo_updates;
class mongo_updatesDefaultTypeInternal;
extern mongo_updatesDefaultTypeInternal _mongo_updates_default_instance_;
class sql;
class sqlDefaultTypeInternal;
extern sqlDefaultTypeInternal _sql_default_instance_;
class sql_create;
class sql_createDefaultTypeInternal;
extern sql_createDefaultTypeInternal _sql_create_default_instance_;
class sql_del;
class sql_delDefaultTypeInternal;
extern sql_delDefaultTypeInternal _sql_del_default_instance_;
class sql_exec;
class sql_execDefaultTypeInternal;
extern sql_execDefaultTypeInternal _sql_exec_default_instance_;
class sql_inc;
class sql_incDefaultTypeInternal;
extern sql_incDefaultTypeInternal _sql_inc_default_instance_;
class sql_index;
class sql_indexDefaultTypeInternal;
extern sql_indexDefaultTypeInternal _sql_index_default_instance_;
class sql_insert;
class sql_insertDefaultTypeInternal;
extern sql_insertDefaultTypeInternal _sql_insert_default_instance_;
class sql_query;
class sql_queryDefaultTypeInternal;
extern sql_queryDefaultTypeInternal _sql_query_default_instance_;
class sql_query_page;
class sql_query_pageDefaultTypeInternal;
extern sql_query_pageDefaultTypeInternal _sql_query_page_default_instance_;
class sql_query_request;
class sql_query_requestDefaultTypeInternal;
extern sql_query_requestDefaultTypeInternal _sql_query_request_default_instance_;
class sql_query_response;
class sql_query_responseDefaultTypeInternal;
extern sql_query_responseDefaultTypeInternal _sql_query_response_default_instance_;
class sql_response;
class sql_responseDefaultTypeInternal;
extern sql_responseDefaultTypeInternal _sql_response_default_instance_;
class sql_save;
class sql_saveDefaultTypeInternal;
extern sql_saveDefaultTypeInternal _sql_save_default_instance_;
class sql_update;
class sql_updateDefaultTypeInternal;
extern sql_updateDefaultTypeInternal _sql_update_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::mongo* Arena::CreateMaybeMessage<::db::mongo>(Arena*);
template<> ::db::mongo_aggregate* Arena::CreateMaybeMessage<::db::mongo_aggregate>(Arena*);
template<> ::db::mongo_aggregate_facet* Arena::CreateMaybeMessage<::db::mongo_aggregate_facet>(Arena*);
template<> ::db::mongo_aggregate_request* Arena::CreateMaybeMessage<::db::mongo_aggregate_request>(Arena*);
template<> ::db::mongo_command* Arena::CreateMaybeMessage<::db::mongo_command>(Arena*);
template<> ::db::mongo_command_request* Arena::CreateMaybeMessage<::db::mongo_command_request>(Arena*);
template<> ::db::mongo_command_response* Arena::CreateMaybeMessage<::db::mongo_command_response>(Arena*);
template<> ::db::mongo_count* Arena::CreateMaybeMessage<::db::mongo_count>(Arena*);
template<> ::db::mongo_count_request* Arena::CreateMaybeMessage<::db::mongo_count_request>(Arena*);
template<> ::db::mongo_count_response* Arena::CreateMaybeMessage<::db::mongo_count_response>(Arena*);
template<> ::db::mongo_find* Arena::CreateMaybeMessage<::db::mongo_find>(Arena*);
template<> ::db::mongo_find_distinct* Arena::CreateMaybeMessage<::db::mongo_find_distinct>(Arena*);
template<> ::db::mongo_find_modify* Arena::CreateMaybeMessage<::db::mongo_find_modify>(Arena*);
template<> ::db::mongo_find_modify_request* Arena::CreateMaybeMessage<::db::mongo_find_modify_request>(Arena*);
template<> ::db::mongo_find_modify_response* Arena::CreateMaybeMessage<::db::mongo_find_modify_response>(Arena*);
template<> ::db::mongo_find_more* Arena::CreateMaybeMessage<::db::mongo_find_more>(Arena*);
template<> ::db::mongo_find_one* Arena::CreateMaybeMessage<::db::mongo_find_one>(Arena*);
template<> ::db::mongo_find_one_request* Arena::CreateMaybeMessage<::db::mongo_find_one_request>(Arena*);
template<> ::db::mongo_find_one_response* Arena::CreateMaybeMessage<::db::mongo_find_one_response>(Arena*);
template<> ::db::mongo_find_page* Arena::CreateMaybeMessage<::db::mongo_find_page>(Arena*);
template<> ::db::mongo_find_request* Arena::CreateMaybeMessage<::db::mongo_find_request>(Arena*);
template<> ::db::mongo_find_response* Arena::CreateMaybeMessage<::db::mongo_find_response>(Arena*);
template<> ::db::mongo_inc* Arena::CreateMaybeMessage<::db::mongo_inc>(Arena*);
template<> ::db::mongo_inc_request* Arena::CreateMaybeMessage<::db::mongo_inc_request>(Arena*);
template<> ::db::mongo_inc_response* Arena::CreateMaybeMessage<::db::mongo_inc_response>(Arena*);
template<> ::db::mongo_index* Arena::CreateMaybeMessage<::db::mongo_index>(Arena*);
template<> ::db::mongo_insert* Arena::CreateMaybeMessage<::db::mongo_insert>(Arena*);
template<> ::db::mongo_merge* Arena::CreateMaybeMessage<::db::mongo_merge>(Arena*);
template<> ::db::mongo_merge_request* Arena::CreateMaybeMessage<::db::mongo_merge_request>(Arena*);
template<> ::db::mongo_merge_response* Arena::CreateMaybeMessage<::db::mongo_merge_response>(Arena*);
template<> ::db::mongo_remove* Arena::CreateMaybeMessage<::db::mongo_remove>(Arena*);
template<> ::db::mongo_response* Arena::CreateMaybeMessage<::db::mongo_response>(Arena*);
template<> ::db::mongo_update* Arena::CreateMaybeMessage<::db::mongo_update>(Arena*);
template<> ::db::mongo_updater* Arena::CreateMaybeMessage<::db::mongo_updater>(Arena*);
template<> ::db::mongo_updates* Arena::CreateMaybeMessage<::db::mongo_updates>(Arena*);
template<> ::db::sql* Arena::CreateMaybeMessage<::db::sql>(Arena*);
template<> ::db::sql_create* Arena::CreateMaybeMessage<::db::sql_create>(Arena*);
template<> ::db::sql_del* Arena::CreateMaybeMessage<::db::sql_del>(Arena*);
template<> ::db::sql_exec* Arena::CreateMaybeMessage<::db::sql_exec>(Arena*);
template<> ::db::sql_inc* Arena::CreateMaybeMessage<::db::sql_inc>(Arena*);
template<> ::db::sql_index* Arena::CreateMaybeMessage<::db::sql_index>(Arena*);
template<> ::db::sql_insert* Arena::CreateMaybeMessage<::db::sql_insert>(Arena*);
template<> ::db::sql_query* Arena::CreateMaybeMessage<::db::sql_query>(Arena*);
template<> ::db::sql_query_page* Arena::CreateMaybeMessage<::db::sql_query_page>(Arena*);
template<> ::db::sql_query_request* Arena::CreateMaybeMessage<::db::sql_query_request>(Arena*);
template<> ::db::sql_query_response* Arena::CreateMaybeMessage<::db::sql_query_response>(Arena*);
template<> ::db::sql_response* Arena::CreateMaybeMessage<::db::sql_response>(Arena*);
template<> ::db::sql_save* Arena::CreateMaybeMessage<::db::sql_save>(Arena*);
template<> ::db::sql_update* Arena::CreateMaybeMessage<::db::sql_update>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class mongo_insert :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.insert) */ {
 public:
  mongo_insert();
  virtual ~mongo_insert();

  mongo_insert(const mongo_insert& from);

  inline mongo_insert& operator=(const mongo_insert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_insert(mongo_insert&& from) noexcept
    : mongo_insert() {
    *this = ::std::move(from);
  }

  inline mongo_insert& operator=(mongo_insert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_insert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_insert* internal_default_instance() {
    return reinterpret_cast<const mongo_insert*>(
               &_mongo_insert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(mongo_insert* other);
  friend void swap(mongo_insert& a, mongo_insert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_insert* New() const final {
    return CreateMaybeMessage<mongo_insert>(nullptr);
  }

  mongo_insert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_insert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_insert& from);
  void MergeFrom(const mongo_insert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_insert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string documents = 2;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 2;
  const ::std::string& documents(int index) const;
  ::std::string* mutable_documents(int index);
  void set_documents(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_documents(int index, ::std::string&& value);
  #endif
  void set_documents(int index, const char* value);
  void set_documents(int index, const char* value, size_t size);
  ::std::string* add_documents();
  void add_documents(const ::std::string& value);
  #if LANG_CXX11
  void add_documents(::std::string&& value);
  #endif
  void add_documents(const char* value);
  void add_documents(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& documents() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_documents();

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // @@protoc_insertion_point(class_scope:db.mongo.insert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> documents_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find.request) */ {
 public:
  mongo_find_request();
  virtual ~mongo_find_request();

  mongo_find_request(const mongo_find_request& from);

  inline mongo_find_request& operator=(const mongo_find_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_request(mongo_find_request&& from) noexcept
    : mongo_find_request() {
    *this = ::std::move(from);
  }

  inline mongo_find_request& operator=(mongo_find_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_request* internal_default_instance() {
    return reinterpret_cast<const mongo_find_request*>(
               &_mongo_find_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mongo_find_request* other);
  friend void swap(mongo_find_request& a, mongo_find_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_request* New() const final {
    return CreateMaybeMessage<mongo_find_request>(nullptr);
  }

  mongo_find_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_request& from);
  void MergeFrom(const mongo_find_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 4;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 4;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.find.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_page :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find.page) */ {
 public:
  mongo_find_page();
  virtual ~mongo_find_page();

  mongo_find_page(const mongo_find_page& from);

  inline mongo_find_page& operator=(const mongo_find_page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_page(mongo_find_page&& from) noexcept
    : mongo_find_page() {
    *this = ::std::move(from);
  }

  inline mongo_find_page& operator=(mongo_find_page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_page* internal_default_instance() {
    return reinterpret_cast<const mongo_find_page*>(
               &_mongo_find_page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(mongo_find_page* other);
  friend void swap(mongo_find_page& a, mongo_find_page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_page* New() const final {
    return CreateMaybeMessage<mongo_find_page>(nullptr);
  }

  mongo_find_page* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_page>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_page& from);
  void MergeFrom(const mongo_find_page& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 5;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 5;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string sort = 6;
  void clear_sort();
  static const int kSortFieldNumber = 6;
  const ::std::string& sort() const;
  void set_sort(const ::std::string& value);
  #if LANG_CXX11
  void set_sort(::std::string&& value);
  #endif
  void set_sort(const char* value);
  void set_sort(const char* value, size_t size);
  ::std::string* mutable_sort();
  ::std::string* release_sort();
  void set_allocated_sort(::std::string* sort);

  // int32 page = 3;
  void clear_page();
  static const int kPageFieldNumber = 3;
  ::google::protobuf::int32 page() const;
  void set_page(::google::protobuf::int32 value);

  // int32 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.find.page)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr sort_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_more :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find.more) */ {
 public:
  mongo_find_more();
  virtual ~mongo_find_more();

  mongo_find_more(const mongo_find_more& from);

  inline mongo_find_more& operator=(const mongo_find_more& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_more(mongo_find_more&& from) noexcept
    : mongo_find_more() {
    *this = ::std::move(from);
  }

  inline mongo_find_more& operator=(mongo_find_more&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_more& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_more* internal_default_instance() {
    return reinterpret_cast<const mongo_find_more*>(
               &_mongo_find_more_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(mongo_find_more* other);
  friend void swap(mongo_find_more& a, mongo_find_more& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_more* New() const final {
    return CreateMaybeMessage<mongo_find_more>(nullptr);
  }

  mongo_find_more* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_more>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_more& from);
  void MergeFrom(const mongo_find_more& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_more* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // int64 cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  ::google::protobuf::int64 cursor() const;
  void set_cursor(::google::protobuf::int64 value);

  // int32 batchSize = 3;
  void clear_batchsize();
  static const int kBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 batchsize() const;
  void set_batchsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.find.more)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::int64 cursor_;
  ::google::protobuf::int32 batchsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_distinct :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find.distinct) */ {
 public:
  mongo_find_distinct();
  virtual ~mongo_find_distinct();

  mongo_find_distinct(const mongo_find_distinct& from);

  inline mongo_find_distinct& operator=(const mongo_find_distinct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_distinct(mongo_find_distinct&& from) noexcept
    : mongo_find_distinct() {
    *this = ::std::move(from);
  }

  inline mongo_find_distinct& operator=(mongo_find_distinct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_distinct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_distinct* internal_default_instance() {
    return reinterpret_cast<const mongo_find_distinct*>(
               &_mongo_find_distinct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(mongo_find_distinct* other);
  friend void swap(mongo_find_distinct& a, mongo_find_distinct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_distinct* New() const final {
    return CreateMaybeMessage<mongo_find_distinct>(nullptr);
  }

  mongo_find_distinct* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_distinct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_distinct& from);
  void MergeFrom(const mongo_find_distinct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_distinct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // @@protoc_insertion_point(class_scope:db.mongo.find.distinct)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find.response) */ {
 public:
  mongo_find_response();
  virtual ~mongo_find_response();

  mongo_find_response(const mongo_find_response& from);

  inline mongo_find_response& operator=(const mongo_find_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_response(mongo_find_response&& from) noexcept
    : mongo_find_response() {
    *this = ::std::move(from);
  }

  inline mongo_find_response& operator=(mongo_find_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_response* internal_default_instance() {
    return reinterpret_cast<const mongo_find_response*>(
               &_mongo_find_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(mongo_find_response* other);
  friend void swap(mongo_find_response& a, mongo_find_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_response* New() const final {
    return CreateMaybeMessage<mongo_find_response>(nullptr);
  }

  mongo_find_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_response& from);
  void MergeFrom(const mongo_find_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes documents = 2;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 2;
  const ::std::string& documents(int index) const;
  ::std::string* mutable_documents(int index);
  void set_documents(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_documents(int index, ::std::string&& value);
  #endif
  void set_documents(int index, const char* value);
  void set_documents(int index, const void* value, size_t size);
  ::std::string* add_documents();
  void add_documents(const ::std::string& value);
  #if LANG_CXX11
  void add_documents(::std::string&& value);
  #endif
  void add_documents(const char* value);
  void add_documents(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& documents() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_documents();

  // int64 cursor = 1;
  void clear_cursor();
  static const int kCursorFieldNumber = 1;
  ::google::protobuf::int64 cursor() const;
  void set_cursor(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.mongo.find.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> documents_;
  ::google::protobuf::int64 cursor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find) */ {
 public:
  mongo_find();
  virtual ~mongo_find();

  mongo_find(const mongo_find& from);

  inline mongo_find& operator=(const mongo_find& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find(mongo_find&& from) noexcept
    : mongo_find() {
    *this = ::std::move(from);
  }

  inline mongo_find& operator=(mongo_find&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find* internal_default_instance() {
    return reinterpret_cast<const mongo_find*>(
               &_mongo_find_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(mongo_find* other);
  friend void swap(mongo_find& a, mongo_find& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find* New() const final {
    return CreateMaybeMessage<mongo_find>(nullptr);
  }

  mongo_find* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find& from);
  void MergeFrom(const mongo_find& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_find_request request;
  typedef mongo_find_page page;
  typedef mongo_find_more more;
  typedef mongo_find_distinct distinct;
  typedef mongo_find_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.find)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_one_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find_one.request) */ {
 public:
  mongo_find_one_request();
  virtual ~mongo_find_one_request();

  mongo_find_one_request(const mongo_find_one_request& from);

  inline mongo_find_one_request& operator=(const mongo_find_one_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_one_request(mongo_find_one_request&& from) noexcept
    : mongo_find_one_request() {
    *this = ::std::move(from);
  }

  inline mongo_find_one_request& operator=(mongo_find_one_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_one_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_one_request* internal_default_instance() {
    return reinterpret_cast<const mongo_find_one_request*>(
               &_mongo_find_one_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(mongo_find_one_request* other);
  friend void swap(mongo_find_one_request& a, mongo_find_one_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_one_request* New() const final {
    return CreateMaybeMessage<mongo_find_one_request>(nullptr);
  }

  mongo_find_one_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_one_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_one_request& from);
  void MergeFrom(const mongo_find_one_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_one_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // @@protoc_insertion_point(class_scope:db.mongo.find_one.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_one_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find_one.response) */ {
 public:
  mongo_find_one_response();
  virtual ~mongo_find_one_response();

  mongo_find_one_response(const mongo_find_one_response& from);

  inline mongo_find_one_response& operator=(const mongo_find_one_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_one_response(mongo_find_one_response&& from) noexcept
    : mongo_find_one_response() {
    *this = ::std::move(from);
  }

  inline mongo_find_one_response& operator=(mongo_find_one_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_one_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_one_response* internal_default_instance() {
    return reinterpret_cast<const mongo_find_one_response*>(
               &_mongo_find_one_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(mongo_find_one_response* other);
  friend void swap(mongo_find_one_response& a, mongo_find_one_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_one_response* New() const final {
    return CreateMaybeMessage<mongo_find_one_response>(nullptr);
  }

  mongo_find_one_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_one_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_one_response& from);
  void MergeFrom(const mongo_find_one_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_one_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // @@protoc_insertion_point(class_scope:db.mongo.find_one.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_one :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find_one) */ {
 public:
  mongo_find_one();
  virtual ~mongo_find_one();

  mongo_find_one(const mongo_find_one& from);

  inline mongo_find_one& operator=(const mongo_find_one& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_one(mongo_find_one&& from) noexcept
    : mongo_find_one() {
    *this = ::std::move(from);
  }

  inline mongo_find_one& operator=(mongo_find_one&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_one& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_one* internal_default_instance() {
    return reinterpret_cast<const mongo_find_one*>(
               &_mongo_find_one_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(mongo_find_one* other);
  friend void swap(mongo_find_one& a, mongo_find_one& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_one* New() const final {
    return CreateMaybeMessage<mongo_find_one>(nullptr);
  }

  mongo_find_one* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_one>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_one& from);
  void MergeFrom(const mongo_find_one& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_one* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_find_one_request request;
  typedef mongo_find_one_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.find_one)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_aggregate_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.aggregate.request) */ {
 public:
  mongo_aggregate_request();
  virtual ~mongo_aggregate_request();

  mongo_aggregate_request(const mongo_aggregate_request& from);

  inline mongo_aggregate_request& operator=(const mongo_aggregate_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_aggregate_request(mongo_aggregate_request&& from) noexcept
    : mongo_aggregate_request() {
    *this = ::std::move(from);
  }

  inline mongo_aggregate_request& operator=(mongo_aggregate_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_aggregate_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_aggregate_request* internal_default_instance() {
    return reinterpret_cast<const mongo_aggregate_request*>(
               &_mongo_aggregate_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(mongo_aggregate_request* other);
  friend void swap(mongo_aggregate_request& a, mongo_aggregate_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_aggregate_request* New() const final {
    return CreateMaybeMessage<mongo_aggregate_request>(nullptr);
  }

  mongo_aggregate_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_aggregate_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_aggregate_request& from);
  void MergeFrom(const mongo_aggregate_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_aggregate_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string by = 2;
  void clear_by();
  static const int kByFieldNumber = 2;
  const ::std::string& by() const;
  void set_by(const ::std::string& value);
  #if LANG_CXX11
  void set_by(::std::string&& value);
  #endif
  void set_by(const char* value);
  void set_by(const char* value, size_t size);
  ::std::string* mutable_by();
  ::std::string* release_by();
  void set_allocated_by(::std::string* by);

  // string field = 3;
  void clear_field();
  static const int kFieldFieldNumber = 3;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // string filter = 4;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string cmd = 5;
  void clear_cmd();
  static const int kCmdFieldNumber = 5;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // int32 batchSize = 6;
  void clear_batchsize();
  static const int kBatchSizeFieldNumber = 6;
  ::google::protobuf::int32 batchsize() const;
  void set_batchsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.aggregate.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr by_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::int32 batchsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_aggregate_facet :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.aggregate.facet) */ {
 public:
  mongo_aggregate_facet();
  virtual ~mongo_aggregate_facet();

  mongo_aggregate_facet(const mongo_aggregate_facet& from);

  inline mongo_aggregate_facet& operator=(const mongo_aggregate_facet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_aggregate_facet(mongo_aggregate_facet&& from) noexcept
    : mongo_aggregate_facet() {
    *this = ::std::move(from);
  }

  inline mongo_aggregate_facet& operator=(mongo_aggregate_facet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_aggregate_facet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_aggregate_facet* internal_default_instance() {
    return reinterpret_cast<const mongo_aggregate_facet*>(
               &_mongo_aggregate_facet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(mongo_aggregate_facet* other);
  friend void swap(mongo_aggregate_facet& a, mongo_aggregate_facet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_aggregate_facet* New() const final {
    return CreateMaybeMessage<mongo_aggregate_facet>(nullptr);
  }

  mongo_aggregate_facet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_aggregate_facet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_aggregate_facet& from);
  void MergeFrom(const mongo_aggregate_facet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_aggregate_facet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string match = 5;
  int match_size() const;
  void clear_match();
  static const int kMatchFieldNumber = 5;
  const ::std::string& match(int index) const;
  ::std::string* mutable_match(int index);
  void set_match(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_match(int index, ::std::string&& value);
  #endif
  void set_match(int index, const char* value);
  void set_match(int index, const char* value, size_t size);
  ::std::string* add_match();
  void add_match(const ::std::string& value);
  #if LANG_CXX11
  void add_match(::std::string&& value);
  #endif
  void add_match(const char* value);
  void add_match(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& match() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_match();

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string _id = 2;
  void clear__id();
  static const int kIdFieldNumber = 2;
  const ::std::string& _id() const;
  void set__id(const ::std::string& value);
  #if LANG_CXX11
  void set__id(::std::string&& value);
  #endif
  void set__id(const char* value);
  void set__id(const char* value, size_t size);
  ::std::string* mutable__id();
  ::std::string* release__id();
  void set_allocated__id(::std::string* _id);

  // string group = 3;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // int32 batchSize = 4;
  void clear_batchsize();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::int32 batchsize() const;
  void set_batchsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.aggregate.facet)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> match_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr _id_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::int32 batchsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_aggregate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.aggregate) */ {
 public:
  mongo_aggregate();
  virtual ~mongo_aggregate();

  mongo_aggregate(const mongo_aggregate& from);

  inline mongo_aggregate& operator=(const mongo_aggregate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_aggregate(mongo_aggregate&& from) noexcept
    : mongo_aggregate() {
    *this = ::std::move(from);
  }

  inline mongo_aggregate& operator=(mongo_aggregate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_aggregate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_aggregate* internal_default_instance() {
    return reinterpret_cast<const mongo_aggregate*>(
               &_mongo_aggregate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(mongo_aggregate* other);
  friend void swap(mongo_aggregate& a, mongo_aggregate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_aggregate* New() const final {
    return CreateMaybeMessage<mongo_aggregate>(nullptr);
  }

  mongo_aggregate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_aggregate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_aggregate& from);
  void MergeFrom(const mongo_aggregate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_aggregate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_aggregate_request request;
  typedef mongo_aggregate_facet facet;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.aggregate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_count_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.count.request) */ {
 public:
  mongo_count_request();
  virtual ~mongo_count_request();

  mongo_count_request(const mongo_count_request& from);

  inline mongo_count_request& operator=(const mongo_count_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_count_request(mongo_count_request&& from) noexcept
    : mongo_count_request() {
    *this = ::std::move(from);
  }

  inline mongo_count_request& operator=(mongo_count_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_count_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_count_request* internal_default_instance() {
    return reinterpret_cast<const mongo_count_request*>(
               &_mongo_count_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(mongo_count_request* other);
  friend void swap(mongo_count_request& a, mongo_count_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_count_request* New() const final {
    return CreateMaybeMessage<mongo_count_request>(nullptr);
  }

  mongo_count_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_count_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_count_request& from);
  void MergeFrom(const mongo_count_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_count_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // @@protoc_insertion_point(class_scope:db.mongo.count.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_count_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.count.response) */ {
 public:
  mongo_count_response();
  virtual ~mongo_count_response();

  mongo_count_response(const mongo_count_response& from);

  inline mongo_count_response& operator=(const mongo_count_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_count_response(mongo_count_response&& from) noexcept
    : mongo_count_response() {
    *this = ::std::move(from);
  }

  inline mongo_count_response& operator=(mongo_count_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_count_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_count_response* internal_default_instance() {
    return reinterpret_cast<const mongo_count_response*>(
               &_mongo_count_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(mongo_count_response* other);
  friend void swap(mongo_count_response& a, mongo_count_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_count_response* New() const final {
    return CreateMaybeMessage<mongo_count_response>(nullptr);
  }

  mongo_count_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_count_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_count_response& from);
  void MergeFrom(const mongo_count_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_count_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.count.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_count :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.count) */ {
 public:
  mongo_count();
  virtual ~mongo_count();

  mongo_count(const mongo_count& from);

  inline mongo_count& operator=(const mongo_count& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_count(mongo_count&& from) noexcept
    : mongo_count() {
    *this = ::std::move(from);
  }

  inline mongo_count& operator=(mongo_count&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_count& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_count* internal_default_instance() {
    return reinterpret_cast<const mongo_count*>(
               &_mongo_count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(mongo_count* other);
  friend void swap(mongo_count& a, mongo_count& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_count* New() const final {
    return CreateMaybeMessage<mongo_count>(nullptr);
  }

  mongo_count* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_count>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_count& from);
  void MergeFrom(const mongo_count& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_count* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_count_request request;
  typedef mongo_count_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.count)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_remove :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.remove) */ {
 public:
  mongo_remove();
  virtual ~mongo_remove();

  mongo_remove(const mongo_remove& from);

  inline mongo_remove& operator=(const mongo_remove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_remove(mongo_remove&& from) noexcept
    : mongo_remove() {
    *this = ::std::move(from);
  }

  inline mongo_remove& operator=(mongo_remove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_remove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_remove* internal_default_instance() {
    return reinterpret_cast<const mongo_remove*>(
               &_mongo_remove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(mongo_remove* other);
  friend void swap(mongo_remove& a, mongo_remove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_remove* New() const final {
    return CreateMaybeMessage<mongo_remove>(nullptr);
  }

  mongo_remove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_remove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_remove& from);
  void MergeFrom(const mongo_remove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_remove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.remove)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_index :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.index) */ {
 public:
  mongo_index();
  virtual ~mongo_index();

  mongo_index(const mongo_index& from);

  inline mongo_index& operator=(const mongo_index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_index(mongo_index&& from) noexcept
    : mongo_index() {
    *this = ::std::move(from);
  }

  inline mongo_index& operator=(mongo_index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_index* internal_default_instance() {
    return reinterpret_cast<const mongo_index*>(
               &_mongo_index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(mongo_index* other);
  friend void swap(mongo_index& a, mongo_index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_index* New() const final {
    return CreateMaybeMessage<mongo_index>(nullptr);
  }

  mongo_index* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_index>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_index& from);
  void MergeFrom(const mongo_index& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int32 sort = 3;
  void clear_sort();
  static const int kSortFieldNumber = 3;
  ::google::protobuf::int32 sort() const;
  void set_sort(::google::protobuf::int32 value);

  // bool unique = 4;
  void clear_unique();
  static const int kUniqueFieldNumber = 4;
  bool unique() const;
  void set_unique(bool value);

  // @@protoc_insertion_point(class_scope:db.mongo.index)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 sort_;
  bool unique_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_updater :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.updater) */ {
 public:
  mongo_updater();
  virtual ~mongo_updater();

  mongo_updater(const mongo_updater& from);

  inline mongo_updater& operator=(const mongo_updater& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_updater(mongo_updater&& from) noexcept
    : mongo_updater() {
    *this = ::std::move(from);
  }

  inline mongo_updater& operator=(mongo_updater&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_updater& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_updater* internal_default_instance() {
    return reinterpret_cast<const mongo_updater*>(
               &_mongo_updater_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(mongo_updater* other);
  friend void swap(mongo_updater& a, mongo_updater& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_updater* New() const final {
    return CreateMaybeMessage<mongo_updater>(nullptr);
  }

  mongo_updater* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_updater>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_updater& from);
  void MergeFrom(const mongo_updater& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_updater* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string document = 3;
  void clear_document();
  static const int kDocumentFieldNumber = 3;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // @@protoc_insertion_point(class_scope:db.mongo.updater)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_updates :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.updates) */ {
 public:
  mongo_updates();
  virtual ~mongo_updates();

  mongo_updates(const mongo_updates& from);

  inline mongo_updates& operator=(const mongo_updates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_updates(mongo_updates&& from) noexcept
    : mongo_updates() {
    *this = ::std::move(from);
  }

  inline mongo_updates& operator=(mongo_updates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_updates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_updates* internal_default_instance() {
    return reinterpret_cast<const mongo_updates*>(
               &_mongo_updates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(mongo_updates* other);
  friend void swap(mongo_updates& a, mongo_updates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_updates* New() const final {
    return CreateMaybeMessage<mongo_updates>(nullptr);
  }

  mongo_updates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_updates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_updates& from);
  void MergeFrom(const mongo_updates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_updates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db.mongo.updater document = 2;
  int document_size() const;
  void clear_document();
  static const int kDocumentFieldNumber = 2;
  ::db::mongo_updater* mutable_document(int index);
  ::google::protobuf::RepeatedPtrField< ::db::mongo_updater >*
      mutable_document();
  const ::db::mongo_updater& document(int index) const;
  ::db::mongo_updater* add_document();
  const ::google::protobuf::RepeatedPtrField< ::db::mongo_updater >&
      document() const;

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // @@protoc_insertion_point(class_scope:db.mongo.updates)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::db::mongo_updater > document_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.update) */ {
 public:
  mongo_update();
  virtual ~mongo_update();

  mongo_update(const mongo_update& from);

  inline mongo_update& operator=(const mongo_update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_update(mongo_update&& from) noexcept
    : mongo_update() {
    *this = ::std::move(from);
  }

  inline mongo_update& operator=(mongo_update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_update* internal_default_instance() {
    return reinterpret_cast<const mongo_update*>(
               &_mongo_update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(mongo_update* other);
  friend void swap(mongo_update& a, mongo_update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_update* New() const final {
    return CreateMaybeMessage<mongo_update>(nullptr);
  }

  mongo_update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_update& from);
  void MergeFrom(const mongo_update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // .db.mongo.updater document = 2;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 2;
  const ::db::mongo_updater& document() const;
  ::db::mongo_updater* release_document();
  ::db::mongo_updater* mutable_document();
  void set_allocated_document(::db::mongo_updater* document);

  // bool upsert = 3;
  void clear_upsert();
  static const int kUpsertFieldNumber = 3;
  bool upsert() const;
  void set_upsert(bool value);

  // @@protoc_insertion_point(class_scope:db.mongo.update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::db::mongo_updater* document_;
  bool upsert_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.response) */ {
 public:
  mongo_response();
  virtual ~mongo_response();

  mongo_response(const mongo_response& from);

  inline mongo_response& operator=(const mongo_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_response(mongo_response&& from) noexcept
    : mongo_response() {
    *this = ::std::move(from);
  }

  inline mongo_response& operator=(mongo_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_response* internal_default_instance() {
    return reinterpret_cast<const mongo_response*>(
               &_mongo_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(mongo_response* other);
  friend void swap(mongo_response& a, mongo_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_response* New() const final {
    return CreateMaybeMessage<mongo_response>(nullptr);
  }

  mongo_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_response& from);
  void MergeFrom(const mongo_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_inc_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.inc.request) */ {
 public:
  mongo_inc_request();
  virtual ~mongo_inc_request();

  mongo_inc_request(const mongo_inc_request& from);

  inline mongo_inc_request& operator=(const mongo_inc_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_inc_request(mongo_inc_request&& from) noexcept
    : mongo_inc_request() {
    *this = ::std::move(from);
  }

  inline mongo_inc_request& operator=(mongo_inc_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_inc_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_inc_request* internal_default_instance() {
    return reinterpret_cast<const mongo_inc_request*>(
               &_mongo_inc_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(mongo_inc_request* other);
  friend void swap(mongo_inc_request& a, mongo_inc_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_inc_request* New() const final {
    return CreateMaybeMessage<mongo_inc_request>(nullptr);
  }

  mongo_inc_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_inc_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_inc_request& from);
  void MergeFrom(const mongo_inc_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_inc_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:db.mongo.inc.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_inc_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.inc.response) */ {
 public:
  mongo_inc_response();
  virtual ~mongo_inc_response();

  mongo_inc_response(const mongo_inc_response& from);

  inline mongo_inc_response& operator=(const mongo_inc_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_inc_response(mongo_inc_response&& from) noexcept
    : mongo_inc_response() {
    *this = ::std::move(from);
  }

  inline mongo_inc_response& operator=(mongo_inc_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_inc_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_inc_response* internal_default_instance() {
    return reinterpret_cast<const mongo_inc_response*>(
               &_mongo_inc_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(mongo_inc_response* other);
  friend void swap(mongo_inc_response& a, mongo_inc_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_inc_response* New() const final {
    return CreateMaybeMessage<mongo_inc_response>(nullptr);
  }

  mongo_inc_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_inc_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_inc_response& from);
  void MergeFrom(const mongo_inc_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_inc_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.mongo.inc.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_inc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.inc) */ {
 public:
  mongo_inc();
  virtual ~mongo_inc();

  mongo_inc(const mongo_inc& from);

  inline mongo_inc& operator=(const mongo_inc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_inc(mongo_inc&& from) noexcept
    : mongo_inc() {
    *this = ::std::move(from);
  }

  inline mongo_inc& operator=(mongo_inc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_inc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_inc* internal_default_instance() {
    return reinterpret_cast<const mongo_inc*>(
               &_mongo_inc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(mongo_inc* other);
  friend void swap(mongo_inc& a, mongo_inc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_inc* New() const final {
    return CreateMaybeMessage<mongo_inc>(nullptr);
  }

  mongo_inc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_inc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_inc& from);
  void MergeFrom(const mongo_inc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_inc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_inc_request request;
  typedef mongo_inc_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.inc)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_modify_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find_modify.request) */ {
 public:
  mongo_find_modify_request();
  virtual ~mongo_find_modify_request();

  mongo_find_modify_request(const mongo_find_modify_request& from);

  inline mongo_find_modify_request& operator=(const mongo_find_modify_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_modify_request(mongo_find_modify_request&& from) noexcept
    : mongo_find_modify_request() {
    *this = ::std::move(from);
  }

  inline mongo_find_modify_request& operator=(mongo_find_modify_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_modify_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_modify_request* internal_default_instance() {
    return reinterpret_cast<const mongo_find_modify_request*>(
               &_mongo_find_modify_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(mongo_find_modify_request* other);
  friend void swap(mongo_find_modify_request& a, mongo_find_modify_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_modify_request* New() const final {
    return CreateMaybeMessage<mongo_find_modify_request>(nullptr);
  }

  mongo_find_modify_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_modify_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_modify_request& from);
  void MergeFrom(const mongo_find_modify_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_modify_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 4;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 4;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string update = 3;
  void clear_update();
  static const int kUpdateFieldNumber = 3;
  const ::std::string& update() const;
  void set_update(const ::std::string& value);
  #if LANG_CXX11
  void set_update(::std::string&& value);
  #endif
  void set_update(const char* value);
  void set_update(const char* value, size_t size);
  ::std::string* mutable_update();
  ::std::string* release_update();
  void set_allocated_update(::std::string* update);

  // @@protoc_insertion_point(class_scope:db.mongo.find_modify.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr update_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_modify_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find_modify.response) */ {
 public:
  mongo_find_modify_response();
  virtual ~mongo_find_modify_response();

  mongo_find_modify_response(const mongo_find_modify_response& from);

  inline mongo_find_modify_response& operator=(const mongo_find_modify_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_modify_response(mongo_find_modify_response&& from) noexcept
    : mongo_find_modify_response() {
    *this = ::std::move(from);
  }

  inline mongo_find_modify_response& operator=(mongo_find_modify_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_modify_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_modify_response* internal_default_instance() {
    return reinterpret_cast<const mongo_find_modify_response*>(
               &_mongo_find_modify_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(mongo_find_modify_response* other);
  friend void swap(mongo_find_modify_response& a, mongo_find_modify_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_modify_response* New() const final {
    return CreateMaybeMessage<mongo_find_modify_response>(nullptr);
  }

  mongo_find_modify_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_modify_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_modify_response& from);
  void MergeFrom(const mongo_find_modify_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_modify_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // @@protoc_insertion_point(class_scope:db.mongo.find_modify.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_find_modify :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.find_modify) */ {
 public:
  mongo_find_modify();
  virtual ~mongo_find_modify();

  mongo_find_modify(const mongo_find_modify& from);

  inline mongo_find_modify& operator=(const mongo_find_modify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_find_modify(mongo_find_modify&& from) noexcept
    : mongo_find_modify() {
    *this = ::std::move(from);
  }

  inline mongo_find_modify& operator=(mongo_find_modify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_find_modify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_find_modify* internal_default_instance() {
    return reinterpret_cast<const mongo_find_modify*>(
               &_mongo_find_modify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(mongo_find_modify* other);
  friend void swap(mongo_find_modify& a, mongo_find_modify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_find_modify* New() const final {
    return CreateMaybeMessage<mongo_find_modify>(nullptr);
  }

  mongo_find_modify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_find_modify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_find_modify& from);
  void MergeFrom(const mongo_find_modify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_find_modify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_find_modify_request request;
  typedef mongo_find_modify_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.find_modify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_command_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.command.request) */ {
 public:
  mongo_command_request();
  virtual ~mongo_command_request();

  mongo_command_request(const mongo_command_request& from);

  inline mongo_command_request& operator=(const mongo_command_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_command_request(mongo_command_request&& from) noexcept
    : mongo_command_request() {
    *this = ::std::move(from);
  }

  inline mongo_command_request& operator=(mongo_command_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_command_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_command_request* internal_default_instance() {
    return reinterpret_cast<const mongo_command_request*>(
               &_mongo_command_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(mongo_command_request* other);
  friend void swap(mongo_command_request& a, mongo_command_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_command_request* New() const final {
    return CreateMaybeMessage<mongo_command_request>(nullptr);
  }

  mongo_command_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_command_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_command_request& from);
  void MergeFrom(const mongo_command_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_command_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string document = 3;
  void clear_document();
  static const int kDocumentFieldNumber = 3;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // @@protoc_insertion_point(class_scope:db.mongo.command.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_command_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.command.response) */ {
 public:
  mongo_command_response();
  virtual ~mongo_command_response();

  mongo_command_response(const mongo_command_response& from);

  inline mongo_command_response& operator=(const mongo_command_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_command_response(mongo_command_response&& from) noexcept
    : mongo_command_response() {
    *this = ::std::move(from);
  }

  inline mongo_command_response& operator=(mongo_command_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_command_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_command_response* internal_default_instance() {
    return reinterpret_cast<const mongo_command_response*>(
               &_mongo_command_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(mongo_command_response* other);
  friend void swap(mongo_command_response& a, mongo_command_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_command_response* New() const final {
    return CreateMaybeMessage<mongo_command_response>(nullptr);
  }

  mongo_command_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_command_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_command_response& from);
  void MergeFrom(const mongo_command_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_command_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // @@protoc_insertion_point(class_scope:db.mongo.command.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.command) */ {
 public:
  mongo_command();
  virtual ~mongo_command();

  mongo_command(const mongo_command& from);

  inline mongo_command& operator=(const mongo_command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_command(mongo_command&& from) noexcept
    : mongo_command() {
    *this = ::std::move(from);
  }

  inline mongo_command& operator=(mongo_command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_command* internal_default_instance() {
    return reinterpret_cast<const mongo_command*>(
               &_mongo_command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(mongo_command* other);
  friend void swap(mongo_command& a, mongo_command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_command* New() const final {
    return CreateMaybeMessage<mongo_command>(nullptr);
  }

  mongo_command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_command& from);
  void MergeFrom(const mongo_command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_command_request request;
  typedef mongo_command_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.command)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_merge_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.merge.request) */ {
 public:
  mongo_merge_request();
  virtual ~mongo_merge_request();

  mongo_merge_request(const mongo_merge_request& from);

  inline mongo_merge_request& operator=(const mongo_merge_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_merge_request(mongo_merge_request&& from) noexcept
    : mongo_merge_request() {
    *this = ::std::move(from);
  }

  inline mongo_merge_request& operator=(mongo_merge_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_merge_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_merge_request* internal_default_instance() {
    return reinterpret_cast<const mongo_merge_request*>(
               &_mongo_merge_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(mongo_merge_request* other);
  friend void swap(mongo_merge_request& a, mongo_merge_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_merge_request* New() const final {
    return CreateMaybeMessage<mongo_merge_request>(nullptr);
  }

  mongo_merge_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_merge_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_merge_request& from);
  void MergeFrom(const mongo_merge_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_merge_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field = 1;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string target = 3;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // @@protoc_insertion_point(class_scope:db.mongo.merge.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_merge_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.merge.response) */ {
 public:
  mongo_merge_response();
  virtual ~mongo_merge_response();

  mongo_merge_response(const mongo_merge_response& from);

  inline mongo_merge_response& operator=(const mongo_merge_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_merge_response(mongo_merge_response&& from) noexcept
    : mongo_merge_response() {
    *this = ::std::move(from);
  }

  inline mongo_merge_response& operator=(mongo_merge_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_merge_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_merge_response* internal_default_instance() {
    return reinterpret_cast<const mongo_merge_response*>(
               &_mongo_merge_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(mongo_merge_response* other);
  friend void swap(mongo_merge_response& a, mongo_merge_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_merge_response* New() const final {
    return CreateMaybeMessage<mongo_merge_response>(nullptr);
  }

  mongo_merge_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_merge_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_merge_response& from);
  void MergeFrom(const mongo_merge_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_merge_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:db.mongo.merge.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo_merge :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo.merge) */ {
 public:
  mongo_merge();
  virtual ~mongo_merge();

  mongo_merge(const mongo_merge& from);

  inline mongo_merge& operator=(const mongo_merge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo_merge(mongo_merge&& from) noexcept
    : mongo_merge() {
    *this = ::std::move(from);
  }

  inline mongo_merge& operator=(mongo_merge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo_merge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo_merge* internal_default_instance() {
    return reinterpret_cast<const mongo_merge*>(
               &_mongo_merge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(mongo_merge* other);
  friend void swap(mongo_merge& a, mongo_merge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo_merge* New() const final {
    return CreateMaybeMessage<mongo_merge>(nullptr);
  }

  mongo_merge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo_merge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo_merge& from);
  void MergeFrom(const mongo_merge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo_merge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_merge_request request;
  typedef mongo_merge_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo.merge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class mongo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.mongo) */ {
 public:
  mongo();
  virtual ~mongo();

  mongo(const mongo& from);

  inline mongo& operator=(const mongo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mongo(mongo&& from) noexcept
    : mongo() {
    *this = ::std::move(from);
  }

  inline mongo& operator=(mongo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mongo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mongo* internal_default_instance() {
    return reinterpret_cast<const mongo*>(
               &_mongo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(mongo* other);
  friend void swap(mongo& a, mongo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mongo* New() const final {
    return CreateMaybeMessage<mongo>(nullptr);
  }

  mongo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mongo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mongo& from);
  void MergeFrom(const mongo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mongo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef mongo_insert insert;
  typedef mongo_find find;
  typedef mongo_find_one find_one;
  typedef mongo_aggregate aggregate;
  typedef mongo_count count;
  typedef mongo_remove remove;
  typedef mongo_index index;
  typedef mongo_updater updater;
  typedef mongo_updates updates;
  typedef mongo_update update;
  typedef mongo_response response;
  typedef mongo_inc inc;
  typedef mongo_find_modify find_modify;
  typedef mongo_command command;
  typedef mongo_merge merge;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.mongo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_create :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.create) */ {
 public:
  sql_create();
  virtual ~sql_create();

  sql_create(const sql_create& from);

  inline sql_create& operator=(const sql_create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_create(sql_create&& from) noexcept
    : sql_create() {
    *this = ::std::move(from);
  }

  inline sql_create& operator=(sql_create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_create* internal_default_instance() {
    return reinterpret_cast<const sql_create*>(
               &_sql_create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(sql_create* other);
  friend void swap(sql_create& a, sql_create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_create* New() const final {
    return CreateMaybeMessage<sql_create>(nullptr);
  }

  sql_create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_create& from);
  void MergeFrom(const sql_create& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_keys();

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // @@protoc_insertion_point(class_scope:db.sql.create)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> keys_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_index :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.index) */ {
 public:
  sql_index();
  virtual ~sql_index();

  sql_index(const sql_index& from);

  inline sql_index& operator=(const sql_index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_index(sql_index&& from) noexcept
    : sql_index() {
    *this = ::std::move(from);
  }

  inline sql_index& operator=(sql_index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_index* internal_default_instance() {
    return reinterpret_cast<const sql_index*>(
               &_sql_index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(sql_index* other);
  friend void swap(sql_index& a, sql_index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_index* New() const final {
    return CreateMaybeMessage<sql_index>(nullptr);
  }

  sql_index* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_index>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_index& from);
  void MergeFrom(const sql_index& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tab = 1;
  void clear_tab();
  static const int kTabFieldNumber = 1;
  const ::std::string& tab() const;
  void set_tab(const ::std::string& value);
  #if LANG_CXX11
  void set_tab(::std::string&& value);
  #endif
  void set_tab(const char* value);
  void set_tab(const char* value, size_t size);
  ::std::string* mutable_tab();
  ::std::string* release_tab();
  void set_allocated_tab(::std::string* tab);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 sort = 3;
  void clear_sort();
  static const int kSortFieldNumber = 3;
  ::google::protobuf::int32 sort() const;
  void set_sort(::google::protobuf::int32 value);

  // bool unique = 4;
  void clear_unique();
  static const int kUniqueFieldNumber = 4;
  bool unique() const;
  void set_unique(bool value);

  // @@protoc_insertion_point(class_scope:db.sql.index)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tab_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 sort_;
  bool unique_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_exec :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.exec) */ {
 public:
  sql_exec();
  virtual ~sql_exec();

  sql_exec(const sql_exec& from);

  inline sql_exec& operator=(const sql_exec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_exec(sql_exec&& from) noexcept
    : sql_exec() {
    *this = ::std::move(from);
  }

  inline sql_exec& operator=(sql_exec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_exec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_exec* internal_default_instance() {
    return reinterpret_cast<const sql_exec*>(
               &_sql_exec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(sql_exec* other);
  friend void swap(sql_exec& a, sql_exec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_exec* New() const final {
    return CreateMaybeMessage<sql_exec>(nullptr);
  }

  sql_exec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_exec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_exec& from);
  void MergeFrom(const sql_exec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_exec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sql = 1;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:db.sql.exec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_insert :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.insert) */ {
 public:
  sql_insert();
  virtual ~sql_insert();

  sql_insert(const sql_insert& from);

  inline sql_insert& operator=(const sql_insert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_insert(sql_insert&& from) noexcept
    : sql_insert() {
    *this = ::std::move(from);
  }

  inline sql_insert& operator=(sql_insert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_insert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_insert* internal_default_instance() {
    return reinterpret_cast<const sql_insert*>(
               &_sql_insert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(sql_insert* other);
  friend void swap(sql_insert& a, sql_insert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_insert* New() const final {
    return CreateMaybeMessage<sql_insert>(nullptr);
  }

  sql_insert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_insert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_insert& from);
  void MergeFrom(const sql_insert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_insert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string document = 3;
  void clear_document();
  static const int kDocumentFieldNumber = 3;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // int32 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.insert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  ::google::protobuf::int32 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.save) */ {
 public:
  sql_save();
  virtual ~sql_save();

  sql_save(const sql_save& from);

  inline sql_save& operator=(const sql_save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_save(sql_save&& from) noexcept
    : sql_save() {
    *this = ::std::move(from);
  }

  inline sql_save& operator=(sql_save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_save* internal_default_instance() {
    return reinterpret_cast<const sql_save*>(
               &_sql_save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(sql_save* other);
  friend void swap(sql_save& a, sql_save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_save* New() const final {
    return CreateMaybeMessage<sql_save>(nullptr);
  }

  sql_save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_save& from);
  void MergeFrom(const sql_save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_query_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.query.request) */ {
 public:
  sql_query_request();
  virtual ~sql_query_request();

  sql_query_request(const sql_query_request& from);

  inline sql_query_request& operator=(const sql_query_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_query_request(sql_query_request&& from) noexcept
    : sql_query_request() {
    *this = ::std::move(from);
  }

  inline sql_query_request& operator=(sql_query_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_query_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_query_request* internal_default_instance() {
    return reinterpret_cast<const sql_query_request*>(
               &_sql_query_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(sql_query_request* other);
  friend void swap(sql_query_request& a, sql_query_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_query_request* New() const final {
    return CreateMaybeMessage<sql_query_request>(nullptr);
  }

  sql_query_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_query_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_query_request& from);
  void MergeFrom(const sql_query_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_query_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 4;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 4;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // int32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.query.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_query_page :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.query.page) */ {
 public:
  sql_query_page();
  virtual ~sql_query_page();

  sql_query_page(const sql_query_page& from);

  inline sql_query_page& operator=(const sql_query_page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_query_page(sql_query_page&& from) noexcept
    : sql_query_page() {
    *this = ::std::move(from);
  }

  inline sql_query_page& operator=(sql_query_page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_query_page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_query_page* internal_default_instance() {
    return reinterpret_cast<const sql_query_page*>(
               &_sql_query_page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(sql_query_page* other);
  friend void swap(sql_query_page& a, sql_query_page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_query_page* New() const final {
    return CreateMaybeMessage<sql_query_page>(nullptr);
  }

  sql_query_page* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_query_page>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_query_page& from);
  void MergeFrom(const sql_query_page& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_query_page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 6;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 6;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string sorter = 4;
  void clear_sorter();
  static const int kSorterFieldNumber = 4;
  const ::std::string& sorter() const;
  void set_sorter(const ::std::string& value);
  #if LANG_CXX11
  void set_sorter(::std::string&& value);
  #endif
  void set_sorter(const char* value);
  void set_sorter(const char* value, size_t size);
  ::std::string* mutable_sorter();
  ::std::string* release_sorter();
  void set_allocated_sorter(::std::string* sorter);

  // int32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // int32 page = 5;
  void clear_page();
  static const int kPageFieldNumber = 5;
  ::google::protobuf::int32 page() const;
  void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.query.page)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr sorter_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 page_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_query_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.query.response) */ {
 public:
  sql_query_response();
  virtual ~sql_query_response();

  sql_query_response(const sql_query_response& from);

  inline sql_query_response& operator=(const sql_query_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_query_response(sql_query_response&& from) noexcept
    : sql_query_response() {
    *this = ::std::move(from);
  }

  inline sql_query_response& operator=(sql_query_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_query_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_query_response* internal_default_instance() {
    return reinterpret_cast<const sql_query_response*>(
               &_sql_query_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(sql_query_response* other);
  friend void swap(sql_query_response& a, sql_query_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_query_response* New() const final {
    return CreateMaybeMessage<sql_query_response>(nullptr);
  }

  sql_query_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_query_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_query_response& from);
  void MergeFrom(const sql_query_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_query_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes documents = 2;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 2;
  const ::std::string& documents(int index) const;
  ::std::string* mutable_documents(int index);
  void set_documents(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_documents(int index, ::std::string&& value);
  #endif
  void set_documents(int index, const char* value);
  void set_documents(int index, const void* value, size_t size);
  ::std::string* add_documents();
  void add_documents(const ::std::string& value);
  #if LANG_CXX11
  void add_documents(::std::string&& value);
  #endif
  void add_documents(const char* value);
  void add_documents(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& documents() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_documents();

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:db.sql.query.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> documents_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_query :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.query) */ {
 public:
  sql_query();
  virtual ~sql_query();

  sql_query(const sql_query& from);

  inline sql_query& operator=(const sql_query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_query(sql_query&& from) noexcept
    : sql_query() {
    *this = ::std::move(from);
  }

  inline sql_query& operator=(sql_query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_query* internal_default_instance() {
    return reinterpret_cast<const sql_query*>(
               &_sql_query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(sql_query* other);
  friend void swap(sql_query& a, sql_query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_query* New() const final {
    return CreateMaybeMessage<sql_query>(nullptr);
  }

  sql_query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_query& from);
  void MergeFrom(const sql_query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef sql_query_request request;
  typedef sql_query_page page;
  typedef sql_query_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.sql.query)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_del :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.del) */ {
 public:
  sql_del();
  virtual ~sql_del();

  sql_del(const sql_del& from);

  inline sql_del& operator=(const sql_del& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_del(sql_del&& from) noexcept
    : sql_del() {
    *this = ::std::move(from);
  }

  inline sql_del& operator=(sql_del&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_del& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_del* internal_default_instance() {
    return reinterpret_cast<const sql_del*>(
               &_sql_del_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(sql_del* other);
  friend void swap(sql_del& a, sql_del& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_del* New() const final {
    return CreateMaybeMessage<sql_del>(nullptr);
  }

  sql_del* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_del>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_del& from);
  void MergeFrom(const sql_del& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_del* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // int32 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // int32 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.del)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_inc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.inc) */ {
 public:
  sql_inc();
  virtual ~sql_inc();

  sql_inc(const sql_inc& from);

  inline sql_inc& operator=(const sql_inc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_inc(sql_inc&& from) noexcept
    : sql_inc() {
    *this = ::std::move(from);
  }

  inline sql_inc& operator=(sql_inc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_inc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_inc* internal_default_instance() {
    return reinterpret_cast<const sql_inc*>(
               &_sql_inc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(sql_inc* other);
  friend void swap(sql_inc& a, sql_inc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_inc* New() const final {
    return CreateMaybeMessage<sql_inc>(nullptr);
  }

  sql_inc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_inc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_inc& from);
  void MergeFrom(const sql_inc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_inc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.inc)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_update :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.update) */ {
 public:
  sql_update();
  virtual ~sql_update();

  sql_update(const sql_update& from);

  inline sql_update& operator=(const sql_update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_update(sql_update&& from) noexcept
    : sql_update() {
    *this = ::std::move(from);
  }

  inline sql_update& operator=(sql_update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_update* internal_default_instance() {
    return reinterpret_cast<const sql_update*>(
               &_sql_update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(sql_update* other);
  friend void swap(sql_update& a, sql_update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_update* New() const final {
    return CreateMaybeMessage<sql_update>(nullptr);
  }

  sql_update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_update& from);
  void MergeFrom(const sql_update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string document = 4;
  void clear_document();
  static const int kDocumentFieldNumber = 4;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // int32 flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // int32 limit = 5;
  void clear_limit();
  static const int kLimitFieldNumber = 5;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.sql.update)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql_response :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql.response) */ {
 public:
  sql_response();
  virtual ~sql_response();

  sql_response(const sql_response& from);

  inline sql_response& operator=(const sql_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql_response(sql_response&& from) noexcept
    : sql_response() {
    *this = ::std::move(from);
  }

  inline sql_response& operator=(sql_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql_response* internal_default_instance() {
    return reinterpret_cast<const sql_response*>(
               &_sql_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(sql_response* other);
  friend void swap(sql_response& a, sql_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql_response* New() const final {
    return CreateMaybeMessage<sql_response>(nullptr);
  }

  sql_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql_response& from);
  void MergeFrom(const sql_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // uint32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.sql.response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::uint32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// -------------------------------------------------------------------

class sql :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.sql) */ {
 public:
  sql();
  virtual ~sql();

  sql(const sql& from);

  inline sql& operator=(const sql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sql(sql&& from) noexcept
    : sql() {
    *this = ::std::move(from);
  }

  inline sql& operator=(sql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sql* internal_default_instance() {
    return reinterpret_cast<const sql*>(
               &_sql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(sql* other);
  friend void swap(sql& a, sql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sql* New() const final {
    return CreateMaybeMessage<sql>(nullptr);
  }

  sql* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sql>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sql& from);
  void MergeFrom(const sql& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef sql_create create;
  typedef sql_index index;
  typedef sql_exec exec;
  typedef sql_insert insert;
  typedef sql_save save;
  typedef sql_query query;
  typedef sql_del del;
  typedef sql_inc inc;
  typedef sql_update update;
  typedef sql_response response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.sql)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mongo_insert

// string tab = 1;
inline void mongo_insert::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_insert::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.insert.tab)
  return tab_.GetNoArena();
}
inline void mongo_insert::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.insert.tab)
}
#if LANG_CXX11
inline void mongo_insert::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.insert.tab)
}
#endif
inline void mongo_insert::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.insert.tab)
}
inline void mongo_insert::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.insert.tab)
}
inline ::std::string* mongo_insert::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.insert.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_insert::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.insert.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_insert::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.insert.tab)
}

// repeated string documents = 2;
inline int mongo_insert::documents_size() const {
  return documents_.size();
}
inline void mongo_insert::clear_documents() {
  documents_.Clear();
}
inline const ::std::string& mongo_insert::documents(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.insert.documents)
  return documents_.Get(index);
}
inline ::std::string* mongo_insert::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.insert.documents)
  return documents_.Mutable(index);
}
inline void mongo_insert::set_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.insert.documents)
  documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_insert::set_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.insert.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_insert::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.insert.documents)
}
inline void mongo_insert::set_documents(int index, const char* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.insert.documents)
}
inline ::std::string* mongo_insert::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.insert.documents)
  return documents_.Add();
}
inline void mongo_insert::add_documents(const ::std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.insert.documents)
}
#if LANG_CXX11
inline void mongo_insert::add_documents(::std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.insert.documents)
}
#endif
inline void mongo_insert::add_documents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.insert.documents)
}
inline void mongo_insert::add_documents(const char* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.insert.documents)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_insert::documents() const {
  // @@protoc_insertion_point(field_list:db.mongo.insert.documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_insert::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.insert.documents)
  return &documents_;
}

// -------------------------------------------------------------------

// mongo_find_request

// string tab = 1;
inline void mongo_find_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_find_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.request.tab)
}
#if LANG_CXX11
inline void mongo_find_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.request.tab)
}
#endif
inline void mongo_find_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.request.tab)
}
inline void mongo_find_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.request.tab)
}
inline ::std::string* mongo_find_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.find.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.request.tab)
}

// int32 limit = 3;
inline void mongo_find_request::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 mongo_find_request::limit() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.request.limit)
  return limit_;
}
inline void mongo_find_request::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.find.request.limit)
}

// string filter = 2;
inline void mongo_find_request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_request::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.request.filter)
  return filter_.GetNoArena();
}
inline void mongo_find_request::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.request.filter)
}
#if LANG_CXX11
inline void mongo_find_request::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.request.filter)
}
#endif
inline void mongo_find_request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.request.filter)
}
inline void mongo_find_request::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.request.filter)
}
inline ::std::string* mongo_find_request::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_request::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.find.request.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.request.filter)
}

// repeated string fields = 4;
inline int mongo_find_request::fields_size() const {
  return fields_.size();
}
inline void mongo_find_request::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& mongo_find_request::fields(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.find.request.fields)
  return fields_.Get(index);
}
inline ::std::string* mongo_find_request::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.find.request.fields)
  return fields_.Mutable(index);
}
inline void mongo_find_request::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find.request.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_find_request::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find.request.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_find_request::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.find.request.fields)
}
inline void mongo_find_request::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.request.fields)
}
inline ::std::string* mongo_find_request::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.find.request.fields)
  return fields_.Add();
}
inline void mongo_find_request::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.find.request.fields)
}
#if LANG_CXX11
inline void mongo_find_request::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.find.request.fields)
}
#endif
inline void mongo_find_request::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.find.request.fields)
}
inline void mongo_find_request::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.find.request.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_find_request::fields() const {
  // @@protoc_insertion_point(field_list:db.mongo.find.request.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_find_request::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.find.request.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// mongo_find_page

// string tab = 1;
inline void mongo_find_page::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_page::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.page.tab)
  return tab_.GetNoArena();
}
inline void mongo_find_page::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.page.tab)
}
#if LANG_CXX11
inline void mongo_find_page::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.page.tab)
}
#endif
inline void mongo_find_page::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.page.tab)
}
inline void mongo_find_page::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.page.tab)
}
inline ::std::string* mongo_find_page::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.page.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_page::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.find.page.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_page::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.page.tab)
}

// string filter = 2;
inline void mongo_find_page::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_page::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.page.filter)
  return filter_.GetNoArena();
}
inline void mongo_find_page::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.page.filter)
}
#if LANG_CXX11
inline void mongo_find_page::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.page.filter)
}
#endif
inline void mongo_find_page::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.page.filter)
}
inline void mongo_find_page::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.page.filter)
}
inline ::std::string* mongo_find_page::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.page.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_page::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.find.page.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_page::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.page.filter)
}

// int32 page = 3;
inline void mongo_find_page::clear_page() {
  page_ = 0;
}
inline ::google::protobuf::int32 mongo_find_page::page() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.page.page)
  return page_;
}
inline void mongo_find_page::set_page(::google::protobuf::int32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.find.page.page)
}

// int32 count = 4;
inline void mongo_find_page::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 mongo_find_page::count() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.page.count)
  return count_;
}
inline void mongo_find_page::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.find.page.count)
}

// string sort = 6;
inline void mongo_find_page::clear_sort() {
  sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_page::sort() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.page.sort)
  return sort_.GetNoArena();
}
inline void mongo_find_page::set_sort(const ::std::string& value) {
  
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.page.sort)
}
#if LANG_CXX11
inline void mongo_find_page::set_sort(::std::string&& value) {
  
  sort_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.page.sort)
}
#endif
inline void mongo_find_page::set_sort(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.page.sort)
}
inline void mongo_find_page::set_sort(const char* value, size_t size) {
  
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.page.sort)
}
inline ::std::string* mongo_find_page::mutable_sort() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.page.sort)
  return sort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_page::release_sort() {
  // @@protoc_insertion_point(field_release:db.mongo.find.page.sort)
  
  return sort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_page::set_allocated_sort(::std::string* sort) {
  if (sort != nullptr) {
    
  } else {
    
  }
  sort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sort);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.page.sort)
}

// repeated string fields = 5;
inline int mongo_find_page::fields_size() const {
  return fields_.size();
}
inline void mongo_find_page::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& mongo_find_page::fields(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.find.page.fields)
  return fields_.Get(index);
}
inline ::std::string* mongo_find_page::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.find.page.fields)
  return fields_.Mutable(index);
}
inline void mongo_find_page::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find.page.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_find_page::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find.page.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_find_page::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.find.page.fields)
}
inline void mongo_find_page::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.page.fields)
}
inline ::std::string* mongo_find_page::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.find.page.fields)
  return fields_.Add();
}
inline void mongo_find_page::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.find.page.fields)
}
#if LANG_CXX11
inline void mongo_find_page::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.find.page.fields)
}
#endif
inline void mongo_find_page::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.find.page.fields)
}
inline void mongo_find_page::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.find.page.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_find_page::fields() const {
  // @@protoc_insertion_point(field_list:db.mongo.find.page.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_find_page::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.find.page.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// mongo_find_more

// string tab = 1;
inline void mongo_find_more::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_more::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.more.tab)
  return tab_.GetNoArena();
}
inline void mongo_find_more::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.more.tab)
}
#if LANG_CXX11
inline void mongo_find_more::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.more.tab)
}
#endif
inline void mongo_find_more::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.more.tab)
}
inline void mongo_find_more::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.more.tab)
}
inline ::std::string* mongo_find_more::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.more.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_more::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.find.more.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_more::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.more.tab)
}

// int64 cursor = 2;
inline void mongo_find_more::clear_cursor() {
  cursor_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 mongo_find_more::cursor() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.more.cursor)
  return cursor_;
}
inline void mongo_find_more::set_cursor(::google::protobuf::int64 value) {
  
  cursor_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.find.more.cursor)
}

// int32 batchSize = 3;
inline void mongo_find_more::clear_batchsize() {
  batchsize_ = 0;
}
inline ::google::protobuf::int32 mongo_find_more::batchsize() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.more.batchSize)
  return batchsize_;
}
inline void mongo_find_more::set_batchsize(::google::protobuf::int32 value) {
  
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.find.more.batchSize)
}

// -------------------------------------------------------------------

// mongo_find_distinct

// string tab = 1;
inline void mongo_find_distinct::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_distinct::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.distinct.tab)
  return tab_.GetNoArena();
}
inline void mongo_find_distinct::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.distinct.tab)
}
#if LANG_CXX11
inline void mongo_find_distinct::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.distinct.tab)
}
#endif
inline void mongo_find_distinct::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.distinct.tab)
}
inline void mongo_find_distinct::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.distinct.tab)
}
inline ::std::string* mongo_find_distinct::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.distinct.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_distinct::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.find.distinct.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_distinct::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.distinct.tab)
}

// string key = 2;
inline void mongo_find_distinct::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_distinct::key() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.distinct.key)
  return key_.GetNoArena();
}
inline void mongo_find_distinct::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.distinct.key)
}
#if LANG_CXX11
inline void mongo_find_distinct::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.distinct.key)
}
#endif
inline void mongo_find_distinct::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.distinct.key)
}
inline void mongo_find_distinct::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.distinct.key)
}
inline ::std::string* mongo_find_distinct::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.distinct.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_distinct::release_key() {
  // @@protoc_insertion_point(field_release:db.mongo.find.distinct.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_distinct::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.distinct.key)
}

// string filter = 3;
inline void mongo_find_distinct::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_distinct::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.distinct.filter)
  return filter_.GetNoArena();
}
inline void mongo_find_distinct::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find.distinct.filter)
}
#if LANG_CXX11
inline void mongo_find_distinct::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find.distinct.filter)
}
#endif
inline void mongo_find_distinct::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find.distinct.filter)
}
inline void mongo_find_distinct::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.distinct.filter)
}
inline ::std::string* mongo_find_distinct::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find.distinct.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_distinct::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.find.distinct.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_distinct::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find.distinct.filter)
}

// -------------------------------------------------------------------

// mongo_find_response

// int64 cursor = 1;
inline void mongo_find_response::clear_cursor() {
  cursor_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 mongo_find_response::cursor() const {
  // @@protoc_insertion_point(field_get:db.mongo.find.response.cursor)
  return cursor_;
}
inline void mongo_find_response::set_cursor(::google::protobuf::int64 value) {
  
  cursor_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.find.response.cursor)
}

// repeated bytes documents = 2;
inline int mongo_find_response::documents_size() const {
  return documents_.size();
}
inline void mongo_find_response::clear_documents() {
  documents_.Clear();
}
inline const ::std::string& mongo_find_response::documents(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.find.response.documents)
  return documents_.Get(index);
}
inline ::std::string* mongo_find_response::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.find.response.documents)
  return documents_.Mutable(index);
}
inline void mongo_find_response::set_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find.response.documents)
  documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_find_response::set_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find.response.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_find_response::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.find.response.documents)
}
inline void mongo_find_response::set_documents(int index, const void* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find.response.documents)
}
inline ::std::string* mongo_find_response::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.find.response.documents)
  return documents_.Add();
}
inline void mongo_find_response::add_documents(const ::std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.find.response.documents)
}
#if LANG_CXX11
inline void mongo_find_response::add_documents(::std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.find.response.documents)
}
#endif
inline void mongo_find_response::add_documents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.find.response.documents)
}
inline void mongo_find_response::add_documents(const void* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.find.response.documents)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_find_response::documents() const {
  // @@protoc_insertion_point(field_list:db.mongo.find.response.documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_find_response::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.find.response.documents)
  return &documents_;
}

// -------------------------------------------------------------------

// mongo_find

// -------------------------------------------------------------------

// mongo_find_one_request

// string tab = 1;
inline void mongo_find_one_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_one_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_one.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_find_one_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_one.request.tab)
}
#if LANG_CXX11
inline void mongo_find_one_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_one.request.tab)
}
#endif
inline void mongo_find_one_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_one.request.tab)
}
inline void mongo_find_one_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_one.request.tab)
}
inline ::std::string* mongo_find_one_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_one.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_one_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.find_one.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_one_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_one.request.tab)
}

// string filter = 2;
inline void mongo_find_one_request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_one_request::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_one.request.filter)
  return filter_.GetNoArena();
}
inline void mongo_find_one_request::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_one.request.filter)
}
#if LANG_CXX11
inline void mongo_find_one_request::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_one.request.filter)
}
#endif
inline void mongo_find_one_request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_one.request.filter)
}
inline void mongo_find_one_request::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_one.request.filter)
}
inline ::std::string* mongo_find_one_request::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_one.request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_one_request::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.find_one.request.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_one_request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_one.request.filter)
}

// repeated string fields = 3;
inline int mongo_find_one_request::fields_size() const {
  return fields_.size();
}
inline void mongo_find_one_request::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& mongo_find_one_request::fields(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.find_one.request.fields)
  return fields_.Get(index);
}
inline ::std::string* mongo_find_one_request::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.find_one.request.fields)
  return fields_.Mutable(index);
}
inline void mongo_find_one_request::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find_one.request.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_find_one_request::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find_one.request.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_find_one_request::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.find_one.request.fields)
}
inline void mongo_find_one_request::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_one.request.fields)
}
inline ::std::string* mongo_find_one_request::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.find_one.request.fields)
  return fields_.Add();
}
inline void mongo_find_one_request::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.find_one.request.fields)
}
#if LANG_CXX11
inline void mongo_find_one_request::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.find_one.request.fields)
}
#endif
inline void mongo_find_one_request::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.find_one.request.fields)
}
inline void mongo_find_one_request::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.find_one.request.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_find_one_request::fields() const {
  // @@protoc_insertion_point(field_list:db.mongo.find_one.request.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_find_one_request::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.find_one.request.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// mongo_find_one_response

// string document = 1;
inline void mongo_find_one_response::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_one_response::document() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_one.response.document)
  return document_.GetNoArena();
}
inline void mongo_find_one_response::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_one.response.document)
}
#if LANG_CXX11
inline void mongo_find_one_response::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_one.response.document)
}
#endif
inline void mongo_find_one_response::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_one.response.document)
}
inline void mongo_find_one_response::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_one.response.document)
}
inline ::std::string* mongo_find_one_response::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_one.response.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_one_response::release_document() {
  // @@protoc_insertion_point(field_release:db.mongo.find_one.response.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_one_response::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_one.response.document)
}

// -------------------------------------------------------------------

// mongo_find_one

// -------------------------------------------------------------------

// mongo_aggregate_request

// string tab = 1;
inline void mongo_aggregate_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_aggregate_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.request.tab)
}
#if LANG_CXX11
inline void mongo_aggregate_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.request.tab)
}
#endif
inline void mongo_aggregate_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.request.tab)
}
inline void mongo_aggregate_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.request.tab)
}
inline ::std::string* mongo_aggregate_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.request.tab)
}

// string by = 2;
inline void mongo_aggregate_request::clear_by() {
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_request::by() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.request.by)
  return by_.GetNoArena();
}
inline void mongo_aggregate_request::set_by(const ::std::string& value) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.request.by)
}
#if LANG_CXX11
inline void mongo_aggregate_request::set_by(::std::string&& value) {
  
  by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.request.by)
}
#endif
inline void mongo_aggregate_request::set_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.request.by)
}
inline void mongo_aggregate_request::set_by(const char* value, size_t size) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.request.by)
}
inline ::std::string* mongo_aggregate_request::mutable_by() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.request.by)
  return by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_request::release_by() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.request.by)
  
  return by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_request::set_allocated_by(::std::string* by) {
  if (by != nullptr) {
    
  } else {
    
  }
  by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), by);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.request.by)
}

// string cmd = 5;
inline void mongo_aggregate_request::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_request::cmd() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.request.cmd)
  return cmd_.GetNoArena();
}
inline void mongo_aggregate_request::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.request.cmd)
}
#if LANG_CXX11
inline void mongo_aggregate_request::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.request.cmd)
}
#endif
inline void mongo_aggregate_request::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.request.cmd)
}
inline void mongo_aggregate_request::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.request.cmd)
}
inline ::std::string* mongo_aggregate_request::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.request.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_request::release_cmd() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.request.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_request::set_allocated_cmd(::std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.request.cmd)
}

// string field = 3;
inline void mongo_aggregate_request::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_request::field() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.request.field)
  return field_.GetNoArena();
}
inline void mongo_aggregate_request::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.request.field)
}
#if LANG_CXX11
inline void mongo_aggregate_request::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.request.field)
}
#endif
inline void mongo_aggregate_request::set_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.request.field)
}
inline void mongo_aggregate_request::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.request.field)
}
inline ::std::string* mongo_aggregate_request::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.request.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_request::release_field() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.request.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_request::set_allocated_field(::std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.request.field)
}

// string filter = 4;
inline void mongo_aggregate_request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_request::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.request.filter)
  return filter_.GetNoArena();
}
inline void mongo_aggregate_request::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.request.filter)
}
#if LANG_CXX11
inline void mongo_aggregate_request::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.request.filter)
}
#endif
inline void mongo_aggregate_request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.request.filter)
}
inline void mongo_aggregate_request::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.request.filter)
}
inline ::std::string* mongo_aggregate_request::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_request::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.request.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.request.filter)
}

// int32 batchSize = 6;
inline void mongo_aggregate_request::clear_batchsize() {
  batchsize_ = 0;
}
inline ::google::protobuf::int32 mongo_aggregate_request::batchsize() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.request.batchSize)
  return batchsize_;
}
inline void mongo_aggregate_request::set_batchsize(::google::protobuf::int32 value) {
  
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.request.batchSize)
}

// -------------------------------------------------------------------

// mongo_aggregate_facet

// string tab = 1;
inline void mongo_aggregate_facet::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_facet::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.facet.tab)
  return tab_.GetNoArena();
}
inline void mongo_aggregate_facet::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.facet.tab)
}
#if LANG_CXX11
inline void mongo_aggregate_facet::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.facet.tab)
}
#endif
inline void mongo_aggregate_facet::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.facet.tab)
}
inline void mongo_aggregate_facet::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.facet.tab)
}
inline ::std::string* mongo_aggregate_facet::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.facet.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_facet::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.facet.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_facet::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.facet.tab)
}

// string _id = 2;
inline void mongo_aggregate_facet::clear__id() {
  _id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_facet::_id() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.facet._id)
  return _id_.GetNoArena();
}
inline void mongo_aggregate_facet::set__id(const ::std::string& value) {
  
  _id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.facet._id)
}
#if LANG_CXX11
inline void mongo_aggregate_facet::set__id(::std::string&& value) {
  
  _id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.facet._id)
}
#endif
inline void mongo_aggregate_facet::set__id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  _id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.facet._id)
}
inline void mongo_aggregate_facet::set__id(const char* value, size_t size) {
  
  _id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.facet._id)
}
inline ::std::string* mongo_aggregate_facet::mutable__id() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.facet._id)
  return _id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_facet::release__id() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.facet._id)
  
  return _id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_facet::set_allocated__id(::std::string* _id) {
  if (_id != nullptr) {
    
  } else {
    
  }
  _id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _id);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.facet._id)
}

// string group = 3;
inline void mongo_aggregate_facet::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_aggregate_facet::group() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.facet.group)
  return group_.GetNoArena();
}
inline void mongo_aggregate_facet::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.facet.group)
}
#if LANG_CXX11
inline void mongo_aggregate_facet::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.aggregate.facet.group)
}
#endif
inline void mongo_aggregate_facet::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.facet.group)
}
inline void mongo_aggregate_facet::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.facet.group)
}
inline ::std::string* mongo_aggregate_facet::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.facet.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_aggregate_facet::release_group() {
  // @@protoc_insertion_point(field_release:db.mongo.aggregate.facet.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_aggregate_facet::set_allocated_group(::std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.aggregate.facet.group)
}

// int32 batchSize = 4;
inline void mongo_aggregate_facet::clear_batchsize() {
  batchsize_ = 0;
}
inline ::google::protobuf::int32 mongo_aggregate_facet::batchsize() const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.facet.batchSize)
  return batchsize_;
}
inline void mongo_aggregate_facet::set_batchsize(::google::protobuf::int32 value) {
  
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.facet.batchSize)
}

// repeated string match = 5;
inline int mongo_aggregate_facet::match_size() const {
  return match_.size();
}
inline void mongo_aggregate_facet::clear_match() {
  match_.Clear();
}
inline const ::std::string& mongo_aggregate_facet::match(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.aggregate.facet.match)
  return match_.Get(index);
}
inline ::std::string* mongo_aggregate_facet::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.aggregate.facet.match)
  return match_.Mutable(index);
}
inline void mongo_aggregate_facet::set_match(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.facet.match)
  match_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_aggregate_facet::set_match(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.aggregate.facet.match)
  match_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_aggregate_facet::set_match(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.aggregate.facet.match)
}
inline void mongo_aggregate_facet::set_match(int index, const char* value, size_t size) {
  match_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.aggregate.facet.match)
}
inline ::std::string* mongo_aggregate_facet::add_match() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.aggregate.facet.match)
  return match_.Add();
}
inline void mongo_aggregate_facet::add_match(const ::std::string& value) {
  match_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.aggregate.facet.match)
}
#if LANG_CXX11
inline void mongo_aggregate_facet::add_match(::std::string&& value) {
  match_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.aggregate.facet.match)
}
#endif
inline void mongo_aggregate_facet::add_match(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.aggregate.facet.match)
}
inline void mongo_aggregate_facet::add_match(const char* value, size_t size) {
  match_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.aggregate.facet.match)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_aggregate_facet::match() const {
  // @@protoc_insertion_point(field_list:db.mongo.aggregate.facet.match)
  return match_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_aggregate_facet::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.aggregate.facet.match)
  return &match_;
}

// -------------------------------------------------------------------

// mongo_aggregate

// -------------------------------------------------------------------

// mongo_count_request

// string tab = 1;
inline void mongo_count_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_count_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.count.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_count_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.count.request.tab)
}
#if LANG_CXX11
inline void mongo_count_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.count.request.tab)
}
#endif
inline void mongo_count_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.count.request.tab)
}
inline void mongo_count_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.count.request.tab)
}
inline ::std::string* mongo_count_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.count.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_count_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.count.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_count_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.count.request.tab)
}

// string filter = 2;
inline void mongo_count_request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_count_request::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.count.request.filter)
  return filter_.GetNoArena();
}
inline void mongo_count_request::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.count.request.filter)
}
#if LANG_CXX11
inline void mongo_count_request::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.count.request.filter)
}
#endif
inline void mongo_count_request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.count.request.filter)
}
inline void mongo_count_request::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.count.request.filter)
}
inline ::std::string* mongo_count_request::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.count.request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_count_request::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.count.request.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_count_request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.count.request.filter)
}

// -------------------------------------------------------------------

// mongo_count_response

// int32 count = 1;
inline void mongo_count_response::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 mongo_count_response::count() const {
  // @@protoc_insertion_point(field_get:db.mongo.count.response.count)
  return count_;
}
inline void mongo_count_response::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.count.response.count)
}

// -------------------------------------------------------------------

// mongo_count

// -------------------------------------------------------------------

// mongo_remove

// string tab = 1;
inline void mongo_remove::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_remove::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.tab)
  return tab_.GetNoArena();
}
inline void mongo_remove::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.remove.tab)
}
#if LANG_CXX11
inline void mongo_remove::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.remove.tab)
}
#endif
inline void mongo_remove::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.remove.tab)
}
inline void mongo_remove::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.remove.tab)
}
inline ::std::string* mongo_remove::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.remove.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_remove::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.remove.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_remove::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.remove.tab)
}

// string filter = 2;
inline void mongo_remove::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_remove::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.filter)
  return filter_.GetNoArena();
}
inline void mongo_remove::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.remove.filter)
}
#if LANG_CXX11
inline void mongo_remove::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.remove.filter)
}
#endif
inline void mongo_remove::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.remove.filter)
}
inline void mongo_remove::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.remove.filter)
}
inline ::std::string* mongo_remove::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.remove.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_remove::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.remove.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_remove::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.remove.filter)
}

// int32 limit = 3;
inline void mongo_remove::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 mongo_remove::limit() const {
  // @@protoc_insertion_point(field_get:db.mongo.remove.limit)
  return limit_;
}
inline void mongo_remove::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.remove.limit)
}

// -------------------------------------------------------------------

// mongo_index

// string tab = 1;
inline void mongo_index::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_index::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.index.tab)
  return tab_.GetNoArena();
}
inline void mongo_index::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.index.tab)
}
#if LANG_CXX11
inline void mongo_index::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.index.tab)
}
#endif
inline void mongo_index::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.index.tab)
}
inline void mongo_index::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.index.tab)
}
inline ::std::string* mongo_index::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.index.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_index::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.index.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_index::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.index.tab)
}

// string key = 2;
inline void mongo_index::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_index::key() const {
  // @@protoc_insertion_point(field_get:db.mongo.index.key)
  return key_.GetNoArena();
}
inline void mongo_index::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.index.key)
}
#if LANG_CXX11
inline void mongo_index::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.index.key)
}
#endif
inline void mongo_index::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.index.key)
}
inline void mongo_index::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.index.key)
}
inline ::std::string* mongo_index::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.index.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_index::release_key() {
  // @@protoc_insertion_point(field_release:db.mongo.index.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_index::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.index.key)
}

// int32 sort = 3;
inline void mongo_index::clear_sort() {
  sort_ = 0;
}
inline ::google::protobuf::int32 mongo_index::sort() const {
  // @@protoc_insertion_point(field_get:db.mongo.index.sort)
  return sort_;
}
inline void mongo_index::set_sort(::google::protobuf::int32 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.index.sort)
}

// bool unique = 4;
inline void mongo_index::clear_unique() {
  unique_ = false;
}
inline bool mongo_index::unique() const {
  // @@protoc_insertion_point(field_get:db.mongo.index.unique)
  return unique_;
}
inline void mongo_index::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.index.unique)
}

// -------------------------------------------------------------------

// mongo_updater

// string cmd = 1;
inline void mongo_updater::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_updater::cmd() const {
  // @@protoc_insertion_point(field_get:db.mongo.updater.cmd)
  return cmd_.GetNoArena();
}
inline void mongo_updater::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.updater.cmd)
}
#if LANG_CXX11
inline void mongo_updater::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.updater.cmd)
}
#endif
inline void mongo_updater::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.updater.cmd)
}
inline void mongo_updater::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.updater.cmd)
}
inline ::std::string* mongo_updater::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.updater.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_updater::release_cmd() {
  // @@protoc_insertion_point(field_release:db.mongo.updater.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_updater::set_allocated_cmd(::std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.updater.cmd)
}

// string filter = 2;
inline void mongo_updater::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_updater::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.updater.filter)
  return filter_.GetNoArena();
}
inline void mongo_updater::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.updater.filter)
}
#if LANG_CXX11
inline void mongo_updater::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.updater.filter)
}
#endif
inline void mongo_updater::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.updater.filter)
}
inline void mongo_updater::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.updater.filter)
}
inline ::std::string* mongo_updater::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.updater.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_updater::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.updater.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_updater::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.updater.filter)
}

// string document = 3;
inline void mongo_updater::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_updater::document() const {
  // @@protoc_insertion_point(field_get:db.mongo.updater.document)
  return document_.GetNoArena();
}
inline void mongo_updater::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.updater.document)
}
#if LANG_CXX11
inline void mongo_updater::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.updater.document)
}
#endif
inline void mongo_updater::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.updater.document)
}
inline void mongo_updater::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.updater.document)
}
inline ::std::string* mongo_updater::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.updater.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_updater::release_document() {
  // @@protoc_insertion_point(field_release:db.mongo.updater.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_updater::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.updater.document)
}

// -------------------------------------------------------------------

// mongo_updates

// string tab = 1;
inline void mongo_updates::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_updates::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.updates.tab)
  return tab_.GetNoArena();
}
inline void mongo_updates::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.updates.tab)
}
#if LANG_CXX11
inline void mongo_updates::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.updates.tab)
}
#endif
inline void mongo_updates::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.updates.tab)
}
inline void mongo_updates::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.updates.tab)
}
inline ::std::string* mongo_updates::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.updates.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_updates::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.updates.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_updates::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.updates.tab)
}

// repeated .db.mongo.updater document = 2;
inline int mongo_updates::document_size() const {
  return document_.size();
}
inline void mongo_updates::clear_document() {
  document_.Clear();
}
inline ::db::mongo_updater* mongo_updates::mutable_document(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.updates.document)
  return document_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::mongo_updater >*
mongo_updates::mutable_document() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.updates.document)
  return &document_;
}
inline const ::db::mongo_updater& mongo_updates::document(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.updates.document)
  return document_.Get(index);
}
inline ::db::mongo_updater* mongo_updates::add_document() {
  // @@protoc_insertion_point(field_add:db.mongo.updates.document)
  return document_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::mongo_updater >&
mongo_updates::document() const {
  // @@protoc_insertion_point(field_list:db.mongo.updates.document)
  return document_;
}

// -------------------------------------------------------------------

// mongo_update

// string tab = 1;
inline void mongo_update::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_update::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.tab)
  return tab_.GetNoArena();
}
inline void mongo_update::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.update.tab)
}
#if LANG_CXX11
inline void mongo_update::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.update.tab)
}
#endif
inline void mongo_update::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.update.tab)
}
inline void mongo_update::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.update.tab)
}
inline ::std::string* mongo_update::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.update.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_update::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.update.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_update::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.update.tab)
}

// .db.mongo.updater document = 2;
inline bool mongo_update::has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline void mongo_update::clear_document() {
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
inline const ::db::mongo_updater& mongo_update::document() const {
  const ::db::mongo_updater* p = document_;
  // @@protoc_insertion_point(field_get:db.mongo.update.document)
  return p != nullptr ? *p : *reinterpret_cast<const ::db::mongo_updater*>(
      &::db::_mongo_updater_default_instance_);
}
inline ::db::mongo_updater* mongo_update::release_document() {
  // @@protoc_insertion_point(field_release:db.mongo.update.document)
  
  ::db::mongo_updater* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::db::mongo_updater* mongo_update::mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::db::mongo_updater>(GetArenaNoVirtual());
    document_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.mongo.update.document)
  return document_;
}
inline void mongo_update::set_allocated_document(::db::mongo_updater* document) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete document_;
  }
  if (document) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:db.mongo.update.document)
}

// bool upsert = 3;
inline void mongo_update::clear_upsert() {
  upsert_ = false;
}
inline bool mongo_update::upsert() const {
  // @@protoc_insertion_point(field_get:db.mongo.update.upsert)
  return upsert_;
}
inline void mongo_update::set_upsert(bool value) {
  
  upsert_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.update.upsert)
}

// -------------------------------------------------------------------

// mongo_response

// int32 count = 1;
inline void mongo_response::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 mongo_response::count() const {
  // @@protoc_insertion_point(field_get:db.mongo.response.count)
  return count_;
}
inline void mongo_response::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.response.count)
}

// -------------------------------------------------------------------

// mongo_inc_request

// string key = 1;
inline void mongo_inc_request::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_inc_request::key() const {
  // @@protoc_insertion_point(field_get:db.mongo.inc.request.key)
  return key_.GetNoArena();
}
inline void mongo_inc_request::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.inc.request.key)
}
#if LANG_CXX11
inline void mongo_inc_request::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.inc.request.key)
}
#endif
inline void mongo_inc_request::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.inc.request.key)
}
inline void mongo_inc_request::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.inc.request.key)
}
inline ::std::string* mongo_inc_request::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.inc.request.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_inc_request::release_key() {
  // @@protoc_insertion_point(field_release:db.mongo.inc.request.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_inc_request::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.inc.request.key)
}

// -------------------------------------------------------------------

// mongo_inc_response

// int32 value = 1;
inline void mongo_inc_response::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 mongo_inc_response::value() const {
  // @@protoc_insertion_point(field_get:db.mongo.inc.response.value)
  return value_;
}
inline void mongo_inc_response::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:db.mongo.inc.response.value)
}

// -------------------------------------------------------------------

// mongo_inc

// -------------------------------------------------------------------

// mongo_find_modify_request

// string tab = 1;
inline void mongo_find_modify_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_modify_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_modify.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_find_modify_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_modify.request.tab)
}
#if LANG_CXX11
inline void mongo_find_modify_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_modify.request.tab)
}
#endif
inline void mongo_find_modify_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_modify.request.tab)
}
inline void mongo_find_modify_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_modify.request.tab)
}
inline ::std::string* mongo_find_modify_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_modify.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_modify_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.find_modify.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_modify_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_modify.request.tab)
}

// string filter = 2;
inline void mongo_find_modify_request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_modify_request::filter() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_modify.request.filter)
  return filter_.GetNoArena();
}
inline void mongo_find_modify_request::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_modify.request.filter)
}
#if LANG_CXX11
inline void mongo_find_modify_request::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_modify.request.filter)
}
#endif
inline void mongo_find_modify_request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_modify.request.filter)
}
inline void mongo_find_modify_request::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_modify.request.filter)
}
inline ::std::string* mongo_find_modify_request::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_modify.request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_modify_request::release_filter() {
  // @@protoc_insertion_point(field_release:db.mongo.find_modify.request.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_modify_request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_modify.request.filter)
}

// string update = 3;
inline void mongo_find_modify_request::clear_update() {
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_modify_request::update() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_modify.request.update)
  return update_.GetNoArena();
}
inline void mongo_find_modify_request::set_update(const ::std::string& value) {
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_modify.request.update)
}
#if LANG_CXX11
inline void mongo_find_modify_request::set_update(::std::string&& value) {
  
  update_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_modify.request.update)
}
#endif
inline void mongo_find_modify_request::set_update(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_modify.request.update)
}
inline void mongo_find_modify_request::set_update(const char* value, size_t size) {
  
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_modify.request.update)
}
inline ::std::string* mongo_find_modify_request::mutable_update() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_modify.request.update)
  return update_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_modify_request::release_update() {
  // @@protoc_insertion_point(field_release:db.mongo.find_modify.request.update)
  
  return update_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_modify_request::set_allocated_update(::std::string* update) {
  if (update != nullptr) {
    
  } else {
    
  }
  update_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_modify.request.update)
}

// repeated string fields = 4;
inline int mongo_find_modify_request::fields_size() const {
  return fields_.size();
}
inline void mongo_find_modify_request::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& mongo_find_modify_request::fields(int index) const {
  // @@protoc_insertion_point(field_get:db.mongo.find_modify.request.fields)
  return fields_.Get(index);
}
inline ::std::string* mongo_find_modify_request::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db.mongo.find_modify.request.fields)
  return fields_.Mutable(index);
}
inline void mongo_find_modify_request::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find_modify.request.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void mongo_find_modify_request::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.mongo.find_modify.request.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void mongo_find_modify_request::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.mongo.find_modify.request.fields)
}
inline void mongo_find_modify_request::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_modify.request.fields)
}
inline ::std::string* mongo_find_modify_request::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:db.mongo.find_modify.request.fields)
  return fields_.Add();
}
inline void mongo_find_modify_request::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.mongo.find_modify.request.fields)
}
#if LANG_CXX11
inline void mongo_find_modify_request::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.mongo.find_modify.request.fields)
}
#endif
inline void mongo_find_modify_request::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.mongo.find_modify.request.fields)
}
inline void mongo_find_modify_request::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.mongo.find_modify.request.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
mongo_find_modify_request::fields() const {
  // @@protoc_insertion_point(field_list:db.mongo.find_modify.request.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
mongo_find_modify_request::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db.mongo.find_modify.request.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// mongo_find_modify_response

// string document = 1;
inline void mongo_find_modify_response::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_find_modify_response::document() const {
  // @@protoc_insertion_point(field_get:db.mongo.find_modify.response.document)
  return document_.GetNoArena();
}
inline void mongo_find_modify_response::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.find_modify.response.document)
}
#if LANG_CXX11
inline void mongo_find_modify_response::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.find_modify.response.document)
}
#endif
inline void mongo_find_modify_response::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.find_modify.response.document)
}
inline void mongo_find_modify_response::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.find_modify.response.document)
}
inline ::std::string* mongo_find_modify_response::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.find_modify.response.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_find_modify_response::release_document() {
  // @@protoc_insertion_point(field_release:db.mongo.find_modify.response.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_find_modify_response::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.find_modify.response.document)
}

// -------------------------------------------------------------------

// mongo_find_modify

// -------------------------------------------------------------------

// mongo_command_request

// string tab = 1;
inline void mongo_command_request::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_command_request::tab() const {
  // @@protoc_insertion_point(field_get:db.mongo.command.request.tab)
  return tab_.GetNoArena();
}
inline void mongo_command_request::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.command.request.tab)
}
#if LANG_CXX11
inline void mongo_command_request::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.command.request.tab)
}
#endif
inline void mongo_command_request::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.command.request.tab)
}
inline void mongo_command_request::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.command.request.tab)
}
inline ::std::string* mongo_command_request::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.command.request.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_command_request::release_tab() {
  // @@protoc_insertion_point(field_release:db.mongo.command.request.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_command_request::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.command.request.tab)
}

// string cmd = 2;
inline void mongo_command_request::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_command_request::cmd() const {
  // @@protoc_insertion_point(field_get:db.mongo.command.request.cmd)
  return cmd_.GetNoArena();
}
inline void mongo_command_request::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.command.request.cmd)
}
#if LANG_CXX11
inline void mongo_command_request::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.command.request.cmd)
}
#endif
inline void mongo_command_request::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.command.request.cmd)
}
inline void mongo_command_request::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.command.request.cmd)
}
inline ::std::string* mongo_command_request::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.command.request.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_command_request::release_cmd() {
  // @@protoc_insertion_point(field_release:db.mongo.command.request.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_command_request::set_allocated_cmd(::std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.command.request.cmd)
}

// string document = 3;
inline void mongo_command_request::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_command_request::document() const {
  // @@protoc_insertion_point(field_get:db.mongo.command.request.document)
  return document_.GetNoArena();
}
inline void mongo_command_request::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.command.request.document)
}
#if LANG_CXX11
inline void mongo_command_request::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.command.request.document)
}
#endif
inline void mongo_command_request::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.command.request.document)
}
inline void mongo_command_request::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.command.request.document)
}
inline ::std::string* mongo_command_request::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.command.request.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_command_request::release_document() {
  // @@protoc_insertion_point(field_release:db.mongo.command.request.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_command_request::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.command.request.document)
}

// -------------------------------------------------------------------

// mongo_command_response

// string document = 1;
inline void mongo_command_response::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_command_response::document() const {
  // @@protoc_insertion_point(field_get:db.mongo.command.response.document)
  return document_.GetNoArena();
}
inline void mongo_command_response::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.command.response.document)
}
#if LANG_CXX11
inline void mongo_command_response::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.command.response.document)
}
#endif
inline void mongo_command_response::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.command.response.document)
}
inline void mongo_command_response::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.command.response.document)
}
inline ::std::string* mongo_command_response::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.command.response.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_command_response::release_document() {
  // @@protoc_insertion_point(field_release:db.mongo.command.response.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_command_response::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.command.response.document)
}

// -------------------------------------------------------------------

// mongo_command

// -------------------------------------------------------------------

// mongo_merge_request

// string field = 1;
inline void mongo_merge_request::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_merge_request::field() const {
  // @@protoc_insertion_point(field_get:db.mongo.merge.request.field)
  return field_.GetNoArena();
}
inline void mongo_merge_request::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.merge.request.field)
}
#if LANG_CXX11
inline void mongo_merge_request::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.merge.request.field)
}
#endif
inline void mongo_merge_request::set_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.merge.request.field)
}
inline void mongo_merge_request::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.merge.request.field)
}
inline ::std::string* mongo_merge_request::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.merge.request.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_merge_request::release_field() {
  // @@protoc_insertion_point(field_release:db.mongo.merge.request.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_merge_request::set_allocated_field(::std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.merge.request.field)
}

// string source = 2;
inline void mongo_merge_request::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_merge_request::source() const {
  // @@protoc_insertion_point(field_get:db.mongo.merge.request.source)
  return source_.GetNoArena();
}
inline void mongo_merge_request::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.merge.request.source)
}
#if LANG_CXX11
inline void mongo_merge_request::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.merge.request.source)
}
#endif
inline void mongo_merge_request::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.merge.request.source)
}
inline void mongo_merge_request::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.merge.request.source)
}
inline ::std::string* mongo_merge_request::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.merge.request.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_merge_request::release_source() {
  // @@protoc_insertion_point(field_release:db.mongo.merge.request.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_merge_request::set_allocated_source(::std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.merge.request.source)
}

// string target = 3;
inline void mongo_merge_request::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_merge_request::target() const {
  // @@protoc_insertion_point(field_get:db.mongo.merge.request.target)
  return target_.GetNoArena();
}
inline void mongo_merge_request::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.merge.request.target)
}
#if LANG_CXX11
inline void mongo_merge_request::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.merge.request.target)
}
#endif
inline void mongo_merge_request::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.merge.request.target)
}
inline void mongo_merge_request::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.merge.request.target)
}
inline ::std::string* mongo_merge_request::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.merge.request.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_merge_request::release_target() {
  // @@protoc_insertion_point(field_release:db.mongo.merge.request.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_merge_request::set_allocated_target(::std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.merge.request.target)
}

// -------------------------------------------------------------------

// mongo_merge_response

// string uuid = 1;
inline void mongo_merge_response::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mongo_merge_response::uuid() const {
  // @@protoc_insertion_point(field_get:db.mongo.merge.response.uuid)
  return uuid_.GetNoArena();
}
inline void mongo_merge_response::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.mongo.merge.response.uuid)
}
#if LANG_CXX11
inline void mongo_merge_response::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.mongo.merge.response.uuid)
}
#endif
inline void mongo_merge_response::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.mongo.merge.response.uuid)
}
inline void mongo_merge_response::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.mongo.merge.response.uuid)
}
inline ::std::string* mongo_merge_response::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:db.mongo.merge.response.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mongo_merge_response::release_uuid() {
  // @@protoc_insertion_point(field_release:db.mongo.merge.response.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mongo_merge_response::set_allocated_uuid(::std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:db.mongo.merge.response.uuid)
}

// -------------------------------------------------------------------

// mongo_merge

// -------------------------------------------------------------------

// mongo

// -------------------------------------------------------------------

// sql_create

// string table = 1;
inline void sql_create::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_create::table() const {
  // @@protoc_insertion_point(field_get:db.sql.create.table)
  return table_.GetNoArena();
}
inline void sql_create::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.create.table)
}
#if LANG_CXX11
inline void sql_create::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.create.table)
}
#endif
inline void sql_create::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.create.table)
}
inline void sql_create::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.create.table)
}
inline ::std::string* sql_create::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.create.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_create::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.create.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_create::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.create.table)
}

// repeated string keys = 2;
inline int sql_create::keys_size() const {
  return keys_.size();
}
inline void sql_create::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& sql_create::keys(int index) const {
  // @@protoc_insertion_point(field_get:db.sql.create.keys)
  return keys_.Get(index);
}
inline ::std::string* sql_create::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:db.sql.create.keys)
  return keys_.Mutable(index);
}
inline void sql_create::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.sql.create.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void sql_create::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.sql.create.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void sql_create::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.sql.create.keys)
}
inline void sql_create::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.sql.create.keys)
}
inline ::std::string* sql_create::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:db.sql.create.keys)
  return keys_.Add();
}
inline void sql_create::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.sql.create.keys)
}
#if LANG_CXX11
inline void sql_create::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.sql.create.keys)
}
#endif
inline void sql_create::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.sql.create.keys)
}
inline void sql_create::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.sql.create.keys)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
sql_create::keys() const {
  // @@protoc_insertion_point(field_list:db.sql.create.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
sql_create::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:db.sql.create.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// sql_index

// string tab = 1;
inline void sql_index::clear_tab() {
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_index::tab() const {
  // @@protoc_insertion_point(field_get:db.sql.index.tab)
  return tab_.GetNoArena();
}
inline void sql_index::set_tab(const ::std::string& value) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.index.tab)
}
#if LANG_CXX11
inline void sql_index::set_tab(::std::string&& value) {
  
  tab_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.index.tab)
}
#endif
inline void sql_index::set_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.index.tab)
}
inline void sql_index::set_tab(const char* value, size_t size) {
  
  tab_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.index.tab)
}
inline ::std::string* sql_index::mutable_tab() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.index.tab)
  return tab_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_index::release_tab() {
  // @@protoc_insertion_point(field_release:db.sql.index.tab)
  
  return tab_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_index::set_allocated_tab(::std::string* tab) {
  if (tab != nullptr) {
    
  } else {
    
  }
  tab_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tab);
  // @@protoc_insertion_point(field_set_allocated:db.sql.index.tab)
}

// string name = 2;
inline void sql_index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_index::name() const {
  // @@protoc_insertion_point(field_get:db.sql.index.name)
  return name_.GetNoArena();
}
inline void sql_index::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.index.name)
}
#if LANG_CXX11
inline void sql_index::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.index.name)
}
#endif
inline void sql_index::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.index.name)
}
inline void sql_index::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.index.name)
}
inline ::std::string* sql_index::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_index::release_name() {
  // @@protoc_insertion_point(field_release:db.sql.index.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_index::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:db.sql.index.name)
}

// int32 sort = 3;
inline void sql_index::clear_sort() {
  sort_ = 0;
}
inline ::google::protobuf::int32 sql_index::sort() const {
  // @@protoc_insertion_point(field_get:db.sql.index.sort)
  return sort_;
}
inline void sql_index::set_sort(::google::protobuf::int32 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:db.sql.index.sort)
}

// bool unique = 4;
inline void sql_index::clear_unique() {
  unique_ = false;
}
inline bool sql_index::unique() const {
  // @@protoc_insertion_point(field_get:db.sql.index.unique)
  return unique_;
}
inline void sql_index::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:db.sql.index.unique)
}

// -------------------------------------------------------------------

// sql_exec

// string sql = 1;
inline void sql_exec::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_exec::sql() const {
  // @@protoc_insertion_point(field_get:db.sql.exec.sql)
  return sql_.GetNoArena();
}
inline void sql_exec::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.exec.sql)
}
#if LANG_CXX11
inline void sql_exec::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.exec.sql)
}
#endif
inline void sql_exec::set_sql(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.exec.sql)
}
inline void sql_exec::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.exec.sql)
}
inline ::std::string* sql_exec::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.exec.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_exec::release_sql() {
  // @@protoc_insertion_point(field_release:db.sql.exec.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_exec::set_allocated_sql(::std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:db.sql.exec.sql)
}

// -------------------------------------------------------------------

// sql_insert

// int32 flag = 1;
inline void sql_insert::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 sql_insert::flag() const {
  // @@protoc_insertion_point(field_get:db.sql.insert.flag)
  return flag_;
}
inline void sql_insert::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.sql.insert.flag)
}

// string table = 2;
inline void sql_insert::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_insert::table() const {
  // @@protoc_insertion_point(field_get:db.sql.insert.table)
  return table_.GetNoArena();
}
inline void sql_insert::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.insert.table)
}
#if LANG_CXX11
inline void sql_insert::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.insert.table)
}
#endif
inline void sql_insert::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.insert.table)
}
inline void sql_insert::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.insert.table)
}
inline ::std::string* sql_insert::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.insert.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_insert::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.insert.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_insert::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.insert.table)
}

// string document = 3;
inline void sql_insert::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_insert::document() const {
  // @@protoc_insertion_point(field_get:db.sql.insert.document)
  return document_.GetNoArena();
}
inline void sql_insert::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.insert.document)
}
#if LANG_CXX11
inline void sql_insert::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.insert.document)
}
#endif
inline void sql_insert::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.insert.document)
}
inline void sql_insert::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.insert.document)
}
inline ::std::string* sql_insert::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.insert.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_insert::release_document() {
  // @@protoc_insertion_point(field_release:db.sql.insert.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_insert::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.sql.insert.document)
}

// -------------------------------------------------------------------

// sql_save

// int32 flag = 1;
inline void sql_save::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 sql_save::flag() const {
  // @@protoc_insertion_point(field_get:db.sql.save.flag)
  return flag_;
}
inline void sql_save::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.sql.save.flag)
}

// string table = 2;
inline void sql_save::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_save::table() const {
  // @@protoc_insertion_point(field_get:db.sql.save.table)
  return table_.GetNoArena();
}
inline void sql_save::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.save.table)
}
#if LANG_CXX11
inline void sql_save::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.save.table)
}
#endif
inline void sql_save::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.save.table)
}
inline void sql_save::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.save.table)
}
inline ::std::string* sql_save::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.save.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_save::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.save.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_save::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.save.table)
}

// string data = 3;
inline void sql_save::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_save::data() const {
  // @@protoc_insertion_point(field_get:db.sql.save.data)
  return data_.GetNoArena();
}
inline void sql_save::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.save.data)
}
#if LANG_CXX11
inline void sql_save::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.save.data)
}
#endif
inline void sql_save::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.save.data)
}
inline void sql_save::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.save.data)
}
inline ::std::string* sql_save::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.save.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_save::release_data() {
  // @@protoc_insertion_point(field_release:db.sql.save.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_save::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:db.sql.save.data)
}

// -------------------------------------------------------------------

// sql_query_request

// string table = 1;
inline void sql_query_request::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_query_request::table() const {
  // @@protoc_insertion_point(field_get:db.sql.query.request.table)
  return table_.GetNoArena();
}
inline void sql_query_request::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.query.request.table)
}
#if LANG_CXX11
inline void sql_query_request::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.query.request.table)
}
#endif
inline void sql_query_request::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.query.request.table)
}
inline void sql_query_request::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.request.table)
}
inline ::std::string* sql_query_request::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.query.request.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_query_request::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.query.request.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_query_request::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.query.request.table)
}

// int32 limit = 2;
inline void sql_query_request::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 sql_query_request::limit() const {
  // @@protoc_insertion_point(field_get:db.sql.query.request.limit)
  return limit_;
}
inline void sql_query_request::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.sql.query.request.limit)
}

// string filter = 3;
inline void sql_query_request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_query_request::filter() const {
  // @@protoc_insertion_point(field_get:db.sql.query.request.filter)
  return filter_.GetNoArena();
}
inline void sql_query_request::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.query.request.filter)
}
#if LANG_CXX11
inline void sql_query_request::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.query.request.filter)
}
#endif
inline void sql_query_request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.query.request.filter)
}
inline void sql_query_request::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.request.filter)
}
inline ::std::string* sql_query_request::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.query.request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_query_request::release_filter() {
  // @@protoc_insertion_point(field_release:db.sql.query.request.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_query_request::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.sql.query.request.filter)
}

// repeated string fields = 4;
inline int sql_query_request::fields_size() const {
  return fields_.size();
}
inline void sql_query_request::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& sql_query_request::fields(int index) const {
  // @@protoc_insertion_point(field_get:db.sql.query.request.fields)
  return fields_.Get(index);
}
inline ::std::string* sql_query_request::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db.sql.query.request.fields)
  return fields_.Mutable(index);
}
inline void sql_query_request::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.sql.query.request.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void sql_query_request::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.sql.query.request.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void sql_query_request::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.sql.query.request.fields)
}
inline void sql_query_request::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.request.fields)
}
inline ::std::string* sql_query_request::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:db.sql.query.request.fields)
  return fields_.Add();
}
inline void sql_query_request::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.sql.query.request.fields)
}
#if LANG_CXX11
inline void sql_query_request::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.sql.query.request.fields)
}
#endif
inline void sql_query_request::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.sql.query.request.fields)
}
inline void sql_query_request::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.sql.query.request.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
sql_query_request::fields() const {
  // @@protoc_insertion_point(field_list:db.sql.query.request.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
sql_query_request::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db.sql.query.request.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// sql_query_page

// string table = 1;
inline void sql_query_page::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_query_page::table() const {
  // @@protoc_insertion_point(field_get:db.sql.query.page.table)
  return table_.GetNoArena();
}
inline void sql_query_page::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.query.page.table)
}
#if LANG_CXX11
inline void sql_query_page::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.query.page.table)
}
#endif
inline void sql_query_page::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.query.page.table)
}
inline void sql_query_page::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.page.table)
}
inline ::std::string* sql_query_page::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.query.page.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_query_page::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.query.page.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_query_page::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.query.page.table)
}

// int32 limit = 2;
inline void sql_query_page::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 sql_query_page::limit() const {
  // @@protoc_insertion_point(field_get:db.sql.query.page.limit)
  return limit_;
}
inline void sql_query_page::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.sql.query.page.limit)
}

// string filter = 3;
inline void sql_query_page::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_query_page::filter() const {
  // @@protoc_insertion_point(field_get:db.sql.query.page.filter)
  return filter_.GetNoArena();
}
inline void sql_query_page::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.query.page.filter)
}
#if LANG_CXX11
inline void sql_query_page::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.query.page.filter)
}
#endif
inline void sql_query_page::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.query.page.filter)
}
inline void sql_query_page::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.page.filter)
}
inline ::std::string* sql_query_page::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.query.page.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_query_page::release_filter() {
  // @@protoc_insertion_point(field_release:db.sql.query.page.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_query_page::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.sql.query.page.filter)
}

// string sorter = 4;
inline void sql_query_page::clear_sorter() {
  sorter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_query_page::sorter() const {
  // @@protoc_insertion_point(field_get:db.sql.query.page.sorter)
  return sorter_.GetNoArena();
}
inline void sql_query_page::set_sorter(const ::std::string& value) {
  
  sorter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.query.page.sorter)
}
#if LANG_CXX11
inline void sql_query_page::set_sorter(::std::string&& value) {
  
  sorter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.query.page.sorter)
}
#endif
inline void sql_query_page::set_sorter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sorter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.query.page.sorter)
}
inline void sql_query_page::set_sorter(const char* value, size_t size) {
  
  sorter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.page.sorter)
}
inline ::std::string* sql_query_page::mutable_sorter() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.query.page.sorter)
  return sorter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_query_page::release_sorter() {
  // @@protoc_insertion_point(field_release:db.sql.query.page.sorter)
  
  return sorter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_query_page::set_allocated_sorter(::std::string* sorter) {
  if (sorter != nullptr) {
    
  } else {
    
  }
  sorter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sorter);
  // @@protoc_insertion_point(field_set_allocated:db.sql.query.page.sorter)
}

// int32 page = 5;
inline void sql_query_page::clear_page() {
  page_ = 0;
}
inline ::google::protobuf::int32 sql_query_page::page() const {
  // @@protoc_insertion_point(field_get:db.sql.query.page.page)
  return page_;
}
inline void sql_query_page::set_page(::google::protobuf::int32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:db.sql.query.page.page)
}

// repeated string fields = 6;
inline int sql_query_page::fields_size() const {
  return fields_.size();
}
inline void sql_query_page::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& sql_query_page::fields(int index) const {
  // @@protoc_insertion_point(field_get:db.sql.query.page.fields)
  return fields_.Get(index);
}
inline ::std::string* sql_query_page::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db.sql.query.page.fields)
  return fields_.Mutable(index);
}
inline void sql_query_page::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.sql.query.page.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void sql_query_page::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.sql.query.page.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void sql_query_page::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.sql.query.page.fields)
}
inline void sql_query_page::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.page.fields)
}
inline ::std::string* sql_query_page::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:db.sql.query.page.fields)
  return fields_.Add();
}
inline void sql_query_page::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.sql.query.page.fields)
}
#if LANG_CXX11
inline void sql_query_page::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.sql.query.page.fields)
}
#endif
inline void sql_query_page::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.sql.query.page.fields)
}
inline void sql_query_page::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.sql.query.page.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
sql_query_page::fields() const {
  // @@protoc_insertion_point(field_list:db.sql.query.page.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
sql_query_page::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db.sql.query.page.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// sql_query_response

// string error = 1;
inline void sql_query_response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_query_response::error() const {
  // @@protoc_insertion_point(field_get:db.sql.query.response.error)
  return error_.GetNoArena();
}
inline void sql_query_response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.query.response.error)
}
#if LANG_CXX11
inline void sql_query_response::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.query.response.error)
}
#endif
inline void sql_query_response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.query.response.error)
}
inline void sql_query_response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.response.error)
}
inline ::std::string* sql_query_response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.query.response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_query_response::release_error() {
  // @@protoc_insertion_point(field_release:db.sql.query.response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_query_response::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:db.sql.query.response.error)
}

// repeated bytes documents = 2;
inline int sql_query_response::documents_size() const {
  return documents_.size();
}
inline void sql_query_response::clear_documents() {
  documents_.Clear();
}
inline const ::std::string& sql_query_response::documents(int index) const {
  // @@protoc_insertion_point(field_get:db.sql.query.response.documents)
  return documents_.Get(index);
}
inline ::std::string* sql_query_response::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:db.sql.query.response.documents)
  return documents_.Mutable(index);
}
inline void sql_query_response::set_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:db.sql.query.response.documents)
  documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void sql_query_response::set_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:db.sql.query.response.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
#endif
inline void sql_query_response::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db.sql.query.response.documents)
}
inline void sql_query_response::set_documents(int index, const void* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.sql.query.response.documents)
}
inline ::std::string* sql_query_response::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:db.sql.query.response.documents)
  return documents_.Add();
}
inline void sql_query_response::add_documents(const ::std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db.sql.query.response.documents)
}
#if LANG_CXX11
inline void sql_query_response::add_documents(::std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db.sql.query.response.documents)
}
#endif
inline void sql_query_response::add_documents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db.sql.query.response.documents)
}
inline void sql_query_response::add_documents(const void* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db.sql.query.response.documents)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
sql_query_response::documents() const {
  // @@protoc_insertion_point(field_list:db.sql.query.response.documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
sql_query_response::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:db.sql.query.response.documents)
  return &documents_;
}

// -------------------------------------------------------------------

// sql_query

// -------------------------------------------------------------------

// sql_del

// int32 flag = 1;
inline void sql_del::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 sql_del::flag() const {
  // @@protoc_insertion_point(field_get:db.sql.del.flag)
  return flag_;
}
inline void sql_del::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.sql.del.flag)
}

// string table = 2;
inline void sql_del::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_del::table() const {
  // @@protoc_insertion_point(field_get:db.sql.del.table)
  return table_.GetNoArena();
}
inline void sql_del::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.del.table)
}
#if LANG_CXX11
inline void sql_del::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.del.table)
}
#endif
inline void sql_del::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.del.table)
}
inline void sql_del::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.del.table)
}
inline ::std::string* sql_del::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.del.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_del::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.del.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_del::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.del.table)
}

// string filter = 3;
inline void sql_del::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_del::filter() const {
  // @@protoc_insertion_point(field_get:db.sql.del.filter)
  return filter_.GetNoArena();
}
inline void sql_del::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.del.filter)
}
#if LANG_CXX11
inline void sql_del::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.del.filter)
}
#endif
inline void sql_del::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.del.filter)
}
inline void sql_del::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.del.filter)
}
inline ::std::string* sql_del::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.del.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_del::release_filter() {
  // @@protoc_insertion_point(field_release:db.sql.del.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_del::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.sql.del.filter)
}

// int32 limit = 4;
inline void sql_del::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 sql_del::limit() const {
  // @@protoc_insertion_point(field_get:db.sql.del.limit)
  return limit_;
}
inline void sql_del::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.sql.del.limit)
}

// -------------------------------------------------------------------

// sql_inc

// string key = 1;
inline void sql_inc::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_inc::key() const {
  // @@protoc_insertion_point(field_get:db.sql.inc.key)
  return key_.GetNoArena();
}
inline void sql_inc::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.inc.key)
}
#if LANG_CXX11
inline void sql_inc::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.inc.key)
}
#endif
inline void sql_inc::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.inc.key)
}
inline void sql_inc::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.inc.key)
}
inline ::std::string* sql_inc::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.inc.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_inc::release_key() {
  // @@protoc_insertion_point(field_release:db.sql.inc.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_inc::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:db.sql.inc.key)
}

// int32 count = 2;
inline void sql_inc::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 sql_inc::count() const {
  // @@protoc_insertion_point(field_get:db.sql.inc.count)
  return count_;
}
inline void sql_inc::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:db.sql.inc.count)
}

// -------------------------------------------------------------------

// sql_update

// int32 flag = 1;
inline void sql_update::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 sql_update::flag() const {
  // @@protoc_insertion_point(field_get:db.sql.update.flag)
  return flag_;
}
inline void sql_update::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:db.sql.update.flag)
}

// string table = 2;
inline void sql_update::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_update::table() const {
  // @@protoc_insertion_point(field_get:db.sql.update.table)
  return table_.GetNoArena();
}
inline void sql_update::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.update.table)
}
#if LANG_CXX11
inline void sql_update::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.update.table)
}
#endif
inline void sql_update::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.update.table)
}
inline void sql_update::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.update.table)
}
inline ::std::string* sql_update::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.update.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_update::release_table() {
  // @@protoc_insertion_point(field_release:db.sql.update.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_update::set_allocated_table(::std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:db.sql.update.table)
}

// string filter = 3;
inline void sql_update::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_update::filter() const {
  // @@protoc_insertion_point(field_get:db.sql.update.filter)
  return filter_.GetNoArena();
}
inline void sql_update::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.update.filter)
}
#if LANG_CXX11
inline void sql_update::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.update.filter)
}
#endif
inline void sql_update::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.update.filter)
}
inline void sql_update::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.update.filter)
}
inline ::std::string* sql_update::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.update.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_update::release_filter() {
  // @@protoc_insertion_point(field_release:db.sql.update.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_update::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:db.sql.update.filter)
}

// string document = 4;
inline void sql_update::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_update::document() const {
  // @@protoc_insertion_point(field_get:db.sql.update.document)
  return document_.GetNoArena();
}
inline void sql_update::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.update.document)
}
#if LANG_CXX11
inline void sql_update::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.update.document)
}
#endif
inline void sql_update::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.update.document)
}
inline void sql_update::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.update.document)
}
inline ::std::string* sql_update::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.update.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_update::release_document() {
  // @@protoc_insertion_point(field_release:db.sql.update.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_update::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:db.sql.update.document)
}

// int32 limit = 5;
inline void sql_update::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 sql_update::limit() const {
  // @@protoc_insertion_point(field_get:db.sql.update.limit)
  return limit_;
}
inline void sql_update::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.sql.update.limit)
}

// -------------------------------------------------------------------

// sql_response

// string error = 1;
inline void sql_response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sql_response::error() const {
  // @@protoc_insertion_point(field_get:db.sql.response.error)
  return error_.GetNoArena();
}
inline void sql_response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.sql.response.error)
}
#if LANG_CXX11
inline void sql_response::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.sql.response.error)
}
#endif
inline void sql_response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.sql.response.error)
}
inline void sql_response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.sql.response.error)
}
inline ::std::string* sql_response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:db.sql.response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sql_response::release_error() {
  // @@protoc_insertion_point(field_release:db.sql.response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sql_response::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:db.sql.response.error)
}

// uint32 count = 2;
inline void sql_response::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 sql_response::count() const {
  // @@protoc_insertion_point(field_get:db.sql.response.count)
  return count_;
}
inline void sql_response::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:db.sql.response.count)
}

// -------------------------------------------------------------------

// sql

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2fdb_2eproto
