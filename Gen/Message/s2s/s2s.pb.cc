// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s/s2s.proto

#include "s2s/s2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_s2s_2fs2s_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_location_add_ServicesEntry_DoNotUse_s2s_2fs2s_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_s2s_2fs2s_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_server_info_s2s_2fs2s_2eproto;
namespace s2s {
class server_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<server_info> _instance;
} _server_info_default_instance_;
class serverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<server> _instance;
} _server_default_instance_;
class login_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login_request> _instance;
} _login_request_default_instance_;
class login_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login_create> _instance;
} _login_create_default_instance_;
class loginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login> _instance;
} _login_default_instance_;
class logout_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<logout_request> _instance;
} _logout_request_default_instance_;
class logoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<logout> _instance;
} _logout_default_instance_;
class log_showDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<log_show> _instance;
} _log_show_default_instance_;
class log_loginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<log_login> _instance;
} _log_login_default_instance_;
class log_behaviorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<log_behavior> _instance;
} _log_behavior_default_instance_;
class logDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<log> _instance;
} _log_default_instance_;
class allot_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<allot_request> _instance;
} _allot_request_default_instance_;
class allot_saveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<allot_save> _instance;
} _allot_save_default_instance_;
class allotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<allot> _instance;
} _allot_default_instance_;
class location_add_ServicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location_add_ServicesEntry_DoNotUse> _instance;
} _location_add_ServicesEntry_DoNotUse_default_instance_;
class location_addDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location_add> _instance;
} _location_add_default_instance_;
class location_delDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location_del> _instance;
} _location_del_default_instance_;
class locationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location> _instance;
} _location_default_instance_;
class forward_subDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<forward_sub> _instance;
} _forward_sub_default_instance_;
class forward_unsubDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<forward_unsub> _instance;
} _forward_unsub_default_instance_;
class forward_publishDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<forward_publish> _instance;
} _forward_publish_default_instance_;
class forwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<forward> _instance;
} _forward_default_instance_;
}  // namespace s2s
static void InitDefaultsserver_info_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_server_info_default_instance_;
    new (ptr) ::s2s::server_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::server_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_server_info_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsserver_info_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsserver_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_server_default_instance_;
    new (ptr) ::s2s::server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_server_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsserver_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslogin_request_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_login_request_default_instance_;
    new (ptr) ::s2s::login_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::login_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_login_request_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslogin_request_s2s_2fs2s_2eproto}, {
      &scc_info_server_info_s2s_2fs2s_2eproto.base,}};

static void InitDefaultslogin_create_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_login_create_default_instance_;
    new (ptr) ::s2s::login_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::login_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_login_create_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogin_create_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslogin_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_login_default_instance_;
    new (ptr) ::s2s::login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::login::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_login_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogin_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslogout_request_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_logout_request_default_instance_;
    new (ptr) ::s2s::logout_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::logout_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_logout_request_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogout_request_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslogout_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_logout_default_instance_;
    new (ptr) ::s2s::logout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::logout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_logout_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogout_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslog_show_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_log_show_default_instance_;
    new (ptr) ::s2s::log_show();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::log_show::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_log_show_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslog_show_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslog_login_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_log_login_default_instance_;
    new (ptr) ::s2s::log_login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::log_login::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_log_login_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslog_login_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslog_behavior_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_log_behavior_default_instance_;
    new (ptr) ::s2s::log_behavior();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::log_behavior::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_log_behavior_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslog_behavior_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslog_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_log_default_instance_;
    new (ptr) ::s2s::log();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::log::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_log_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslog_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsallot_request_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_allot_request_default_instance_;
    new (ptr) ::s2s::allot_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::allot_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_allot_request_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsallot_request_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsallot_save_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_allot_save_default_instance_;
    new (ptr) ::s2s::allot_save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::allot_save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_allot_save_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsallot_save_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsallot_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_allot_default_instance_;
    new (ptr) ::s2s::allot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::allot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_allot_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsallot_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslocation_add_ServicesEntry_DoNotUse_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_location_add_ServicesEntry_DoNotUse_default_instance_;
    new (ptr) ::s2s::location_add_ServicesEntry_DoNotUse();
  }
  ::s2s::location_add_ServicesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_location_add_ServicesEntry_DoNotUse_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslocation_add_ServicesEntry_DoNotUse_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslocation_add_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_location_add_default_instance_;
    new (ptr) ::s2s::location_add();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::location_add::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_location_add_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslocation_add_s2s_2fs2s_2eproto}, {
      &scc_info_location_add_ServicesEntry_DoNotUse_s2s_2fs2s_2eproto.base,}};

static void InitDefaultslocation_del_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_location_del_default_instance_;
    new (ptr) ::s2s::location_del();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::location_del::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_location_del_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslocation_del_s2s_2fs2s_2eproto}, {}};

static void InitDefaultslocation_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_location_default_instance_;
    new (ptr) ::s2s::location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_location_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslocation_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsforward_sub_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_forward_sub_default_instance_;
    new (ptr) ::s2s::forward_sub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::forward_sub::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_forward_sub_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsforward_sub_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsforward_unsub_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_forward_unsub_default_instance_;
    new (ptr) ::s2s::forward_unsub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::forward_unsub::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_forward_unsub_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsforward_unsub_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsforward_publish_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_forward_publish_default_instance_;
    new (ptr) ::s2s::forward_publish();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::forward_publish::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_forward_publish_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsforward_publish_s2s_2fs2s_2eproto}, {}};

static void InitDefaultsforward_s2s_2fs2s_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::s2s::_forward_default_instance_;
    new (ptr) ::s2s::forward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::s2s::forward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_forward_s2s_2fs2s_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsforward_s2s_2fs2s_2eproto}, {}};

void InitDefaults_s2s_2fs2s_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_server_info_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_server_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_login_request_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_login_create_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_login_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_logout_request_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_logout_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_log_show_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_log_login_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_log_behavior_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_log_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_allot_request_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_allot_save_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_allot_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location_add_ServicesEntry_DoNotUse_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location_add_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location_del_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_forward_sub_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_forward_unsub_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_forward_publish_s2s_2fs2s_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_forward_s2s_2fs2s_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2fs2s_2eproto[22];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2fs2s_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2fs2s_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2fs2s_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::server_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::server_info, id_),
  PROTOBUF_FIELD_OFFSET(::s2s::server_info, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::login_request, user_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::login_request, client_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::login_request, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::login_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::login_create, user_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::login_create, sock_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::logout_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::logout_request, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::log_show, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::log_show, name_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_show, level_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_show, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::log_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::log_login, user_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_login, user_ip_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_login, login_time_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_login, server_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::log_behavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::log_behavior, user_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_behavior, type_),
  PROTOBUF_FIELD_OFFSET(::s2s::log_behavior, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_request, token_),
  PROTOBUF_FIELD_OFFSET(::s2s::allot_request, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::allot_save, service_),
  PROTOBUF_FIELD_OFFSET(::s2s::allot_save, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::allot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::location_add_ServicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::s2s::location_add_ServicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::location_add_ServicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::s2s::location_add_ServicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::location_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::location_add, user_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::location_add, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::location_del, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::location_del, user_id_),
  PROTOBUF_FIELD_OFFSET(::s2s::location_del, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::forward_sub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::forward_sub, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::forward_unsub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::forward_unsub, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::forward_publish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::s2s::forward_publish, channel_),
  PROTOBUF_FIELD_OFFSET(::s2s::forward_publish, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::s2s::forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::s2s::server_info)},
  { 7, -1, sizeof(::s2s::server)},
  { 12, -1, sizeof(::s2s::login_request)},
  { 20, -1, sizeof(::s2s::login_create)},
  { 27, -1, sizeof(::s2s::login)},
  { 32, -1, sizeof(::s2s::logout_request)},
  { 38, -1, sizeof(::s2s::logout)},
  { 43, -1, sizeof(::s2s::log_show)},
  { 51, -1, sizeof(::s2s::log_login)},
  { 60, -1, sizeof(::s2s::log_behavior)},
  { 68, -1, sizeof(::s2s::log)},
  { 73, -1, sizeof(::s2s::allot_request)},
  { 80, -1, sizeof(::s2s::allot_save)},
  { 87, -1, sizeof(::s2s::allot)},
  { 92, 99, sizeof(::s2s::location_add_ServicesEntry_DoNotUse)},
  { 101, -1, sizeof(::s2s::location_add)},
  { 108, -1, sizeof(::s2s::location_del)},
  { 115, -1, sizeof(::s2s::location)},
  { 120, -1, sizeof(::s2s::forward_sub)},
  { 126, -1, sizeof(::s2s::forward_unsub)},
  { 132, -1, sizeof(::s2s::forward_publish)},
  { 139, -1, sizeof(::s2s::forward)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_server_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_login_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_login_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_logout_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_logout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_log_show_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_log_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_log_behavior_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_allot_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_allot_save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_allot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_location_add_ServicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_location_add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_location_del_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_forward_sub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_forward_unsub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_forward_publish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::s2s::_forward_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2fs2s_2eproto = {
  {}, AddDescriptors_s2s_2fs2s_2eproto, "s2s/s2s.proto", schemas,
  file_default_instances, TableStruct_s2s_2fs2s_2eproto::offsets,
  file_level_metadata_s2s_2fs2s_2eproto, 22, file_level_enum_descriptors_s2s_2fs2s_2eproto, file_level_service_descriptors_s2s_2fs2s_2eproto,
};

const char descriptor_table_protodef_s2s_2fs2s_2eproto[] =
  "\n\rs2s/s2s.proto\022\003s2s\"*\n\006server\032 \n\004info\022\n"
  "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\"\202\001\n\005login\032M\n\007re"
  "quest\022\017\n\007user_id\030\001 \001(\003\022\021\n\tclient_id\030\002 \001("
  "\005\022\036\n\004list\030\003 \003(\0132\020.s2s.server.info\032*\n\006cre"
  "ate\022\017\n\007user_id\030\001 \001(\003\022\017\n\007sock_id\030\002 \001(\005\"$\n"
  "\006logout\032\032\n\007request\022\017\n\007user_id\030\001 \001(\003\"\311\001\n\003"
  "log\0324\n\004show\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\005"
  "\022\017\n\007content\030\003 \001(\t\032P\n\005login\022\017\n\007user_id\030\001 "
  "\001(\003\022\017\n\007user_ip\030\002 \001(\t\022\022\n\nlogin_time\030\003 \001(\003"
  "\022\021\n\tserver_ip\030\004 \001(\t\032:\n\010behavior\022\017\n\007user_"
  "id\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\017\n\007address\030\003 \001(\t\""
  "\\\n\005allot\032)\n\007request\022\r\n\005token\030\001 \001(\t\022\017\n\007us"
  "er_id\030\002 \001(\003\032(\n\004save\022\017\n\007service\030\001 \001(\t\022\017\n\007"
  "address\030\002 \001(\t\"\260\001\n\010location\032z\n\003add\022\017\n\007use"
  "r_id\030\001 \001(\003\0221\n\010services\030\002 \003(\0132\037.s2s.locat"
  "ion.add.ServicesEntry\032/\n\rServicesEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032(\n\003del\022\017\n"
  "\007user_id\030\001 \001(\003\022\020\n\010services\030\002 \003(\t\"j\n\007forw"
  "ard\032\027\n\003sub\022\020\n\010channels\030\001 \003(\t\032\031\n\005unsub\022\020\n"
  "\010channels\030\001 \003(\t\032+\n\007publish\022\017\n\007channel\030\001 "
  "\001(\t\022\017\n\007message\030\002 \001(\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2fs2s_2eproto = {
  false, InitDefaults_s2s_2fs2s_2eproto, 
  descriptor_table_protodef_s2s_2fs2s_2eproto,
  "s2s/s2s.proto", &assign_descriptors_table_s2s_2fs2s_2eproto, 828,
};

void AddDescriptors_s2s_2fs2s_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2fs2s_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2fs2s_2eproto = []() { AddDescriptors_s2s_2fs2s_2eproto(); return true; }();
namespace s2s {

// ===================================================================

void server_info::InitAsDefaultInstance() {
}
class server_info::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int server_info::kIdFieldNumber;
const int server_info::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

server_info::server_info()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.server.info)
}
server_info::server_info(const server_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:s2s.server.info)
}

void server_info::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_server_info_s2s_2fs2s_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

server_info::~server_info() {
  // @@protoc_insertion_point(destructor:s2s.server.info)
  SharedDtor();
}

void server_info::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void server_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const server_info& server_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_server_info_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void server_info::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.server.info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* server_info::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<server_info*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.server.info.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool server_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.server.info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.server.info.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.server.info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.server.info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void server_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.server.info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.server.info.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.server.info)
}

::google::protobuf::uint8* server_info::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.server.info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.server.info.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.server.info)
  return target;
}

size_t server_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.server.info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void server_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.server.info)
  GOOGLE_DCHECK_NE(&from, this);
  const server_info* source =
      ::google::protobuf::DynamicCastToGenerated<server_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.server.info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.server.info)
    MergeFrom(*source);
  }
}

void server_info::MergeFrom(const server_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.server.info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void server_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.server.info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_info::CopyFrom(const server_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.server.info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_info::IsInitialized() const {
  return true;
}

void server_info::Swap(server_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void server_info::InternalSwap(server_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata server_info::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void server::InitAsDefaultInstance() {
}
class server::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

server::server()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.server)
}
server::server(const server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.server)
}

void server::SharedCtor() {
}

server::~server() {
  // @@protoc_insertion_point(destructor:s2s.server)
  SharedDtor();
}

void server::SharedDtor() {
}

void server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const server& server::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_server_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void server::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* server::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<server*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.server)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.server)
}

::google::protobuf::uint8* server::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.server)
  return target;
}

size_t server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.server)
  GOOGLE_DCHECK_NE(&from, this);
  const server* source =
      ::google::protobuf::DynamicCastToGenerated<server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.server)
    MergeFrom(*source);
  }
}

void server::MergeFrom(const server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server::CopyFrom(const server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server::IsInitialized() const {
  return true;
}

void server::Swap(server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void server::InternalSwap(server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata server::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void login_request::InitAsDefaultInstance() {
}
class login_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_request::kUserIdFieldNumber;
const int login_request::kClientIdFieldNumber;
const int login_request::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_request::login_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.login.request)
}
login_request::login_request(const login_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:s2s.login.request)
}

void login_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_login_request_s2s_2fs2s_2eproto.base);
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_id_));
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:s2s.login.request)
  SharedDtor();
}

void login_request::SharedDtor() {
}

void login_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_request& login_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_login_request_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.login.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* login_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<login_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 client_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .s2s.server.info list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::s2s::server_info::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.login.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .s2s.server.info list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.login.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.login.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.login.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // int32 client_id = 2;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_id(), output);
  }

  // repeated .s2s.server.info list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.login.request)
}

::google::protobuf::uint8* login_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.login.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // int32 client_id = 2;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_id(), target);
  }

  // repeated .s2s.server.info list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.login.request)
  return target;
}

size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.login.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .s2s.server.info list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int32 client_id = 2;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.login.request)
  GOOGLE_DCHECK_NE(&from, this);
  const login_request* source =
      ::google::protobuf::DynamicCastToGenerated<login_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.login.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.login.request)
    MergeFrom(*source);
  }
}

void login_request::MergeFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.login.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
}

void login_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.login.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.login.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  return true;
}

void login_request::Swap(login_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_request::InternalSwap(login_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(user_id_, other->user_id_);
  swap(client_id_, other->client_id_);
}

::google::protobuf::Metadata login_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void login_create::InitAsDefaultInstance() {
}
class login_create::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_create::kUserIdFieldNumber;
const int login_create::kSockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_create::login_create()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.login.create)
}
login_create::login_create(const login_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sock_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(sock_id_));
  // @@protoc_insertion_point(copy_constructor:s2s.login.create)
}

void login_create::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sock_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(sock_id_));
}

login_create::~login_create() {
  // @@protoc_insertion_point(destructor:s2s.login.create)
  SharedDtor();
}

void login_create::SharedDtor() {
}

void login_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_create& login_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_login_create_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void login_create::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.login.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sock_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(sock_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* login_create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<login_create*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 sock_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sock_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool login_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.login.create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sock_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sock_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.login.create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.login.create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void login_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.login.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // int32 sock_id = 2;
  if (this->sock_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sock_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.login.create)
}

::google::protobuf::uint8* login_create::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.login.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // int32 sock_id = 2;
  if (this->sock_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sock_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.login.create)
  return target;
}

size_t login_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.login.create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int32 sock_id = 2;
  if (this->sock_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sock_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.login.create)
  GOOGLE_DCHECK_NE(&from, this);
  const login_create* source =
      ::google::protobuf::DynamicCastToGenerated<login_create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.login.create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.login.create)
    MergeFrom(*source);
  }
}

void login_create::MergeFrom(const login_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.login.create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.sock_id() != 0) {
    set_sock_id(from.sock_id());
  }
}

void login_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.login.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_create::CopyFrom(const login_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.login.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_create::IsInitialized() const {
  return true;
}

void login_create::Swap(login_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_create::InternalSwap(login_create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(sock_id_, other->sock_id_);
}

::google::protobuf::Metadata login_create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void login::InitAsDefaultInstance() {
}
class login::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login::login()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.login)
}
login::login(const login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.login)
}

void login::SharedCtor() {
}

login::~login() {
  // @@protoc_insertion_point(destructor:s2s.login)
  SharedDtor();
}

void login::SharedDtor() {
}

void login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login& login::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_login_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void login::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* login::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<login*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.login)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.login)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.login)
}

::google::protobuf::uint8* login::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.login)
  return target;
}

size_t login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.login)
  GOOGLE_DCHECK_NE(&from, this);
  const login* source =
      ::google::protobuf::DynamicCastToGenerated<login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.login)
    MergeFrom(*source);
  }
}

void login::MergeFrom(const login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login::CopyFrom(const login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login::IsInitialized() const {
  return true;
}

void login::Swap(login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login::InternalSwap(login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata login::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void logout_request::InitAsDefaultInstance() {
}
class logout_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logout_request::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logout_request::logout_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.logout.request)
}
logout_request::logout_request(const logout_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:s2s.logout.request)
}

void logout_request::SharedCtor() {
  user_id_ = PROTOBUF_LONGLONG(0);
}

logout_request::~logout_request() {
  // @@protoc_insertion_point(destructor:s2s.logout.request)
  SharedDtor();
}

void logout_request::SharedDtor() {
}

void logout_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const logout_request& logout_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_logout_request_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void logout_request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.logout.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* logout_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<logout_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool logout_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.logout.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.logout.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.logout.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void logout_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.logout.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.logout.request)
}

::google::protobuf::uint8* logout_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.logout.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.logout.request)
  return target;
}

size_t logout_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.logout.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logout_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.logout.request)
  GOOGLE_DCHECK_NE(&from, this);
  const logout_request* source =
      ::google::protobuf::DynamicCastToGenerated<logout_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.logout.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.logout.request)
    MergeFrom(*source);
  }
}

void logout_request::MergeFrom(const logout_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.logout.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void logout_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.logout.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_request::CopyFrom(const logout_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.logout.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logout_request::IsInitialized() const {
  return true;
}

void logout_request::Swap(logout_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logout_request::InternalSwap(logout_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::google::protobuf::Metadata logout_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void logout::InitAsDefaultInstance() {
}
class logout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logout::logout()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.logout)
}
logout::logout(const logout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.logout)
}

void logout::SharedCtor() {
}

logout::~logout() {
  // @@protoc_insertion_point(destructor:s2s.logout)
  SharedDtor();
}

void logout::SharedDtor() {
}

void logout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const logout& logout::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_logout_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void logout::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* logout::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<logout*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.logout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.logout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.logout)
}

::google::protobuf::uint8* logout::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.logout)
  return target;
}

size_t logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.logout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.logout)
  GOOGLE_DCHECK_NE(&from, this);
  const logout* source =
      ::google::protobuf::DynamicCastToGenerated<logout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.logout)
    MergeFrom(*source);
  }
}

void logout::MergeFrom(const logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.logout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout::CopyFrom(const logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logout::IsInitialized() const {
  return true;
}

void logout::Swap(logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logout::InternalSwap(logout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata logout::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void log_show::InitAsDefaultInstance() {
}
class log_show::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int log_show::kNameFieldNumber;
const int log_show::kLevelFieldNumber;
const int log_show::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

log_show::log_show()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.log.show)
}
log_show::log_show(const log_show& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:s2s.log.show)
}

void log_show::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_log_show_s2s_2fs2s_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

log_show::~log_show() {
  // @@protoc_insertion_point(destructor:s2s.log.show)
  SharedDtor();
}

void log_show::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void log_show::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const log_show& log_show::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_log_show_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void log_show::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.log.show)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* log_show::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<log_show*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.log.show.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string content = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.log.show.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool log_show::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.log.show)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.log.show.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.log.show.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.log.show)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.log.show)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void log_show::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.log.show)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.show.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.show.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.log.show)
}

::google::protobuf::uint8* log_show::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.log.show)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.show.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.show.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.log.show)
  return target;
}

size_t log_show::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.log.show)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void log_show::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.log.show)
  GOOGLE_DCHECK_NE(&from, this);
  const log_show* source =
      ::google::protobuf::DynamicCastToGenerated<log_show>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.log.show)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.log.show)
    MergeFrom(*source);
  }
}

void log_show::MergeFrom(const log_show& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.log.show)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void log_show::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.log.show)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_show::CopyFrom(const log_show& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.log.show)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_show::IsInitialized() const {
  return true;
}

void log_show::Swap(log_show* other) {
  if (other == this) return;
  InternalSwap(other);
}
void log_show::InternalSwap(log_show* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
}

::google::protobuf::Metadata log_show::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void log_login::InitAsDefaultInstance() {
}
class log_login::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int log_login::kUserIdFieldNumber;
const int log_login::kUserIpFieldNumber;
const int log_login::kLoginTimeFieldNumber;
const int log_login::kServerIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

log_login::log_login()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.log.login)
}
log_login::log_login(const log_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_ip().size() > 0) {
    user_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_ip_);
  }
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_ip().size() > 0) {
    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_time_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(login_time_));
  // @@protoc_insertion_point(copy_constructor:s2s.log.login)
}

void log_login::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_log_login_s2s_2fs2s_2eproto.base);
  user_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(login_time_));
}

log_login::~log_login() {
  // @@protoc_insertion_point(destructor:s2s.log.login)
  SharedDtor();
}

void log_login::SharedDtor() {
  user_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void log_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const log_login& log_login::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_log_login_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void log_login::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.log.login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(login_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* log_login::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<log_login*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.log.login.user_ip");
        object = msg->mutable_user_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 login_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_login_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string server_ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.log.login.server_ip");
        object = msg->mutable_server_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool log_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.log.login)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_ip().data(), static_cast<int>(this->user_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.log.login.user_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 login_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_ip().data(), static_cast<int>(this->server_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.log.login.server_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.log.login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.log.login)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void log_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.log.login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // string user_ip = 2;
  if (this->user_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ip().data(), static_cast<int>(this->user_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.login.user_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_ip(), output);
  }

  // int64 login_time = 3;
  if (this->login_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->login_time(), output);
  }

  // string server_ip = 4;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.login.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.log.login)
}

::google::protobuf::uint8* log_login::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.log.login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // string user_ip = 2;
  if (this->user_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ip().data(), static_cast<int>(this->user_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.login.user_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_ip(), target);
  }

  // int64 login_time = 3;
  if (this->login_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->login_time(), target);
  }

  // string server_ip = 4;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.login.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.log.login)
  return target;
}

size_t log_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.log.login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_ip = 2;
  if (this->user_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_ip());
  }

  // string server_ip = 4;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ip());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int64 login_time = 3;
  if (this->login_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->login_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void log_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.log.login)
  GOOGLE_DCHECK_NE(&from, this);
  const log_login* source =
      ::google::protobuf::DynamicCastToGenerated<log_login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.log.login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.log.login)
    MergeFrom(*source);
  }
}

void log_login::MergeFrom(const log_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.log.login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_ip().size() > 0) {

    user_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_ip_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.login_time() != 0) {
    set_login_time(from.login_time());
  }
}

void log_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.log.login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_login::CopyFrom(const log_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.log.login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_login::IsInitialized() const {
  return true;
}

void log_login::Swap(log_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void log_login::InternalSwap(log_login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ip_.Swap(&other->user_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_ip_.Swap(&other->server_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(login_time_, other->login_time_);
}

::google::protobuf::Metadata log_login::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void log_behavior::InitAsDefaultInstance() {
}
class log_behavior::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int log_behavior::kUserIdFieldNumber;
const int log_behavior::kTypeFieldNumber;
const int log_behavior::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

log_behavior::log_behavior()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.log.behavior)
}
log_behavior::log_behavior(const log_behavior& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:s2s.log.behavior)
}

void log_behavior::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_log_behavior_s2s_2fs2s_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
}

log_behavior::~log_behavior() {
  // @@protoc_insertion_point(destructor:s2s.log.behavior)
  SharedDtor();
}

void log_behavior::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void log_behavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const log_behavior& log_behavior::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_log_behavior_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void log_behavior::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.log.behavior)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* log_behavior::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<log_behavior*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string address = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.log.behavior.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool log_behavior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.log.behavior)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.log.behavior.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.log.behavior)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.log.behavior)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void log_behavior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.log.behavior)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.behavior.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.log.behavior)
}

::google::protobuf::uint8* log_behavior::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.log.behavior)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.log.behavior.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.log.behavior)
  return target;
}

size_t log_behavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.log.behavior)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void log_behavior::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.log.behavior)
  GOOGLE_DCHECK_NE(&from, this);
  const log_behavior* source =
      ::google::protobuf::DynamicCastToGenerated<log_behavior>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.log.behavior)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.log.behavior)
    MergeFrom(*source);
  }
}

void log_behavior::MergeFrom(const log_behavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.log.behavior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void log_behavior::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.log.behavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_behavior::CopyFrom(const log_behavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.log.behavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_behavior::IsInitialized() const {
  return true;
}

void log_behavior::Swap(log_behavior* other) {
  if (other == this) return;
  InternalSwap(other);
}
void log_behavior::InternalSwap(log_behavior* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata log_behavior::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void log::InitAsDefaultInstance() {
}
class log::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

log::log()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.log)
}
log::log(const log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.log)
}

void log::SharedCtor() {
}

log::~log() {
  // @@protoc_insertion_point(destructor:s2s.log)
  SharedDtor();
}

void log::SharedDtor() {
}

void log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const log& log::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_log_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void log::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* log::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<log*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.log)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.log)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.log)
}

::google::protobuf::uint8* log::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.log)
  return target;
}

size_t log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.log)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.log)
  GOOGLE_DCHECK_NE(&from, this);
  const log* source =
      ::google::protobuf::DynamicCastToGenerated<log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.log)
    MergeFrom(*source);
  }
}

void log::MergeFrom(const log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log::CopyFrom(const log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log::IsInitialized() const {
  return true;
}

void log::Swap(log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void log::InternalSwap(log* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata log::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void allot_request::InitAsDefaultInstance() {
}
class allot_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allot_request::kTokenFieldNumber;
const int allot_request::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allot_request::allot_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.allot.request)
}
allot_request::allot_request(const allot_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:s2s.allot.request)
}

void allot_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_allot_request_s2s_2fs2s_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = PROTOBUF_LONGLONG(0);
}

allot_request::~allot_request() {
  // @@protoc_insertion_point(destructor:s2s.allot.request)
  SharedDtor();
}

void allot_request::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void allot_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allot_request& allot_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_allot_request_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void allot_request::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.allot.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* allot_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<allot_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.request.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool allot_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.allot.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.request.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.allot.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.allot.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void allot_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.allot.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.request.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.allot.request)
}

::google::protobuf::uint8* allot_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.allot.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.request.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.allot.request)
  return target;
}

size_t allot_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.allot.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allot_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.allot.request)
  GOOGLE_DCHECK_NE(&from, this);
  const allot_request* source =
      ::google::protobuf::DynamicCastToGenerated<allot_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.allot.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.allot.request)
    MergeFrom(*source);
  }
}

void allot_request::MergeFrom(const allot_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.allot.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void allot_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.allot.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allot_request::CopyFrom(const allot_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.allot.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allot_request::IsInitialized() const {
  return true;
}

void allot_request::Swap(allot_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allot_request::InternalSwap(allot_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

::google::protobuf::Metadata allot_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void allot_save::InitAsDefaultInstance() {
}
class allot_save::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allot_save::kServiceFieldNumber;
const int allot_save::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allot_save::allot_save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.allot.save)
}
allot_save::allot_save(const allot_save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.allot.save)
}

void allot_save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_allot_save_s2s_2fs2s_2eproto.base);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

allot_save::~allot_save() {
  // @@protoc_insertion_point(destructor:s2s.allot.save)
  SharedDtor();
}

void allot_save::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void allot_save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allot_save& allot_save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_allot_save_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void allot_save::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.allot.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* allot_save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<allot_save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.save.service");
        object = msg->mutable_service();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.allot.save.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool allot_save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.allot.save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.save.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.allot.save.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.allot.save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.allot.save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void allot_save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.allot.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.allot.save)
}

::google::protobuf::uint8* allot_save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.allot.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.allot.save.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.allot.save)
  return target;
}

size_t allot_save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.allot.save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allot_save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.allot.save)
  GOOGLE_DCHECK_NE(&from, this);
  const allot_save* source =
      ::google::protobuf::DynamicCastToGenerated<allot_save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.allot.save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.allot.save)
    MergeFrom(*source);
  }
}

void allot_save::MergeFrom(const allot_save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.allot.save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void allot_save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.allot.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allot_save::CopyFrom(const allot_save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.allot.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allot_save::IsInitialized() const {
  return true;
}

void allot_save::Swap(allot_save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allot_save::InternalSwap(allot_save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata allot_save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void allot::InitAsDefaultInstance() {
}
class allot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allot::allot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.allot)
}
allot::allot(const allot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.allot)
}

void allot::SharedCtor() {
}

allot::~allot() {
  // @@protoc_insertion_point(destructor:s2s.allot)
  SharedDtor();
}

void allot::SharedDtor() {
}

void allot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allot& allot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_allot_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void allot::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* allot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<allot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool allot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.allot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.allot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.allot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void allot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.allot)
}

::google::protobuf::uint8* allot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.allot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.allot)
  return target;
}

size_t allot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.allot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.allot)
  GOOGLE_DCHECK_NE(&from, this);
  const allot* source =
      ::google::protobuf::DynamicCastToGenerated<allot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.allot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.allot)
    MergeFrom(*source);
  }
}

void allot::MergeFrom(const allot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.allot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void allot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.allot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allot::CopyFrom(const allot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.allot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allot::IsInitialized() const {
  return true;
}

void allot::Swap(allot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allot::InternalSwap(allot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata allot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

location_add_ServicesEntry_DoNotUse::location_add_ServicesEntry_DoNotUse() {}
location_add_ServicesEntry_DoNotUse::location_add_ServicesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void location_add_ServicesEntry_DoNotUse::MergeFrom(const location_add_ServicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata location_add_ServicesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[14];
}
void location_add_ServicesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool location_add_ServicesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      location_add_ServicesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "s2s.location.add.ServicesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "s2s.location.add.ServicesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void location_add::InitAsDefaultInstance() {
}
class location_add::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int location_add::kUserIdFieldNumber;
const int location_add::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location_add::location_add()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.location.add)
}
location_add::location_add(const location_add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  services_.MergeFrom(from.services_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:s2s.location.add)
}

void location_add::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_location_add_s2s_2fs2s_2eproto.base);
  user_id_ = PROTOBUF_LONGLONG(0);
}

location_add::~location_add() {
  // @@protoc_insertion_point(destructor:s2s.location.add)
  SharedDtor();
}

void location_add::SharedDtor() {
}

void location_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const location_add& location_add::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_location_add_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void location_add::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.location.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* location_add::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<location_add*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> services = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::s2s::location_add_ServicesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->services_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool location_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.location.add)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> services = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          location_add_ServicesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              location_add_ServicesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&services_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.location.add.ServicesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.location.add.ServicesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.location.add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.location.add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void location_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.location.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // map<string, string> services = 2;
  if (!this->services().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "s2s.location.add.ServicesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "s2s.location.add.ServicesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->services().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<location_add_ServicesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(services_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<location_add_ServicesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it) {
        entry.reset(services_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.location.add)
}

::google::protobuf::uint8* location_add::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.location.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // map<string, string> services = 2;
  if (!this->services().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "s2s.location.add.ServicesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "s2s.location.add.ServicesEntry.value");
      }
    };

    if (false &&
        this->services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->services().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<location_add_ServicesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(services_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<location_add_ServicesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it) {
        entry.reset(services_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.location.add)
  return target;
}

size_t location_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.location.add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> services = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->services_size());
  {
    ::std::unique_ptr<location_add_ServicesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->services().begin();
        it != this->services().end(); ++it) {
      entry.reset(services_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location_add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.location.add)
  GOOGLE_DCHECK_NE(&from, this);
  const location_add* source =
      ::google::protobuf::DynamicCastToGenerated<location_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.location.add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.location.add)
    MergeFrom(*source);
  }
}

void location_add::MergeFrom(const location_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.location.add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void location_add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.location.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_add::CopyFrom(const location_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.location.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_add::IsInitialized() const {
  return true;
}

void location_add::Swap(location_add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void location_add::InternalSwap(location_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  services_.Swap(&other->services_);
  swap(user_id_, other->user_id_);
}

::google::protobuf::Metadata location_add::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void location_del::InitAsDefaultInstance() {
}
class location_del::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int location_del::kUserIdFieldNumber;
const int location_del::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location_del::location_del()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.location.del)
}
location_del::location_del(const location_del& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:s2s.location.del)
}

void location_del::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_location_del_s2s_2fs2s_2eproto.base);
  user_id_ = PROTOBUF_LONGLONG(0);
}

location_del::~location_del() {
  // @@protoc_insertion_point(destructor:s2s.location.del)
  SharedDtor();
}

void location_del::SharedDtor() {
}

void location_del::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const location_del& location_del::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_location_del_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void location_del::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.location.del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* location_del::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<location_del*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string services = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.location.del.services");
          object = msg->add_services();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool location_del::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.location.del)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string services = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_services()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->services(this->services_size() - 1).data(),
            static_cast<int>(this->services(this->services_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.location.del.services"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.location.del)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.location.del)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void location_del::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.location.del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // repeated string services = 2;
  for (int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services(i).data(), static_cast<int>(this->services(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.location.del.services");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->services(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.location.del)
}

::google::protobuf::uint8* location_del::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.location.del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // repeated string services = 2;
  for (int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services(i).data(), static_cast<int>(this->services(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.location.del.services");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->services(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.location.del)
  return target;
}

size_t location_del::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.location.del)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string services = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->services_size());
  for (int i = 0, n = this->services_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->services(i));
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location_del::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.location.del)
  GOOGLE_DCHECK_NE(&from, this);
  const location_del* source =
      ::google::protobuf::DynamicCastToGenerated<location_del>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.location.del)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.location.del)
    MergeFrom(*source);
  }
}

void location_del::MergeFrom(const location_del& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.location.del)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void location_del::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.location.del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_del::CopyFrom(const location_del& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.location.del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_del::IsInitialized() const {
  return true;
}

void location_del::Swap(location_del* other) {
  if (other == this) return;
  InternalSwap(other);
}
void location_del::InternalSwap(location_del* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  services_.InternalSwap(CastToBase(&other->services_));
  swap(user_id_, other->user_id_);
}

::google::protobuf::Metadata location_del::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void location::InitAsDefaultInstance() {
}
class location::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location::location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.location)
}
location::location(const location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.location)
}

void location::SharedCtor() {
}

location::~location() {
  // @@protoc_insertion_point(destructor:s2s.location)
  SharedDtor();
}

void location::SharedDtor() {
}

void location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const location& location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_location_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void location::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.location)
}

::google::protobuf::uint8* location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.location)
  return target;
}

size_t location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.location)
  GOOGLE_DCHECK_NE(&from, this);
  const location* source =
      ::google::protobuf::DynamicCastToGenerated<location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.location)
    MergeFrom(*source);
  }
}

void location::MergeFrom(const location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location::CopyFrom(const location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location::IsInitialized() const {
  return true;
}

void location::Swap(location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void location::InternalSwap(location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void forward_sub::InitAsDefaultInstance() {
}
class forward_sub::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int forward_sub::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

forward_sub::forward_sub()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.forward.sub)
}
forward_sub::forward_sub(const forward_sub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.forward.sub)
}

void forward_sub::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_forward_sub_s2s_2fs2s_2eproto.base);
}

forward_sub::~forward_sub() {
  // @@protoc_insertion_point(destructor:s2s.forward.sub)
  SharedDtor();
}

void forward_sub::SharedDtor() {
}

void forward_sub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const forward_sub& forward_sub::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_forward_sub_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void forward_sub::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.forward.sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* forward_sub::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<forward_sub*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string channels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.forward.sub.channels");
          object = msg->add_channels();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool forward_sub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.forward.sub)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channels(this->channels_size() - 1).data(),
            static_cast<int>(this->channels(this->channels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.forward.sub.channels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.forward.sub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.forward.sub)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void forward_sub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.forward.sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string channels = 1;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.sub.channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.forward.sub)
}

::google::protobuf::uint8* forward_sub::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.forward.sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string channels = 1;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.sub.channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.forward.sub)
  return target;
}

size_t forward_sub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.forward.sub)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->channels_size());
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void forward_sub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.forward.sub)
  GOOGLE_DCHECK_NE(&from, this);
  const forward_sub* source =
      ::google::protobuf::DynamicCastToGenerated<forward_sub>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.forward.sub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.forward.sub)
    MergeFrom(*source);
  }
}

void forward_sub::MergeFrom(const forward_sub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.forward.sub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void forward_sub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.forward.sub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forward_sub::CopyFrom(const forward_sub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.forward.sub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forward_sub::IsInitialized() const {
  return true;
}

void forward_sub::Swap(forward_sub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void forward_sub::InternalSwap(forward_sub* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(CastToBase(&other->channels_));
}

::google::protobuf::Metadata forward_sub::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void forward_unsub::InitAsDefaultInstance() {
}
class forward_unsub::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int forward_unsub::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

forward_unsub::forward_unsub()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.forward.unsub)
}
forward_unsub::forward_unsub(const forward_unsub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.forward.unsub)
}

void forward_unsub::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_forward_unsub_s2s_2fs2s_2eproto.base);
}

forward_unsub::~forward_unsub() {
  // @@protoc_insertion_point(destructor:s2s.forward.unsub)
  SharedDtor();
}

void forward_unsub::SharedDtor() {
}

void forward_unsub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const forward_unsub& forward_unsub::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_forward_unsub_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void forward_unsub::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.forward.unsub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* forward_unsub::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<forward_unsub*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string channels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("s2s.forward.unsub.channels");
          object = msg->add_channels();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool forward_unsub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.forward.unsub)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channels(this->channels_size() - 1).data(),
            static_cast<int>(this->channels(this->channels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.forward.unsub.channels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.forward.unsub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.forward.unsub)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void forward_unsub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.forward.unsub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string channels = 1;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.unsub.channels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.forward.unsub)
}

::google::protobuf::uint8* forward_unsub::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.forward.unsub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string channels = 1;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.unsub.channels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->channels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.forward.unsub)
  return target;
}

size_t forward_unsub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.forward.unsub)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->channels_size());
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void forward_unsub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.forward.unsub)
  GOOGLE_DCHECK_NE(&from, this);
  const forward_unsub* source =
      ::google::protobuf::DynamicCastToGenerated<forward_unsub>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.forward.unsub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.forward.unsub)
    MergeFrom(*source);
  }
}

void forward_unsub::MergeFrom(const forward_unsub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.forward.unsub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void forward_unsub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.forward.unsub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forward_unsub::CopyFrom(const forward_unsub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.forward.unsub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forward_unsub::IsInitialized() const {
  return true;
}

void forward_unsub::Swap(forward_unsub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void forward_unsub::InternalSwap(forward_unsub* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(CastToBase(&other->channels_));
}

::google::protobuf::Metadata forward_unsub::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void forward_publish::InitAsDefaultInstance() {
}
class forward_publish::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int forward_publish::kChannelFieldNumber;
const int forward_publish::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

forward_publish::forward_publish()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.forward.publish)
}
forward_publish::forward_publish(const forward_publish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:s2s.forward.publish)
}

void forward_publish::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_forward_publish_s2s_2fs2s_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

forward_publish::~forward_publish() {
  // @@protoc_insertion_point(destructor:s2s.forward.publish)
  SharedDtor();
}

void forward_publish::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void forward_publish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const forward_publish& forward_publish::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_forward_publish_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void forward_publish::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.forward.publish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* forward_publish::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<forward_publish*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.forward.publish.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("s2s.forward.publish.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool forward_publish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.forward.publish)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.forward.publish.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "s2s.forward.publish.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.forward.publish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.forward.publish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void forward_publish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.forward.publish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.publish.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.publish.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.forward.publish)
}

::google::protobuf::uint8* forward_publish::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.forward.publish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.publish.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "s2s.forward.publish.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.forward.publish)
  return target;
}

size_t forward_publish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.forward.publish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void forward_publish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.forward.publish)
  GOOGLE_DCHECK_NE(&from, this);
  const forward_publish* source =
      ::google::protobuf::DynamicCastToGenerated<forward_publish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.forward.publish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.forward.publish)
    MergeFrom(*source);
  }
}

void forward_publish::MergeFrom(const forward_publish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.forward.publish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void forward_publish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.forward.publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forward_publish::CopyFrom(const forward_publish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.forward.publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forward_publish::IsInitialized() const {
  return true;
}

void forward_publish::Swap(forward_publish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void forward_publish::InternalSwap(forward_publish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata forward_publish::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// ===================================================================

void forward::InitAsDefaultInstance() {
}
class forward::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

forward::forward()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s2s.forward)
}
forward::forward(const forward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s2s.forward)
}

void forward::SharedCtor() {
}

forward::~forward() {
  // @@protoc_insertion_point(destructor:s2s.forward)
  SharedDtor();
}

void forward::SharedDtor() {
}

void forward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const forward& forward::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_forward_s2s_2fs2s_2eproto.base);
  return *internal_default_instance();
}


void forward::Clear() {
// @@protoc_insertion_point(message_clear_start:s2s.forward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* forward::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<forward*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool forward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s2s.forward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s2s.forward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s2s.forward)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void forward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s2s.forward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s2s.forward)
}

::google::protobuf::uint8* forward::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s2s.forward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s2s.forward)
  return target;
}

size_t forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s2s.forward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void forward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s2s.forward)
  GOOGLE_DCHECK_NE(&from, this);
  const forward* source =
      ::google::protobuf::DynamicCastToGenerated<forward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s2s.forward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s2s.forward)
    MergeFrom(*source);
  }
}

void forward::MergeFrom(const forward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s2s.forward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void forward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s2s.forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forward::CopyFrom(const forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s2s.forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forward::IsInitialized() const {
  return true;
}

void forward::Swap(forward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void forward::InternalSwap(forward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata forward::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fs2s_2eproto);
  return ::file_level_metadata_s2s_2fs2s_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace s2s
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::s2s::server_info* Arena::CreateMaybeMessage< ::s2s::server_info >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::server_info >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::server* Arena::CreateMaybeMessage< ::s2s::server >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::server >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::login_request* Arena::CreateMaybeMessage< ::s2s::login_request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::login_create* Arena::CreateMaybeMessage< ::s2s::login_create >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::login_create >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::login* Arena::CreateMaybeMessage< ::s2s::login >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::login >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::logout_request* Arena::CreateMaybeMessage< ::s2s::logout_request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::logout_request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::logout* Arena::CreateMaybeMessage< ::s2s::logout >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::logout >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::log_show* Arena::CreateMaybeMessage< ::s2s::log_show >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::log_show >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::log_login* Arena::CreateMaybeMessage< ::s2s::log_login >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::log_login >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::log_behavior* Arena::CreateMaybeMessage< ::s2s::log_behavior >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::log_behavior >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::log* Arena::CreateMaybeMessage< ::s2s::log >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::log >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::allot_request* Arena::CreateMaybeMessage< ::s2s::allot_request >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::allot_request >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::allot_save* Arena::CreateMaybeMessage< ::s2s::allot_save >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::allot_save >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::allot* Arena::CreateMaybeMessage< ::s2s::allot >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::allot >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::location_add_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::s2s::location_add_ServicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::location_add_ServicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::location_add* Arena::CreateMaybeMessage< ::s2s::location_add >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::location_add >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::location_del* Arena::CreateMaybeMessage< ::s2s::location_del >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::location_del >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::location* Arena::CreateMaybeMessage< ::s2s::location >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::location >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::forward_sub* Arena::CreateMaybeMessage< ::s2s::forward_sub >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::forward_sub >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::forward_unsub* Arena::CreateMaybeMessage< ::s2s::forward_unsub >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::forward_unsub >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::forward_publish* Arena::CreateMaybeMessage< ::s2s::forward_publish >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::forward_publish >(arena);
}
template<> PROTOBUF_NOINLINE ::s2s::forward* Arena::CreateMaybeMessage< ::s2s::forward >(Arena* arena) {
  return Arena::CreateInternal< ::s2s::forward >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
