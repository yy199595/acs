// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s/s2s.proto

#ifndef PROTOBUF_INCLUDED_s2s_2fs2s_2eproto
#define PROTOBUF_INCLUDED_s2s_2fs2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_2fs2s_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_2fs2s_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_s2s_2fs2s_2eproto();
namespace s2s {
class allot;
class allotDefaultTypeInternal;
extern allotDefaultTypeInternal _allot_default_instance_;
class allot_request;
class allot_requestDefaultTypeInternal;
extern allot_requestDefaultTypeInternal _allot_request_default_instance_;
class allot_save;
class allot_saveDefaultTypeInternal;
extern allot_saveDefaultTypeInternal _allot_save_default_instance_;
class forward;
class forwardDefaultTypeInternal;
extern forwardDefaultTypeInternal _forward_default_instance_;
class forward_publish;
class forward_publishDefaultTypeInternal;
extern forward_publishDefaultTypeInternal _forward_publish_default_instance_;
class forward_sub;
class forward_subDefaultTypeInternal;
extern forward_subDefaultTypeInternal _forward_sub_default_instance_;
class forward_unsub;
class forward_unsubDefaultTypeInternal;
extern forward_unsubDefaultTypeInternal _forward_unsub_default_instance_;
class location;
class locationDefaultTypeInternal;
extern locationDefaultTypeInternal _location_default_instance_;
class location_add;
class location_addDefaultTypeInternal;
extern location_addDefaultTypeInternal _location_add_default_instance_;
class location_add_ServicesEntry_DoNotUse;
class location_add_ServicesEntry_DoNotUseDefaultTypeInternal;
extern location_add_ServicesEntry_DoNotUseDefaultTypeInternal _location_add_ServicesEntry_DoNotUse_default_instance_;
class location_del;
class location_delDefaultTypeInternal;
extern location_delDefaultTypeInternal _location_del_default_instance_;
class log;
class logDefaultTypeInternal;
extern logDefaultTypeInternal _log_default_instance_;
class log_behavior;
class log_behaviorDefaultTypeInternal;
extern log_behaviorDefaultTypeInternal _log_behavior_default_instance_;
class log_login;
class log_loginDefaultTypeInternal;
extern log_loginDefaultTypeInternal _log_login_default_instance_;
class log_show;
class log_showDefaultTypeInternal;
extern log_showDefaultTypeInternal _log_show_default_instance_;
class login;
class loginDefaultTypeInternal;
extern loginDefaultTypeInternal _login_default_instance_;
class login_create;
class login_createDefaultTypeInternal;
extern login_createDefaultTypeInternal _login_create_default_instance_;
class login_request;
class login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class logout;
class logoutDefaultTypeInternal;
extern logoutDefaultTypeInternal _logout_default_instance_;
class logout_request;
class logout_requestDefaultTypeInternal;
extern logout_requestDefaultTypeInternal _logout_request_default_instance_;
class server;
class serverDefaultTypeInternal;
extern serverDefaultTypeInternal _server_default_instance_;
class server_info;
class server_infoDefaultTypeInternal;
extern server_infoDefaultTypeInternal _server_info_default_instance_;
}  // namespace s2s
namespace google {
namespace protobuf {
template<> ::s2s::allot* Arena::CreateMaybeMessage<::s2s::allot>(Arena*);
template<> ::s2s::allot_request* Arena::CreateMaybeMessage<::s2s::allot_request>(Arena*);
template<> ::s2s::allot_save* Arena::CreateMaybeMessage<::s2s::allot_save>(Arena*);
template<> ::s2s::forward* Arena::CreateMaybeMessage<::s2s::forward>(Arena*);
template<> ::s2s::forward_publish* Arena::CreateMaybeMessage<::s2s::forward_publish>(Arena*);
template<> ::s2s::forward_sub* Arena::CreateMaybeMessage<::s2s::forward_sub>(Arena*);
template<> ::s2s::forward_unsub* Arena::CreateMaybeMessage<::s2s::forward_unsub>(Arena*);
template<> ::s2s::location* Arena::CreateMaybeMessage<::s2s::location>(Arena*);
template<> ::s2s::location_add* Arena::CreateMaybeMessage<::s2s::location_add>(Arena*);
template<> ::s2s::location_add_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage<::s2s::location_add_ServicesEntry_DoNotUse>(Arena*);
template<> ::s2s::location_del* Arena::CreateMaybeMessage<::s2s::location_del>(Arena*);
template<> ::s2s::log* Arena::CreateMaybeMessage<::s2s::log>(Arena*);
template<> ::s2s::log_behavior* Arena::CreateMaybeMessage<::s2s::log_behavior>(Arena*);
template<> ::s2s::log_login* Arena::CreateMaybeMessage<::s2s::log_login>(Arena*);
template<> ::s2s::log_show* Arena::CreateMaybeMessage<::s2s::log_show>(Arena*);
template<> ::s2s::login* Arena::CreateMaybeMessage<::s2s::login>(Arena*);
template<> ::s2s::login_create* Arena::CreateMaybeMessage<::s2s::login_create>(Arena*);
template<> ::s2s::login_request* Arena::CreateMaybeMessage<::s2s::login_request>(Arena*);
template<> ::s2s::logout* Arena::CreateMaybeMessage<::s2s::logout>(Arena*);
template<> ::s2s::logout_request* Arena::CreateMaybeMessage<::s2s::logout_request>(Arena*);
template<> ::s2s::server* Arena::CreateMaybeMessage<::s2s::server>(Arena*);
template<> ::s2s::server_info* Arena::CreateMaybeMessage<::s2s::server_info>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace s2s {

// ===================================================================

class server_info :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.server.info) */ {
 public:
  server_info();
  virtual ~server_info();

  server_info(const server_info& from);

  inline server_info& operator=(const server_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  server_info(server_info&& from) noexcept
    : server_info() {
    *this = ::std::move(from);
  }

  inline server_info& operator=(server_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const server_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server_info* internal_default_instance() {
    return reinterpret_cast<const server_info*>(
               &_server_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(server_info* other);
  friend void swap(server_info& a, server_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline server_info* New() const final {
    return CreateMaybeMessage<server_info>(nullptr);
  }

  server_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<server_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const server_info& from);
  void MergeFrom(const server_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.server.info)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class server :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.server) */ {
 public:
  server();
  virtual ~server();

  server(const server& from);

  inline server& operator=(const server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  server(server&& from) noexcept
    : server() {
    *this = ::std::move(from);
  }

  inline server& operator=(server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server* internal_default_instance() {
    return reinterpret_cast<const server*>(
               &_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(server* other);
  friend void swap(server& a, server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline server* New() const final {
    return CreateMaybeMessage<server>(nullptr);
  }

  server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const server& from);
  void MergeFrom(const server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef server_info info;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.server)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class login_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.login.request) */ {
 public:
  login_request();
  virtual ~login_request();

  login_request(const login_request& from);

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(login_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const login_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(login_request* other);
  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_request* New() const final {
    return CreateMaybeMessage<login_request>(nullptr);
  }

  login_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .s2s.server.info list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  ::s2s::server_info* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::s2s::server_info >*
      mutable_list();
  const ::s2s::server_info& list(int index) const;
  ::s2s::server_info* add_list();
  const ::google::protobuf::RepeatedPtrField< ::s2s::server_info >&
      list() const;

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int32 client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  ::google::protobuf::int32 client_id() const;
  void set_client_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.login.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::s2s::server_info > list_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int32 client_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class login_create :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.login.create) */ {
 public:
  login_create();
  virtual ~login_create();

  login_create(const login_create& from);

  inline login_create& operator=(const login_create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_create(login_create&& from) noexcept
    : login_create() {
    *this = ::std::move(from);
  }

  inline login_create& operator=(login_create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const login_create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_create* internal_default_instance() {
    return reinterpret_cast<const login_create*>(
               &_login_create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(login_create* other);
  friend void swap(login_create& a, login_create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_create* New() const final {
    return CreateMaybeMessage<login_create>(nullptr);
  }

  login_create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<login_create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const login_create& from);
  void MergeFrom(const login_create& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int32 sock_id = 2;
  void clear_sock_id();
  static const int kSockIdFieldNumber = 2;
  ::google::protobuf::int32 sock_id() const;
  void set_sock_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.login.create)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int32 sock_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class login :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.login) */ {
 public:
  login();
  virtual ~login();

  login(const login& from);

  inline login& operator=(const login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login(login&& from) noexcept
    : login() {
    *this = ::std::move(from);
  }

  inline login& operator=(login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login* internal_default_instance() {
    return reinterpret_cast<const login*>(
               &_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(login* other);
  friend void swap(login& a, login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login* New() const final {
    return CreateMaybeMessage<login>(nullptr);
  }

  login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const login& from);
  void MergeFrom(const login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef login_request request;
  typedef login_create create;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.login)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class logout_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.logout.request) */ {
 public:
  logout_request();
  virtual ~logout_request();

  logout_request(const logout_request& from);

  inline logout_request& operator=(const logout_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logout_request(logout_request&& from) noexcept
    : logout_request() {
    *this = ::std::move(from);
  }

  inline logout_request& operator=(logout_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const logout_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const logout_request* internal_default_instance() {
    return reinterpret_cast<const logout_request*>(
               &_logout_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(logout_request* other);
  friend void swap(logout_request& a, logout_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logout_request* New() const final {
    return CreateMaybeMessage<logout_request>(nullptr);
  }

  logout_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<logout_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const logout_request& from);
  void MergeFrom(const logout_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(logout_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.logout.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class logout :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.logout) */ {
 public:
  logout();
  virtual ~logout();

  logout(const logout& from);

  inline logout& operator=(const logout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logout(logout&& from) noexcept
    : logout() {
    *this = ::std::move(from);
  }

  inline logout& operator=(logout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const logout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const logout* internal_default_instance() {
    return reinterpret_cast<const logout*>(
               &_logout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(logout* other);
  friend void swap(logout& a, logout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logout* New() const final {
    return CreateMaybeMessage<logout>(nullptr);
  }

  logout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<logout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const logout& from);
  void MergeFrom(const logout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(logout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef logout_request request;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.logout)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class log_show :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.log.show) */ {
 public:
  log_show();
  virtual ~log_show();

  log_show(const log_show& from);

  inline log_show& operator=(const log_show& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  log_show(log_show&& from) noexcept
    : log_show() {
    *this = ::std::move(from);
  }

  inline log_show& operator=(log_show&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const log_show& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log_show* internal_default_instance() {
    return reinterpret_cast<const log_show*>(
               &_log_show_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(log_show* other);
  friend void swap(log_show& a, log_show& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline log_show* New() const final {
    return CreateMaybeMessage<log_show>(nullptr);
  }

  log_show* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<log_show>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const log_show& from);
  void MergeFrom(const log_show& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(log_show* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.log.show)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class log_login :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.log.login) */ {
 public:
  log_login();
  virtual ~log_login();

  log_login(const log_login& from);

  inline log_login& operator=(const log_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  log_login(log_login&& from) noexcept
    : log_login() {
    *this = ::std::move(from);
  }

  inline log_login& operator=(log_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const log_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log_login* internal_default_instance() {
    return reinterpret_cast<const log_login*>(
               &_log_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(log_login* other);
  friend void swap(log_login& a, log_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline log_login* New() const final {
    return CreateMaybeMessage<log_login>(nullptr);
  }

  log_login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<log_login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const log_login& from);
  void MergeFrom(const log_login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(log_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_ip = 2;
  void clear_user_ip();
  static const int kUserIpFieldNumber = 2;
  const ::std::string& user_ip() const;
  void set_user_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_user_ip(::std::string&& value);
  #endif
  void set_user_ip(const char* value);
  void set_user_ip(const char* value, size_t size);
  ::std::string* mutable_user_ip();
  ::std::string* release_user_ip();
  void set_allocated_user_ip(::std::string* user_ip);

  // string server_ip = 4;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int64 login_time = 3;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 3;
  ::google::protobuf::int64 login_time() const;
  void set_login_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.log.login)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_ip_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 login_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class log_behavior :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.log.behavior) */ {
 public:
  log_behavior();
  virtual ~log_behavior();

  log_behavior(const log_behavior& from);

  inline log_behavior& operator=(const log_behavior& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  log_behavior(log_behavior&& from) noexcept
    : log_behavior() {
    *this = ::std::move(from);
  }

  inline log_behavior& operator=(log_behavior&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const log_behavior& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log_behavior* internal_default_instance() {
    return reinterpret_cast<const log_behavior*>(
               &_log_behavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(log_behavior* other);
  friend void swap(log_behavior& a, log_behavior& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline log_behavior* New() const final {
    return CreateMaybeMessage<log_behavior>(nullptr);
  }

  log_behavior* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<log_behavior>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const log_behavior& from);
  void MergeFrom(const log_behavior& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(log_behavior* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:s2s.log.behavior)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class log :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.log) */ {
 public:
  log();
  virtual ~log();

  log(const log& from);

  inline log& operator=(const log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  log(log&& from) noexcept
    : log() {
    *this = ::std::move(from);
  }

  inline log& operator=(log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log* internal_default_instance() {
    return reinterpret_cast<const log*>(
               &_log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(log* other);
  friend void swap(log& a, log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline log* New() const final {
    return CreateMaybeMessage<log>(nullptr);
  }

  log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const log& from);
  void MergeFrom(const log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef log_show show;
  typedef log_login login;
  typedef log_behavior behavior;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.log)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class allot_request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.allot.request) */ {
 public:
  allot_request();
  virtual ~allot_request();

  allot_request(const allot_request& from);

  inline allot_request& operator=(const allot_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  allot_request(allot_request&& from) noexcept
    : allot_request() {
    *this = ::std::move(from);
  }

  inline allot_request& operator=(allot_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const allot_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allot_request* internal_default_instance() {
    return reinterpret_cast<const allot_request*>(
               &_allot_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(allot_request* other);
  friend void swap(allot_request& a, allot_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline allot_request* New() const final {
    return CreateMaybeMessage<allot_request>(nullptr);
  }

  allot_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<allot_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const allot_request& from);
  void MergeFrom(const allot_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allot_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.allot.request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class allot_save :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.allot.save) */ {
 public:
  allot_save();
  virtual ~allot_save();

  allot_save(const allot_save& from);

  inline allot_save& operator=(const allot_save& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  allot_save(allot_save&& from) noexcept
    : allot_save() {
    *this = ::std::move(from);
  }

  inline allot_save& operator=(allot_save&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const allot_save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allot_save* internal_default_instance() {
    return reinterpret_cast<const allot_save*>(
               &_allot_save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(allot_save* other);
  friend void swap(allot_save& a, allot_save& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline allot_save* New() const final {
    return CreateMaybeMessage<allot_save>(nullptr);
  }

  allot_save* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<allot_save>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const allot_save& from);
  void MergeFrom(const allot_save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allot_save* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:s2s.allot.save)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class allot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.allot) */ {
 public:
  allot();
  virtual ~allot();

  allot(const allot& from);

  inline allot& operator=(const allot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  allot(allot&& from) noexcept
    : allot() {
    *this = ::std::move(from);
  }

  inline allot& operator=(allot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const allot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allot* internal_default_instance() {
    return reinterpret_cast<const allot*>(
               &_allot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(allot* other);
  friend void swap(allot& a, allot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline allot* New() const final {
    return CreateMaybeMessage<allot>(nullptr);
  }

  allot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<allot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const allot& from);
  void MergeFrom(const allot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef allot_request request;
  typedef allot_save save;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.allot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class location_add_ServicesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<location_add_ServicesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<location_add_ServicesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  location_add_ServicesEntry_DoNotUse();
  location_add_ServicesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const location_add_ServicesEntry_DoNotUse& other);
  static const location_add_ServicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const location_add_ServicesEntry_DoNotUse*>(&_location_add_ServicesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class location_add :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.location.add) */ {
 public:
  location_add();
  virtual ~location_add();

  location_add(const location_add& from);

  inline location_add& operator=(const location_add& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  location_add(location_add&& from) noexcept
    : location_add() {
    *this = ::std::move(from);
  }

  inline location_add& operator=(location_add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const location_add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const location_add* internal_default_instance() {
    return reinterpret_cast<const location_add*>(
               &_location_add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(location_add* other);
  friend void swap(location_add& a, location_add& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline location_add* New() const final {
    return CreateMaybeMessage<location_add>(nullptr);
  }

  location_add* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<location_add>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const location_add& from);
  void MergeFrom(const location_add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(location_add* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      services() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_services();

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.location.add)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      location_add_ServicesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > services_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class location_del :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.location.del) */ {
 public:
  location_del();
  virtual ~location_del();

  location_del(const location_del& from);

  inline location_del& operator=(const location_del& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  location_del(location_del&& from) noexcept
    : location_del() {
    *this = ::std::move(from);
  }

  inline location_del& operator=(location_del&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const location_del& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const location_del* internal_default_instance() {
    return reinterpret_cast<const location_del*>(
               &_location_del_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(location_del* other);
  friend void swap(location_del& a, location_del& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline location_del* New() const final {
    return CreateMaybeMessage<location_del>(nullptr);
  }

  location_del* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<location_del>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const location_del& from);
  void MergeFrom(const location_del& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(location_del* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  const ::std::string& services(int index) const;
  ::std::string* mutable_services(int index);
  void set_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_services(int index, ::std::string&& value);
  #endif
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  ::std::string* add_services();
  void add_services(const ::std::string& value);
  #if LANG_CXX11
  void add_services(::std::string&& value);
  #endif
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_services();

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:s2s.location.del)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> services_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class location :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.location) */ {
 public:
  location();
  virtual ~location();

  location(const location& from);

  inline location& operator=(const location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  location(location&& from) noexcept
    : location() {
    *this = ::std::move(from);
  }

  inline location& operator=(location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const location* internal_default_instance() {
    return reinterpret_cast<const location*>(
               &_location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(location* other);
  friend void swap(location& a, location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline location* New() const final {
    return CreateMaybeMessage<location>(nullptr);
  }

  location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const location& from);
  void MergeFrom(const location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef location_add add;
  typedef location_del del;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.location)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class forward_sub :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.forward.sub) */ {
 public:
  forward_sub();
  virtual ~forward_sub();

  forward_sub(const forward_sub& from);

  inline forward_sub& operator=(const forward_sub& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  forward_sub(forward_sub&& from) noexcept
    : forward_sub() {
    *this = ::std::move(from);
  }

  inline forward_sub& operator=(forward_sub&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const forward_sub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const forward_sub* internal_default_instance() {
    return reinterpret_cast<const forward_sub*>(
               &_forward_sub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(forward_sub* other);
  friend void swap(forward_sub& a, forward_sub& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline forward_sub* New() const final {
    return CreateMaybeMessage<forward_sub>(nullptr);
  }

  forward_sub* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<forward_sub>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const forward_sub& from);
  void MergeFrom(const forward_sub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(forward_sub* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::std::string& channels(int index) const;
  ::std::string* mutable_channels(int index);
  void set_channels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_channels(int index, ::std::string&& value);
  #endif
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  ::std::string* add_channels();
  void add_channels(const ::std::string& value);
  #if LANG_CXX11
  void add_channels(::std::string&& value);
  #endif
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& channels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_channels();

  // @@protoc_insertion_point(class_scope:s2s.forward.sub)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> channels_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class forward_unsub :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.forward.unsub) */ {
 public:
  forward_unsub();
  virtual ~forward_unsub();

  forward_unsub(const forward_unsub& from);

  inline forward_unsub& operator=(const forward_unsub& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  forward_unsub(forward_unsub&& from) noexcept
    : forward_unsub() {
    *this = ::std::move(from);
  }

  inline forward_unsub& operator=(forward_unsub&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const forward_unsub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const forward_unsub* internal_default_instance() {
    return reinterpret_cast<const forward_unsub*>(
               &_forward_unsub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(forward_unsub* other);
  friend void swap(forward_unsub& a, forward_unsub& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline forward_unsub* New() const final {
    return CreateMaybeMessage<forward_unsub>(nullptr);
  }

  forward_unsub* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<forward_unsub>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const forward_unsub& from);
  void MergeFrom(const forward_unsub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(forward_unsub* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::std::string& channels(int index) const;
  ::std::string* mutable_channels(int index);
  void set_channels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_channels(int index, ::std::string&& value);
  #endif
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  ::std::string* add_channels();
  void add_channels(const ::std::string& value);
  #if LANG_CXX11
  void add_channels(::std::string&& value);
  #endif
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& channels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_channels();

  // @@protoc_insertion_point(class_scope:s2s.forward.unsub)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> channels_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class forward_publish :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.forward.publish) */ {
 public:
  forward_publish();
  virtual ~forward_publish();

  forward_publish(const forward_publish& from);

  inline forward_publish& operator=(const forward_publish& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  forward_publish(forward_publish&& from) noexcept
    : forward_publish() {
    *this = ::std::move(from);
  }

  inline forward_publish& operator=(forward_publish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const forward_publish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const forward_publish* internal_default_instance() {
    return reinterpret_cast<const forward_publish*>(
               &_forward_publish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(forward_publish* other);
  friend void swap(forward_publish& a, forward_publish& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline forward_publish* New() const final {
    return CreateMaybeMessage<forward_publish>(nullptr);
  }

  forward_publish* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<forward_publish>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const forward_publish& from);
  void MergeFrom(const forward_publish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(forward_publish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:s2s.forward.publish)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// -------------------------------------------------------------------

class forward :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:s2s.forward) */ {
 public:
  forward();
  virtual ~forward();

  forward(const forward& from);

  inline forward& operator=(const forward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  forward(forward&& from) noexcept
    : forward() {
    *this = ::std::move(from);
  }

  inline forward& operator=(forward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const forward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const forward* internal_default_instance() {
    return reinterpret_cast<const forward*>(
               &_forward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(forward* other);
  friend void swap(forward& a, forward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline forward* New() const final {
    return CreateMaybeMessage<forward>(nullptr);
  }

  forward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<forward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const forward& from);
  void MergeFrom(const forward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(forward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef forward_sub sub;
  typedef forward_unsub unsub;
  typedef forward_publish publish;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:s2s.forward)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2s_2fs2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// server_info

// int32 id = 1;
inline void server_info::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 server_info::id() const {
  // @@protoc_insertion_point(field_get:s2s.server.info.id)
  return id_;
}
inline void server_info::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:s2s.server.info.id)
}

// string name = 2;
inline void server_info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& server_info::name() const {
  // @@protoc_insertion_point(field_get:s2s.server.info.name)
  return name_.GetNoArena();
}
inline void server_info::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.server.info.name)
}
#if LANG_CXX11
inline void server_info::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.server.info.name)
}
#endif
inline void server_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.server.info.name)
}
inline void server_info::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.server.info.name)
}
inline ::std::string* server_info::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:s2s.server.info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* server_info::release_name() {
  // @@protoc_insertion_point(field_release:s2s.server.info.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void server_info::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:s2s.server.info.name)
}

// -------------------------------------------------------------------

// server

// -------------------------------------------------------------------

// login_request

// int64 user_id = 1;
inline void login_request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 login_request::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.login.request.user_id)
  return user_id_;
}
inline void login_request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.login.request.user_id)
}

// int32 client_id = 2;
inline void login_request::clear_client_id() {
  client_id_ = 0;
}
inline ::google::protobuf::int32 login_request::client_id() const {
  // @@protoc_insertion_point(field_get:s2s.login.request.client_id)
  return client_id_;
}
inline void login_request::set_client_id(::google::protobuf::int32 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.login.request.client_id)
}

// repeated .s2s.server.info list = 3;
inline int login_request::list_size() const {
  return list_.size();
}
inline void login_request::clear_list() {
  list_.Clear();
}
inline ::s2s::server_info* login_request::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.login.request.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::s2s::server_info >*
login_request::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:s2s.login.request.list)
  return &list_;
}
inline const ::s2s::server_info& login_request::list(int index) const {
  // @@protoc_insertion_point(field_get:s2s.login.request.list)
  return list_.Get(index);
}
inline ::s2s::server_info* login_request::add_list() {
  // @@protoc_insertion_point(field_add:s2s.login.request.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::s2s::server_info >&
login_request::list() const {
  // @@protoc_insertion_point(field_list:s2s.login.request.list)
  return list_;
}

// -------------------------------------------------------------------

// login_create

// int64 user_id = 1;
inline void login_create::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 login_create::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.login.create.user_id)
  return user_id_;
}
inline void login_create::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.login.create.user_id)
}

// int32 sock_id = 2;
inline void login_create::clear_sock_id() {
  sock_id_ = 0;
}
inline ::google::protobuf::int32 login_create::sock_id() const {
  // @@protoc_insertion_point(field_get:s2s.login.create.sock_id)
  return sock_id_;
}
inline void login_create::set_sock_id(::google::protobuf::int32 value) {
  
  sock_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.login.create.sock_id)
}

// -------------------------------------------------------------------

// login

// -------------------------------------------------------------------

// logout_request

// int64 user_id = 1;
inline void logout_request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 logout_request::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.logout.request.user_id)
  return user_id_;
}
inline void logout_request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.logout.request.user_id)
}

// -------------------------------------------------------------------

// logout

// -------------------------------------------------------------------

// log_show

// string name = 1;
inline void log_show::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log_show::name() const {
  // @@protoc_insertion_point(field_get:s2s.log.show.name)
  return name_.GetNoArena();
}
inline void log_show::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.log.show.name)
}
#if LANG_CXX11
inline void log_show::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.log.show.name)
}
#endif
inline void log_show::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.log.show.name)
}
inline void log_show::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.log.show.name)
}
inline ::std::string* log_show::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:s2s.log.show.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log_show::release_name() {
  // @@protoc_insertion_point(field_release:s2s.log.show.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log_show::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:s2s.log.show.name)
}

// int32 level = 2;
inline void log_show::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 log_show::level() const {
  // @@protoc_insertion_point(field_get:s2s.log.show.level)
  return level_;
}
inline void log_show::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:s2s.log.show.level)
}

// string content = 3;
inline void log_show::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log_show::content() const {
  // @@protoc_insertion_point(field_get:s2s.log.show.content)
  return content_.GetNoArena();
}
inline void log_show::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.log.show.content)
}
#if LANG_CXX11
inline void log_show::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.log.show.content)
}
#endif
inline void log_show::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.log.show.content)
}
inline void log_show::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.log.show.content)
}
inline ::std::string* log_show::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:s2s.log.show.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log_show::release_content() {
  // @@protoc_insertion_point(field_release:s2s.log.show.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log_show::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:s2s.log.show.content)
}

// -------------------------------------------------------------------

// log_login

// int64 user_id = 1;
inline void log_login::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 log_login::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.log.login.user_id)
  return user_id_;
}
inline void log_login::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.log.login.user_id)
}

// string user_ip = 2;
inline void log_login::clear_user_ip() {
  user_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log_login::user_ip() const {
  // @@protoc_insertion_point(field_get:s2s.log.login.user_ip)
  return user_ip_.GetNoArena();
}
inline void log_login::set_user_ip(const ::std::string& value) {
  
  user_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.log.login.user_ip)
}
#if LANG_CXX11
inline void log_login::set_user_ip(::std::string&& value) {
  
  user_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.log.login.user_ip)
}
#endif
inline void log_login::set_user_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.log.login.user_ip)
}
inline void log_login::set_user_ip(const char* value, size_t size) {
  
  user_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.log.login.user_ip)
}
inline ::std::string* log_login::mutable_user_ip() {
  
  // @@protoc_insertion_point(field_mutable:s2s.log.login.user_ip)
  return user_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log_login::release_user_ip() {
  // @@protoc_insertion_point(field_release:s2s.log.login.user_ip)
  
  return user_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log_login::set_allocated_user_ip(::std::string* user_ip) {
  if (user_ip != nullptr) {
    
  } else {
    
  }
  user_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_ip);
  // @@protoc_insertion_point(field_set_allocated:s2s.log.login.user_ip)
}

// int64 login_time = 3;
inline void log_login::clear_login_time() {
  login_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 log_login::login_time() const {
  // @@protoc_insertion_point(field_get:s2s.log.login.login_time)
  return login_time_;
}
inline void log_login::set_login_time(::google::protobuf::int64 value) {
  
  login_time_ = value;
  // @@protoc_insertion_point(field_set:s2s.log.login.login_time)
}

// string server_ip = 4;
inline void log_login::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log_login::server_ip() const {
  // @@protoc_insertion_point(field_get:s2s.log.login.server_ip)
  return server_ip_.GetNoArena();
}
inline void log_login::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.log.login.server_ip)
}
#if LANG_CXX11
inline void log_login::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.log.login.server_ip)
}
#endif
inline void log_login::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.log.login.server_ip)
}
inline void log_login::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.log.login.server_ip)
}
inline ::std::string* log_login::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:s2s.log.login.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log_login::release_server_ip() {
  // @@protoc_insertion_point(field_release:s2s.log.login.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log_login::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:s2s.log.login.server_ip)
}

// -------------------------------------------------------------------

// log_behavior

// int64 user_id = 1;
inline void log_behavior::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 log_behavior::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.log.behavior.user_id)
  return user_id_;
}
inline void log_behavior::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.log.behavior.user_id)
}

// int32 type = 2;
inline void log_behavior::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 log_behavior::type() const {
  // @@protoc_insertion_point(field_get:s2s.log.behavior.type)
  return type_;
}
inline void log_behavior::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:s2s.log.behavior.type)
}

// string address = 3;
inline void log_behavior::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& log_behavior::address() const {
  // @@protoc_insertion_point(field_get:s2s.log.behavior.address)
  return address_.GetNoArena();
}
inline void log_behavior::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.log.behavior.address)
}
#if LANG_CXX11
inline void log_behavior::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.log.behavior.address)
}
#endif
inline void log_behavior::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.log.behavior.address)
}
inline void log_behavior::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.log.behavior.address)
}
inline ::std::string* log_behavior::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.log.behavior.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log_behavior::release_address() {
  // @@protoc_insertion_point(field_release:s2s.log.behavior.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log_behavior::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.log.behavior.address)
}

// -------------------------------------------------------------------

// log

// -------------------------------------------------------------------

// allot_request

// string token = 1;
inline void allot_request::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_request::token() const {
  // @@protoc_insertion_point(field_get:s2s.allot.request.token)
  return token_.GetNoArena();
}
inline void allot_request::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.request.token)
}
#if LANG_CXX11
inline void allot_request::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.request.token)
}
#endif
inline void allot_request::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.request.token)
}
inline void allot_request::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.request.token)
}
inline ::std::string* allot_request::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.request.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_request::release_token() {
  // @@protoc_insertion_point(field_release:s2s.allot.request.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_request::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.request.token)
}

// int64 user_id = 2;
inline void allot_request::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 allot_request::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.allot.request.user_id)
  return user_id_;
}
inline void allot_request::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.allot.request.user_id)
}

// -------------------------------------------------------------------

// allot_save

// string service = 1;
inline void allot_save::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_save::service() const {
  // @@protoc_insertion_point(field_get:s2s.allot.save.service)
  return service_.GetNoArena();
}
inline void allot_save::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.save.service)
}
#if LANG_CXX11
inline void allot_save::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.save.service)
}
#endif
inline void allot_save::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.save.service)
}
inline void allot_save::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.save.service)
}
inline ::std::string* allot_save::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.save.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_save::release_service() {
  // @@protoc_insertion_point(field_release:s2s.allot.save.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_save::set_allocated_service(::std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.save.service)
}

// string address = 2;
inline void allot_save::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& allot_save::address() const {
  // @@protoc_insertion_point(field_get:s2s.allot.save.address)
  return address_.GetNoArena();
}
inline void allot_save::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.allot.save.address)
}
#if LANG_CXX11
inline void allot_save::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.allot.save.address)
}
#endif
inline void allot_save::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.allot.save.address)
}
inline void allot_save::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.allot.save.address)
}
inline ::std::string* allot_save::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:s2s.allot.save.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allot_save::release_address() {
  // @@protoc_insertion_point(field_release:s2s.allot.save.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allot_save::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:s2s.allot.save.address)
}

// -------------------------------------------------------------------

// allot

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// location_add

// int64 user_id = 1;
inline void location_add::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 location_add::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.location.add.user_id)
  return user_id_;
}
inline void location_add::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.location.add.user_id)
}

// map<string, string> services = 2;
inline int location_add::services_size() const {
  return services_.size();
}
inline void location_add::clear_services() {
  services_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
location_add::services() const {
  // @@protoc_insertion_point(field_map:s2s.location.add.services)
  return services_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
location_add::mutable_services() {
  // @@protoc_insertion_point(field_mutable_map:s2s.location.add.services)
  return services_.MutableMap();
}

// -------------------------------------------------------------------

// location_del

// int64 user_id = 1;
inline void location_del::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 location_del::user_id() const {
  // @@protoc_insertion_point(field_get:s2s.location.del.user_id)
  return user_id_;
}
inline void location_del::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:s2s.location.del.user_id)
}

// repeated string services = 2;
inline int location_del::services_size() const {
  return services_.size();
}
inline void location_del::clear_services() {
  services_.Clear();
}
inline const ::std::string& location_del::services(int index) const {
  // @@protoc_insertion_point(field_get:s2s.location.del.services)
  return services_.Get(index);
}
inline ::std::string* location_del::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.location.del.services)
  return services_.Mutable(index);
}
inline void location_del::set_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.location.del.services)
  services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void location_del::set_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.location.del.services)
  services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void location_del::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.location.del.services)
}
inline void location_del::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.location.del.services)
}
inline ::std::string* location_del::add_services() {
  // @@protoc_insertion_point(field_add_mutable:s2s.location.del.services)
  return services_.Add();
}
inline void location_del::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.location.del.services)
}
#if LANG_CXX11
inline void location_del::add_services(::std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.location.del.services)
}
#endif
inline void location_del::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.location.del.services)
}
inline void location_del::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.location.del.services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
location_del::services() const {
  // @@protoc_insertion_point(field_list:s2s.location.del.services)
  return services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
location_del::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:s2s.location.del.services)
  return &services_;
}

// -------------------------------------------------------------------

// location

// -------------------------------------------------------------------

// forward_sub

// repeated string channels = 1;
inline int forward_sub::channels_size() const {
  return channels_.size();
}
inline void forward_sub::clear_channels() {
  channels_.Clear();
}
inline const ::std::string& forward_sub::channels(int index) const {
  // @@protoc_insertion_point(field_get:s2s.forward.sub.channels)
  return channels_.Get(index);
}
inline ::std::string* forward_sub::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.forward.sub.channels)
  return channels_.Mutable(index);
}
inline void forward_sub::set_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.forward.sub.channels)
  channels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void forward_sub::set_channels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.forward.sub.channels)
  channels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void forward_sub::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.forward.sub.channels)
}
inline void forward_sub::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.forward.sub.channels)
}
inline ::std::string* forward_sub::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:s2s.forward.sub.channels)
  return channels_.Add();
}
inline void forward_sub::add_channels(const ::std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.forward.sub.channels)
}
#if LANG_CXX11
inline void forward_sub::add_channels(::std::string&& value) {
  channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.forward.sub.channels)
}
#endif
inline void forward_sub::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.forward.sub.channels)
}
inline void forward_sub::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.forward.sub.channels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
forward_sub::channels() const {
  // @@protoc_insertion_point(field_list:s2s.forward.sub.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
forward_sub::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:s2s.forward.sub.channels)
  return &channels_;
}

// -------------------------------------------------------------------

// forward_unsub

// repeated string channels = 1;
inline int forward_unsub::channels_size() const {
  return channels_.size();
}
inline void forward_unsub::clear_channels() {
  channels_.Clear();
}
inline const ::std::string& forward_unsub::channels(int index) const {
  // @@protoc_insertion_point(field_get:s2s.forward.unsub.channels)
  return channels_.Get(index);
}
inline ::std::string* forward_unsub::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:s2s.forward.unsub.channels)
  return channels_.Mutable(index);
}
inline void forward_unsub::set_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:s2s.forward.unsub.channels)
  channels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void forward_unsub::set_channels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:s2s.forward.unsub.channels)
  channels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void forward_unsub::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:s2s.forward.unsub.channels)
}
inline void forward_unsub::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:s2s.forward.unsub.channels)
}
inline ::std::string* forward_unsub::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:s2s.forward.unsub.channels)
  return channels_.Add();
}
inline void forward_unsub::add_channels(const ::std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:s2s.forward.unsub.channels)
}
#if LANG_CXX11
inline void forward_unsub::add_channels(::std::string&& value) {
  channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:s2s.forward.unsub.channels)
}
#endif
inline void forward_unsub::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:s2s.forward.unsub.channels)
}
inline void forward_unsub::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:s2s.forward.unsub.channels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
forward_unsub::channels() const {
  // @@protoc_insertion_point(field_list:s2s.forward.unsub.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
forward_unsub::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:s2s.forward.unsub.channels)
  return &channels_;
}

// -------------------------------------------------------------------

// forward_publish

// string channel = 1;
inline void forward_publish::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& forward_publish::channel() const {
  // @@protoc_insertion_point(field_get:s2s.forward.publish.channel)
  return channel_.GetNoArena();
}
inline void forward_publish::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.forward.publish.channel)
}
#if LANG_CXX11
inline void forward_publish::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.forward.publish.channel)
}
#endif
inline void forward_publish::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.forward.publish.channel)
}
inline void forward_publish::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.forward.publish.channel)
}
inline ::std::string* forward_publish::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:s2s.forward.publish.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* forward_publish::release_channel() {
  // @@protoc_insertion_point(field_release:s2s.forward.publish.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void forward_publish::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:s2s.forward.publish.channel)
}

// string message = 2;
inline void forward_publish::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& forward_publish::message() const {
  // @@protoc_insertion_point(field_get:s2s.forward.publish.message)
  return message_.GetNoArena();
}
inline void forward_publish::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s2s.forward.publish.message)
}
#if LANG_CXX11
inline void forward_publish::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:s2s.forward.publish.message)
}
#endif
inline void forward_publish::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s2s.forward.publish.message)
}
inline void forward_publish::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s2s.forward.publish.message)
}
inline ::std::string* forward_publish::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:s2s.forward.publish.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* forward_publish::release_message() {
  // @@protoc_insertion_point(field_release:s2s.forward.publish.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void forward_publish::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:s2s.forward.publish.message)
}

// -------------------------------------------------------------------

// forward

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2s

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_s2s_2fs2s_2eproto
