// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s/db.proto

#include "s2s/db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_s2s_2fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_mongo_updater_s2s_2fdb_2eproto;
namespace db {
class mongo_insertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_insert> _instance;
} _mongo_insert_default_instance_;
class mongo_find_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_request> _instance;
} _mongo_find_request_default_instance_;
class mongo_find_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_response> _instance;
} _mongo_find_response_default_instance_;
class mongo_findDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find> _instance;
} _mongo_find_default_instance_;
class mongo_find_one_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_one_request> _instance;
} _mongo_find_one_request_default_instance_;
class mongo_find_one_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_one_response> _instance;
} _mongo_find_one_response_default_instance_;
class mongo_find_oneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_one> _instance;
} _mongo_find_one_default_instance_;
class mongo_sum_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_sum_request> _instance;
} _mongo_sum_request_default_instance_;
class mongo_sum_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_sum_response> _instance;
} _mongo_sum_response_default_instance_;
class mongo_sumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_sum> _instance;
} _mongo_sum_default_instance_;
class mongo_count_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_count_request> _instance;
} _mongo_count_request_default_instance_;
class mongo_count_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_count_response> _instance;
} _mongo_count_response_default_instance_;
class mongo_countDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_count> _instance;
} _mongo_count_default_instance_;
class mongo_find_page_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_page_request> _instance;
} _mongo_find_page_request_default_instance_;
class mongo_find_page_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_page_response> _instance;
} _mongo_find_page_response_default_instance_;
class mongo_find_pageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_page> _instance;
} _mongo_find_page_default_instance_;
class mongo_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_remove> _instance;
} _mongo_remove_default_instance_;
class mongo_indexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_index> _instance;
} _mongo_index_default_instance_;
class mongo_updaterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_updater> _instance;
} _mongo_updater_default_instance_;
class mongo_updatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_updates> _instance;
} _mongo_updates_default_instance_;
class mongo_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_update> _instance;
} _mongo_update_default_instance_;
class mongo_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_response> _instance;
} _mongo_response_default_instance_;
class mongo_inc_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_inc_request> _instance;
} _mongo_inc_request_default_instance_;
class mongo_inc_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_inc_response> _instance;
} _mongo_inc_response_default_instance_;
class mongo_incDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_inc> _instance;
} _mongo_inc_default_instance_;
class mongo_find_modify_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_modify_request> _instance;
} _mongo_find_modify_request_default_instance_;
class mongo_find_modify_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_modify_response> _instance;
} _mongo_find_modify_response_default_instance_;
class mongo_find_modifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_modify> _instance;
} _mongo_find_modify_default_instance_;
class mongo_command_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command_request> _instance;
} _mongo_command_request_default_instance_;
class mongo_command_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command_response> _instance;
} _mongo_command_response_default_instance_;
class mongo_commandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command> _instance;
} _mongo_command_default_instance_;
class mongo_merge_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_merge_request> _instance;
} _mongo_merge_request_default_instance_;
class mongo_merge_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_merge_response> _instance;
} _mongo_merge_response_default_instance_;
class mongo_mergeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_merge> _instance;
} _mongo_merge_default_instance_;
class mongoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo> _instance;
} _mongo_default_instance_;
class mysql_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_create> _instance;
} _mysql_create_default_instance_;
class mysql_execDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_exec> _instance;
} _mysql_exec_default_instance_;
class mysql_addDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_add> _instance;
} _mysql_add_default_instance_;
class mysql_saveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_save> _instance;
} _mysql_save_default_instance_;
class mysql_queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_query> _instance;
} _mysql_query_default_instance_;
class mysql_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_remove> _instance;
} _mysql_remove_default_instance_;
class mysql_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_update> _instance;
} _mysql_update_default_instance_;
class mysql_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql_response> _instance;
} _mysql_response_default_instance_;
class mysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mysql> _instance;
} _mysql_default_instance_;
}  // namespace db
static void InitDefaultsmongo_insert_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_insert_default_instance_;
    new (ptr) ::db::mongo_insert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_insert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_insert_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_insert_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_request_default_instance_;
    new (ptr) ::db::mongo_find_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_response_default_instance_;
    new (ptr) ::db::mongo_find_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_default_instance_;
    new (ptr) ::db::mongo_find();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_one_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_one_request_default_instance_;
    new (ptr) ::db::mongo_find_one_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_one_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_one_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_one_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_one_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_one_response_default_instance_;
    new (ptr) ::db::mongo_find_one_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_one_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_one_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_one_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_one_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_one_default_instance_;
    new (ptr) ::db::mongo_find_one();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_one::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_one_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_one_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_sum_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_sum_request_default_instance_;
    new (ptr) ::db::mongo_sum_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_sum_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_sum_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_sum_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_sum_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_sum_response_default_instance_;
    new (ptr) ::db::mongo_sum_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_sum_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_sum_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_sum_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_sum_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_sum_default_instance_;
    new (ptr) ::db::mongo_sum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_sum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_sum_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_sum_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_count_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_count_request_default_instance_;
    new (ptr) ::db::mongo_count_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_count_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_count_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_count_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_count_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_count_response_default_instance_;
    new (ptr) ::db::mongo_count_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_count_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_count_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_count_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_count_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_count_default_instance_;
    new (ptr) ::db::mongo_count();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_count::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_count_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_count_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_page_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_page_request_default_instance_;
    new (ptr) ::db::mongo_find_page_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_page_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_page_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_page_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_page_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_page_response_default_instance_;
    new (ptr) ::db::mongo_find_page_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_page_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_page_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_page_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_page_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_page_default_instance_;
    new (ptr) ::db::mongo_find_page();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_page::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_page_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_page_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_remove_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_remove_default_instance_;
    new (ptr) ::db::mongo_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_remove_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_remove_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_index_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_index_default_instance_;
    new (ptr) ::db::mongo_index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_index::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_index_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_index_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_updater_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_updater_default_instance_;
    new (ptr) ::db::mongo_updater();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_updater::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_updater_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_updater_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_updates_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_updates_default_instance_;
    new (ptr) ::db::mongo_updates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_updates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mongo_updates_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmongo_updates_s2s_2fdb_2eproto}, {
      &scc_info_mongo_updater_s2s_2fdb_2eproto.base,}};

static void InitDefaultsmongo_update_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_update_default_instance_;
    new (ptr) ::db::mongo_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mongo_update_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmongo_update_s2s_2fdb_2eproto}, {
      &scc_info_mongo_updater_s2s_2fdb_2eproto.base,}};

static void InitDefaultsmongo_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_response_default_instance_;
    new (ptr) ::db::mongo_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_inc_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_inc_request_default_instance_;
    new (ptr) ::db::mongo_inc_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_inc_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_inc_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_inc_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_inc_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_inc_response_default_instance_;
    new (ptr) ::db::mongo_inc_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_inc_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_inc_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_inc_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_inc_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_inc_default_instance_;
    new (ptr) ::db::mongo_inc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_inc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_inc_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_inc_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_modify_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_modify_request_default_instance_;
    new (ptr) ::db::mongo_find_modify_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_modify_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_modify_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_modify_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_modify_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_modify_response_default_instance_;
    new (ptr) ::db::mongo_find_modify_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_modify_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_modify_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_modify_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_modify_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_modify_default_instance_;
    new (ptr) ::db::mongo_find_modify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_modify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_modify_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_modify_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_command_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_request_default_instance_;
    new (ptr) ::db::mongo_command_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_command_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_response_default_instance_;
    new (ptr) ::db::mongo_command_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_command_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_default_instance_;
    new (ptr) ::db::mongo_command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_merge_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_merge_request_default_instance_;
    new (ptr) ::db::mongo_merge_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_merge_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_merge_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_merge_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_merge_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_merge_response_default_instance_;
    new (ptr) ::db::mongo_merge_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_merge_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_merge_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_merge_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_merge_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_merge_default_instance_;
    new (ptr) ::db::mongo_merge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_merge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_merge_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_merge_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_default_instance_;
    new (ptr) ::db::mongo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_create_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_create_default_instance_;
    new (ptr) ::db::mysql_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_create_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_create_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_exec_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_exec_default_instance_;
    new (ptr) ::db::mysql_exec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_exec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_exec_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_exec_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_add_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_add_default_instance_;
    new (ptr) ::db::mysql_add();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_add::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_add_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_add_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_save_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_save_default_instance_;
    new (ptr) ::db::mysql_save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_save_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_save_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_query_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_query_default_instance_;
    new (ptr) ::db::mysql_query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_query_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_query_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_remove_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_remove_default_instance_;
    new (ptr) ::db::mysql_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_remove_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_remove_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_update_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_update_default_instance_;
    new (ptr) ::db::mysql_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_update_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_update_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_response_default_instance_;
    new (ptr) ::db::mysql_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmysql_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mysql_default_instance_;
    new (ptr) ::db::mysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mysql::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mysql_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmysql_s2s_2fdb_2eproto}, {}};

void InitDefaults_s2s_2fdb_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_insert_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_one_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_one_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_one_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_sum_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_sum_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_sum_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_count_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_count_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_count_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_page_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_page_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_page_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_remove_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_index_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_updater_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_updates_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_update_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_inc_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_inc_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_inc_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_modify_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_modify_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_modify_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_merge_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_merge_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_merge_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_create_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_exec_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_add_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_save_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_query_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_remove_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_update_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mysql_s2s_2fdb_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2fdb_2eproto[44];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2fdb_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2fdb_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2fdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, json_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, limit_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, where_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_response, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_request, by_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_request, field_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_request, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum_response, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_sum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_request, where_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, where_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, page_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, count_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, sort_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page_response, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, json_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, key_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, sort_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, unique_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, tag_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, document_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, tag_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, upsert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_request, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, query_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, update_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_response, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, cmd_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_response, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, field_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, source_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_response, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_create, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_exec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_exec, sql_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_exec, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_add, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_save, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, limit_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, where_json_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_query, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_remove, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, flag_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, table_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, update_json_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_update, where_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mysql_response, error_),
  PROTOBUF_FIELD_OFFSET(::db::mysql_response, jsons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db::mongo_insert)},
  { 7, -1, sizeof(::db::mongo_find_request)},
  { 16, -1, sizeof(::db::mongo_find_response)},
  { 22, -1, sizeof(::db::mongo_find)},
  { 27, -1, sizeof(::db::mongo_find_one_request)},
  { 35, -1, sizeof(::db::mongo_find_one_response)},
  { 41, -1, sizeof(::db::mongo_find_one)},
  { 46, -1, sizeof(::db::mongo_sum_request)},
  { 55, -1, sizeof(::db::mongo_sum_response)},
  { 61, -1, sizeof(::db::mongo_sum)},
  { 66, -1, sizeof(::db::mongo_count_request)},
  { 73, -1, sizeof(::db::mongo_count_response)},
  { 79, -1, sizeof(::db::mongo_count)},
  { 84, -1, sizeof(::db::mongo_find_page_request)},
  { 95, -1, sizeof(::db::mongo_find_page_response)},
  { 101, -1, sizeof(::db::mongo_find_page)},
  { 106, -1, sizeof(::db::mongo_remove)},
  { 114, -1, sizeof(::db::mongo_index)},
  { 123, -1, sizeof(::db::mongo_updater)},
  { 130, -1, sizeof(::db::mongo_updates)},
  { 138, -1, sizeof(::db::mongo_update)},
  { 147, -1, sizeof(::db::mongo_response)},
  { 153, -1, sizeof(::db::mongo_inc_request)},
  { 159, -1, sizeof(::db::mongo_inc_response)},
  { 165, -1, sizeof(::db::mongo_inc)},
  { 170, -1, sizeof(::db::mongo_find_modify_request)},
  { 179, -1, sizeof(::db::mongo_find_modify_response)},
  { 185, -1, sizeof(::db::mongo_find_modify)},
  { 190, -1, sizeof(::db::mongo_command_request)},
  { 198, -1, sizeof(::db::mongo_command_response)},
  { 204, -1, sizeof(::db::mongo_command)},
  { 209, -1, sizeof(::db::mongo_merge_request)},
  { 217, -1, sizeof(::db::mongo_merge_response)},
  { 223, -1, sizeof(::db::mongo_merge)},
  { 228, -1, sizeof(::db::mongo)},
  { 233, -1, sizeof(::db::mysql_create)},
  { 240, -1, sizeof(::db::mysql_exec)},
  { 247, -1, sizeof(::db::mysql_add)},
  { 255, -1, sizeof(::db::mysql_save)},
  { 263, -1, sizeof(::db::mysql_query)},
  { 272, -1, sizeof(::db::mysql_remove)},
  { 280, -1, sizeof(::db::mysql_update)},
  { 289, -1, sizeof(::db::mysql_response)},
  { 296, -1, sizeof(::db::mysql)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_insert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_one_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_one_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_one_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_sum_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_sum_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_sum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_count_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_count_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_count_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_page_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_page_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_page_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_updater_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_updates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_inc_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_inc_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_inc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_modify_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_modify_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_modify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_merge_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_merge_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_merge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_exec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mysql_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2fdb_2eproto = {
  {}, AddDescriptors_s2s_2fdb_2eproto, "s2s/db.proto", schemas,
  file_default_instances, TableStruct_s2s_2fdb_2eproto::offsets,
  file_level_metadata_s2s_2fdb_2eproto, 44, file_level_enum_descriptors_s2s_2fdb_2eproto, file_level_service_descriptors_s2s_2fdb_2eproto,
};

const char descriptor_table_protodef_s2s_2fdb_2eproto[] =
  "\n\014s2s/db.proto\022\002db\"\352\t\n\005mongo\032$\n\006insert\022\013"
  "\n\003tab\030\001 \001(\t\022\r\n\005jsons\030\002 \003(\t\032f\n\004find\032C\n\007re"
  "quest\022\013\n\003tab\030\001 \001(\t\022\014\n\004json\030\002 \001(\t\022\r\n\005limi"
  "t\030\003 \001(\005\022\016\n\006fields\030\004 \003(\t\032\031\n\010response\022\r\n\005j"
  "sons\030\001 \003(\014\032[\n\010find_one\0325\n\007request\022\013\n\003tab"
  "\030\001 \001(\t\022\r\n\005where\030\002 \001(\t\022\016\n\006fields\030\003 \003(\t\032\030\n"
  "\010response\022\014\n\004json\030\001 \001(\t\032b\n\003sum\032A\n\007reques"
  "t\022\013\n\003tab\030\001 \001(\t\022\n\n\002by\030\002 \001(\t\022\r\n\005field\030\003 \001("
  "\t\022\016\n\006filter\030\004 \001(\t\032\030\n\010response\022\014\n\004json\030\001 "
  "\003(\t\032I\n\005count\032%\n\007request\022\013\n\003tab\030\001 \001(\t\022\r\n\005"
  "where\030\002 \001(\t\032\031\n\010response\022\r\n\005count\030\001 \001(\005\032\207"
  "\001\n\tfind_page\032`\n\007request\022\013\n\003tab\030\001 \001(\t\022\r\n\005"
  "where\030\002 \001(\t\022\014\n\004page\030\003 \001(\005\022\r\n\005count\030\004 \001(\005"
  "\022\014\n\004sort\030\006 \001(\t\022\016\n\006fields\030\005 \003(\t\032\030\n\010respon"
  "se\022\014\n\004json\030\002 \003(\014\0322\n\006remove\022\013\n\003tab\030\001 \001(\t\022"
  "\014\n\004json\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\032\?\n\005index\022\013\n"
  "\003tab\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\014\n\004sort\030\003 \001(\005\022\016\n"
  "\006unique\030\004 \001(\010\032+\n\007updater\022\016\n\006filter\030\001 \001(\t"
  "\022\020\n\010document\030\002 \001(\t\032H\n\007updates\022\013\n\003tab\030\001 \001"
  "(\t\022\013\n\003tag\030\003 \001(\t\022#\n\010document\030\002 \003(\0132\021.db.m"
  "ongo.updater\032W\n\006update\022\013\n\003tab\030\001 \001(\t\022#\n\010d"
  "ocument\030\002 \001(\0132\021.db.mongo.updater\022\013\n\003tag\030"
  "\003 \001(\t\022\016\n\006upsert\030\004 \001(\010\032\031\n\010response\022\r\n\005cou"
  "nt\030\001 \001(\005\0328\n\003inc\032\026\n\007request\022\013\n\003key\030\001 \001(\t\032"
  "\031\n\010response\022\r\n\005value\030\001 \001(\005\032n\n\013find_modif"
  "y\032E\n\007request\022\013\n\003tab\030\001 \001(\t\022\r\n\005query\030\002 \001(\t"
  "\022\016\n\006update\030\003 \001(\t\022\016\n\006fields\030\004 \003(\t\032\030\n\010resp"
  "onse\022\014\n\004json\030\001 \001(\t\032V\n\007command\0321\n\007request"
  "\022\013\n\003tab\030\001 \001(\t\022\013\n\003cmd\030\002 \001(\t\022\014\n\004json\030\003 \001(\t"
  "\032\030\n\010response\022\014\n\004json\030\001 \001(\t\032[\n\005merge\0328\n\007r"
  "equest\022\r\n\005field\030\001 \001(\t\022\016\n\006source\030\002 \001(\t\022\016\n"
  "\006target\030\003 \001(\t\032\030\n\010response\022\014\n\004uuid\030\001 \001(\t\""
  "\267\003\n\005mysql\032%\n\006create\022\r\n\005table\030\001 \001(\t\022\014\n\004ke"
  "ys\030\002 \003(\t\032\"\n\004exec\022\013\n\003sql\030\001 \001(\t\022\r\n\005query\030\002"
  " \001(\010\0320\n\003add\022\014\n\004flag\030\001 \001(\005\022\r\n\005table\030\002 \001(\t"
  "\022\014\n\004data\030\003 \001(\t\0321\n\004save\022\014\n\004flag\030\001 \001(\005\022\r\n\005"
  "table\030\002 \001(\t\022\014\n\004data\030\003 \001(\t\032I\n\005query\022\r\n\005ta"
  "ble\030\001 \001(\t\022\r\n\005limit\030\002 \001(\005\022\022\n\nwhere_json\030\003"
  " \001(\t\022\016\n\006fields\030\004 \003(\t\0329\n\006remove\022\014\n\004flag\030\001"
  " \001(\005\022\r\n\005table\030\002 \001(\t\022\022\n\nwhere_json\030\003 \001(\t\032"
  "N\n\006update\022\014\n\004flag\030\001 \001(\005\022\r\n\005table\030\002 \001(\t\022\023"
  "\n\013update_json\030\003 \001(\t\022\022\n\nwhere_json\030\004 \001(\t\032"
  "(\n\010response\022\r\n\005error\030\001 \001(\t\022\r\n\005jsons\030\002 \003("
  "\014b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2fdb_2eproto = {
  false, InitDefaults_s2s_2fdb_2eproto, 
  descriptor_table_protodef_s2s_2fdb_2eproto,
  "s2s/db.proto", &assign_descriptors_table_s2s_2fdb_2eproto, 1729,
};

void AddDescriptors_s2s_2fdb_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2fdb_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2fdb_2eproto = []() { AddDescriptors_s2s_2fdb_2eproto(); return true; }();
namespace db {

// ===================================================================

void mongo_insert::InitAsDefaultInstance() {
}
class mongo_insert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_insert::kTabFieldNumber;
const int mongo_insert::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_insert::mongo_insert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.insert)
}
mongo_insert::mongo_insert(const mongo_insert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.insert)
}

void mongo_insert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_insert_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_insert::~mongo_insert() {
  // @@protoc_insertion_point(destructor:db.mongo.insert)
  SharedDtor();
}

void mongo_insert::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_insert& mongo_insert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_insert_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_insert::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_insert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_insert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.insert.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string jsons = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.insert.jsons");
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.insert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.insert.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string jsons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jsons()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsons(this->jsons_size() - 1).data(),
            static_cast<int>(this->jsons(this->jsons_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.insert.jsons"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.insert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.insert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // repeated string jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.jsons");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.insert)
}

::google::protobuf::uint8* mongo_insert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // repeated string jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsons(i).data(), static_cast<int>(this->jsons(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.jsons");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.insert)
  return target;
}

size_t mongo_insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.insert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jsons = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jsons(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_insert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_insert* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.insert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.insert)
    MergeFrom(*source);
  }
}

void mongo_insert::MergeFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
}

void mongo_insert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_insert::CopyFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_insert::IsInitialized() const {
  return true;
}

void mongo_insert::Swap(mongo_insert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_insert::InternalSwap(mongo_insert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_insert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_request::InitAsDefaultInstance() {
}
class mongo_find_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_request::kTabFieldNumber;
const int mongo_find_request::kJsonFieldNumber;
const int mongo_find_request::kLimitFieldNumber;
const int mongo_find_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_request::mongo_find_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.request)
}
mongo_find_request::mongo_find_request(const mongo_find_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.request)
}

void mongo_find_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_find_request::~mongo_find_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find.request)
  SharedDtor();
}

void mongo_find_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_request& mongo_find_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.request.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.request.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.request)
}

::google::protobuf::uint8* mongo_find_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.request)
  return target;
}

size_t mongo_find_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.request)
    MergeFrom(*source);
  }
}

void mongo_find_request::MergeFrom(const mongo_find_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_find_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_request::CopyFrom(const mongo_find_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_request::IsInitialized() const {
  return true;
}

void mongo_find_request::Swap(mongo_find_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_request::InternalSwap(mongo_find_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_find_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_response::InitAsDefaultInstance() {
}
class mongo_find_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_response::mongo_find_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.response)
}
mongo_find_response::mongo_find_response(const mongo_find_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.response)
}

void mongo_find_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_response_s2s_2fdb_2eproto.base);
}

mongo_find_response::~mongo_find_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find.response)
  SharedDtor();
}

void mongo_find_response::SharedDtor() {
}

void mongo_find_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_response& mongo_find_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes jsons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes jsons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_jsons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.response)
}

::google::protobuf::uint8* mongo_find_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes jsons = 1;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.response)
  return target;
}

size_t mongo_find_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes jsons = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->jsons(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.response)
    MergeFrom(*source);
  }
}

void mongo_find_response::MergeFrom(const mongo_find_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
}

void mongo_find_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_response::CopyFrom(const mongo_find_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_response::IsInitialized() const {
  return true;
}

void mongo_find_response::Swap(mongo_find_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_response::InternalSwap(mongo_find_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
}

::google::protobuf::Metadata mongo_find_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find::InitAsDefaultInstance() {
}
class mongo_find::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find::mongo_find()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find)
}
mongo_find::mongo_find(const mongo_find& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find)
}

void mongo_find::SharedCtor() {
}

mongo_find::~mongo_find() {
  // @@protoc_insertion_point(destructor:db.mongo.find)
  SharedDtor();
}

void mongo_find::SharedDtor() {
}

void mongo_find::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find& mongo_find::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find)
}

::google::protobuf::uint8* mongo_find::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find)
  return target;
}

size_t mongo_find::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find)
    MergeFrom(*source);
  }
}

void mongo_find::MergeFrom(const mongo_find& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find::CopyFrom(const mongo_find& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find::IsInitialized() const {
  return true;
}

void mongo_find::Swap(mongo_find* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find::InternalSwap(mongo_find* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_one_request::InitAsDefaultInstance() {
}
class mongo_find_one_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_one_request::kTabFieldNumber;
const int mongo_find_one_request::kWhereFieldNumber;
const int mongo_find_one_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_one_request::mongo_find_one_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_one.request)
}
mongo_find_one_request::mongo_find_one_request(const mongo_find_one_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  where_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where().size() > 0) {
    where_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_one.request)
}

void mongo_find_one_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_one_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_one_request::~mongo_find_one_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find_one.request)
  SharedDtor();
}

void mongo_find_one_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_one_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_one_request& mongo_find_one_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_one_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_one_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_one.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_one_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_one_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_one.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_one.request.where");
        object = msg->mutable_where();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find_one.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_one_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_one.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where().data(), static_cast<int>(this->where().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.request.where"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_one.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_one.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_one_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_one.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string where = 2;
  if (this->where().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where().data(), static_cast<int>(this->where().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.where");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->where(), output);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_one.request)
}

::google::protobuf::uint8* mongo_find_one_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_one.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string where = 2;
  if (this->where().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where().data(), static_cast<int>(this->where().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.where");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->where(), target);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_one.request)
  return target;
}

size_t mongo_find_one_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_one.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string where = 2;
  if (this->where().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_one_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_one.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_one_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_one_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_one.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_one.request)
    MergeFrom(*source);
  }
}

void mongo_find_one_request::MergeFrom(const mongo_find_one_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_one.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.where().size() > 0) {

    where_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
}

void mongo_find_one_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_one.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_one_request::CopyFrom(const mongo_find_one_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_one.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_one_request::IsInitialized() const {
  return true;
}

void mongo_find_one_request::Swap(mongo_find_one_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_one_request::InternalSwap(mongo_find_one_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_.Swap(&other->where_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_one_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_one_response::InitAsDefaultInstance() {
}
class mongo_find_one_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_one_response::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_one_response::mongo_find_one_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_one.response)
}
mongo_find_one_response::mongo_find_one_response(const mongo_find_one_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_one.response)
}

void mongo_find_one_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_one_response_s2s_2fdb_2eproto.base);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_one_response::~mongo_find_one_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find_one.response)
  SharedDtor();
}

void mongo_find_one_response::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_one_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_one_response& mongo_find_one_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_one_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_one_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_one.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_one_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_one_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string json = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_one.response.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_one_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_one.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.response.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_one.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_one.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_one_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_one.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.response.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_one.response)
}

::google::protobuf::uint8* mongo_find_one_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_one.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.response.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_one.response)
  return target;
}

size_t mongo_find_one_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_one.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_one_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_one.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_one_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_one_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_one.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_one.response)
    MergeFrom(*source);
  }
}

void mongo_find_one_response::MergeFrom(const mongo_find_one_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_one.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void mongo_find_one_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_one.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_one_response::CopyFrom(const mongo_find_one_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_one.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_one_response::IsInitialized() const {
  return true;
}

void mongo_find_one_response::Swap(mongo_find_one_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_one_response::InternalSwap(mongo_find_one_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_one_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_one::InitAsDefaultInstance() {
}
class mongo_find_one::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_one::mongo_find_one()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_one)
}
mongo_find_one::mongo_find_one(const mongo_find_one& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_one)
}

void mongo_find_one::SharedCtor() {
}

mongo_find_one::~mongo_find_one() {
  // @@protoc_insertion_point(destructor:db.mongo.find_one)
  SharedDtor();
}

void mongo_find_one::SharedDtor() {
}

void mongo_find_one::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_one& mongo_find_one::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_one_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_one::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_one)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_one::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_one*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_one::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_one)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_one)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_one)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_one::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_one)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_one)
}

::google::protobuf::uint8* mongo_find_one::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_one)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_one)
  return target;
}

size_t mongo_find_one::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_one)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_one::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_one)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_one* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_one>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_one)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_one)
    MergeFrom(*source);
  }
}

void mongo_find_one::MergeFrom(const mongo_find_one& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_one)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find_one::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_one)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_one::CopyFrom(const mongo_find_one& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_one)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_one::IsInitialized() const {
  return true;
}

void mongo_find_one::Swap(mongo_find_one* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_one::InternalSwap(mongo_find_one* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find_one::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_sum_request::InitAsDefaultInstance() {
}
class mongo_sum_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_sum_request::kTabFieldNumber;
const int mongo_sum_request::kByFieldNumber;
const int mongo_sum_request::kFieldFieldNumber;
const int mongo_sum_request::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_sum_request::mongo_sum_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.sum.request)
}
mongo_sum_request::mongo_sum_request(const mongo_sum_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.by().size() > 0) {
    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.sum.request)
}

void mongo_sum_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_sum_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_sum_request::~mongo_sum_request() {
  // @@protoc_insertion_point(destructor:db.mongo.sum.request)
  SharedDtor();
}

void mongo_sum_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_sum_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_sum_request& mongo_sum_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_sum_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_sum_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.sum.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_sum_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_sum_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.sum.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string by = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.sum.request.by");
        object = msg->mutable_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string field = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.sum.request.field");
        object = msg->mutable_field();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.sum.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_sum_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.sum.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.sum.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string by = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->by().data(), static_cast<int>(this->by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.sum.request.by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.sum.request.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.sum.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.sum.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.sum.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_sum_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.sum.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string by = 2;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->by(), output);
  }

  // string field = 3;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->field(), output);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.sum.request)
}

::google::protobuf::uint8* mongo_sum_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.sum.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string by = 2;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->by(), target);
  }

  // string field = 3;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->field(), target);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.sum.request)
  return target;
}

size_t mongo_sum_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.sum.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string by = 2;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // string field = 3;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_sum_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.sum.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_sum_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_sum_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.sum.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.sum.request)
    MergeFrom(*source);
  }
}

void mongo_sum_request::MergeFrom(const mongo_sum_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.sum.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.by().size() > 0) {

    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void mongo_sum_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.sum.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_sum_request::CopyFrom(const mongo_sum_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.sum.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_sum_request::IsInitialized() const {
  return true;
}

void mongo_sum_request::Swap(mongo_sum_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_sum_request::InternalSwap(mongo_sum_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  by_.Swap(&other->by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_.Swap(&other->field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_sum_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_sum_response::InitAsDefaultInstance() {
}
class mongo_sum_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_sum_response::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_sum_response::mongo_sum_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.sum.response)
}
mongo_sum_response::mongo_sum_response(const mongo_sum_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      json_(from.json_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.sum.response)
}

void mongo_sum_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_sum_response_s2s_2fdb_2eproto.base);
}

mongo_sum_response::~mongo_sum_response() {
  // @@protoc_insertion_point(destructor:db.mongo.sum.response)
  SharedDtor();
}

void mongo_sum_response::SharedDtor() {
}

void mongo_sum_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_sum_response& mongo_sum_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_sum_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_sum_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.sum.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_sum_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_sum_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string json = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.sum.response.json");
          object = msg->add_json();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_sum_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.sum.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json(this->json_size() - 1).data(),
            static_cast<int>(this->json(this->json_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.sum.response.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.sum.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.sum.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_sum_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.sum.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string json = 1;
  for (int i = 0, n = this->json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json(i).data(), static_cast<int>(this->json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.response.json");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->json(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.sum.response)
}

::google::protobuf::uint8* mongo_sum_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.sum.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string json = 1;
  for (int i = 0, n = this->json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json(i).data(), static_cast<int>(this->json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.sum.response.json");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->json(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.sum.response)
  return target;
}

size_t mongo_sum_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.sum.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string json = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->json_size());
  for (int i = 0, n = this->json_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->json(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_sum_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.sum.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_sum_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_sum_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.sum.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.sum.response)
    MergeFrom(*source);
  }
}

void mongo_sum_response::MergeFrom(const mongo_sum_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.sum.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  json_.MergeFrom(from.json_);
}

void mongo_sum_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.sum.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_sum_response::CopyFrom(const mongo_sum_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.sum.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_sum_response::IsInitialized() const {
  return true;
}

void mongo_sum_response::Swap(mongo_sum_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_sum_response::InternalSwap(mongo_sum_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_.InternalSwap(CastToBase(&other->json_));
}

::google::protobuf::Metadata mongo_sum_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_sum::InitAsDefaultInstance() {
}
class mongo_sum::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_sum::mongo_sum()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.sum)
}
mongo_sum::mongo_sum(const mongo_sum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.sum)
}

void mongo_sum::SharedCtor() {
}

mongo_sum::~mongo_sum() {
  // @@protoc_insertion_point(destructor:db.mongo.sum)
  SharedDtor();
}

void mongo_sum::SharedDtor() {
}

void mongo_sum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_sum& mongo_sum::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_sum_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_sum::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.sum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_sum::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_sum*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_sum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.sum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.sum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.sum)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_sum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.sum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.sum)
}

::google::protobuf::uint8* mongo_sum::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.sum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.sum)
  return target;
}

size_t mongo_sum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.sum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_sum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.sum)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_sum* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_sum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.sum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.sum)
    MergeFrom(*source);
  }
}

void mongo_sum::MergeFrom(const mongo_sum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.sum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_sum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_sum::CopyFrom(const mongo_sum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_sum::IsInitialized() const {
  return true;
}

void mongo_sum::Swap(mongo_sum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_sum::InternalSwap(mongo_sum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_sum::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_count_request::InitAsDefaultInstance() {
}
class mongo_count_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_count_request::kTabFieldNumber;
const int mongo_count_request::kWhereFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_count_request::mongo_count_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.count.request)
}
mongo_count_request::mongo_count_request(const mongo_count_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  where_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where().size() > 0) {
    where_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.count.request)
}

void mongo_count_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_count_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_count_request::~mongo_count_request() {
  // @@protoc_insertion_point(destructor:db.mongo.count.request)
  SharedDtor();
}

void mongo_count_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_count_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_count_request& mongo_count_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_count_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_count_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.count.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_count_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_count_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.count.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.count.request.where");
        object = msg->mutable_where();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_count_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.count.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.count.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where().data(), static_cast<int>(this->where().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.count.request.where"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.count.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.count.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_count_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.count.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string where = 2;
  if (this->where().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where().data(), static_cast<int>(this->where().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.where");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->where(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.count.request)
}

::google::protobuf::uint8* mongo_count_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.count.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string where = 2;
  if (this->where().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where().data(), static_cast<int>(this->where().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.where");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->where(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.count.request)
  return target;
}

size_t mongo_count_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.count.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string where = 2;
  if (this->where().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_count_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.count.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_count_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_count_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.count.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.count.request)
    MergeFrom(*source);
  }
}

void mongo_count_request::MergeFrom(const mongo_count_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.count.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.where().size() > 0) {

    where_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
}

void mongo_count_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.count.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_count_request::CopyFrom(const mongo_count_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.count.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_count_request::IsInitialized() const {
  return true;
}

void mongo_count_request::Swap(mongo_count_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_count_request::InternalSwap(mongo_count_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_.Swap(&other->where_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_count_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_count_response::InitAsDefaultInstance() {
}
class mongo_count_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_count_response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_count_response::mongo_count_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.count.response)
}
mongo_count_response::mongo_count_response(const mongo_count_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.count.response)
}

void mongo_count_response::SharedCtor() {
  count_ = 0;
}

mongo_count_response::~mongo_count_response() {
  // @@protoc_insertion_point(destructor:db.mongo.count.response)
  SharedDtor();
}

void mongo_count_response::SharedDtor() {
}

void mongo_count_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_count_response& mongo_count_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_count_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_count_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.count.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_count_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_count_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_count_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.count.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.count.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.count.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_count_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.count.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.count.response)
}

::google::protobuf::uint8* mongo_count_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.count.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.count.response)
  return target;
}

size_t mongo_count_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.count.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_count_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.count.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_count_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_count_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.count.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.count.response)
    MergeFrom(*source);
  }
}

void mongo_count_response::MergeFrom(const mongo_count_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.count.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void mongo_count_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.count.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_count_response::CopyFrom(const mongo_count_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.count.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_count_response::IsInitialized() const {
  return true;
}

void mongo_count_response::Swap(mongo_count_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_count_response::InternalSwap(mongo_count_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata mongo_count_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_count::InitAsDefaultInstance() {
}
class mongo_count::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_count::mongo_count()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.count)
}
mongo_count::mongo_count(const mongo_count& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.count)
}

void mongo_count::SharedCtor() {
}

mongo_count::~mongo_count() {
  // @@protoc_insertion_point(destructor:db.mongo.count)
  SharedDtor();
}

void mongo_count::SharedDtor() {
}

void mongo_count::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_count& mongo_count::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_count_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_count::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_count::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_count*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.count)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.count)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.count)
}

::google::protobuf::uint8* mongo_count::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.count)
  return target;
}

size_t mongo_count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.count)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_count::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.count)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_count* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_count>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.count)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.count)
    MergeFrom(*source);
  }
}

void mongo_count::MergeFrom(const mongo_count& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.count)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_count::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_count::CopyFrom(const mongo_count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_count::IsInitialized() const {
  return true;
}

void mongo_count::Swap(mongo_count* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_count::InternalSwap(mongo_count* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_count::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_page_request::InitAsDefaultInstance() {
}
class mongo_find_page_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_page_request::kTabFieldNumber;
const int mongo_find_page_request::kWhereFieldNumber;
const int mongo_find_page_request::kPageFieldNumber;
const int mongo_find_page_request::kCountFieldNumber;
const int mongo_find_page_request::kSortFieldNumber;
const int mongo_find_page_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_page_request::mongo_find_page_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_page.request)
}
mongo_find_page_request::mongo_find_page_request(const mongo_find_page_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  where_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where().size() > 0) {
    where_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  sort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sort().size() > 0) {
    sort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_);
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&page_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_page.request)
}

void mongo_find_page_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_page_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_)) + sizeof(count_));
}

mongo_find_page_request::~mongo_find_page_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find_page.request)
  SharedDtor();
}

void mongo_find_page_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_page_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_page_request& mongo_find_page_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_page_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_page_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_page.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_page_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_page_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_page.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_page.request.where");
        object = msg->mutable_where();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string fields = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find_page.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // string sort = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_page.request.sort");
        object = msg->mutable_sort();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_page_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_page.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_page.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where().data(), static_cast<int>(this->where().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_page.request.where"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_page.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sort = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sort().data(), static_cast<int>(this->sort().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_page.request.sort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_page.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_page.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_page_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_page.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string where = 2;
  if (this->where().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where().data(), static_cast<int>(this->where().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.where");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->where(), output);
  }

  // int32 page = 3;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // repeated string fields = 5;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fields(i), output);
  }

  // string sort = 6;
  if (this->sort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sort().data(), static_cast<int>(this->sort().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.sort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sort(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_page.request)
}

::google::protobuf::uint8* mongo_find_page_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_page.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string where = 2;
  if (this->where().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where().data(), static_cast<int>(this->where().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.where");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->where(), target);
  }

  // int32 page = 3;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // repeated string fields = 5;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->fields(i), target);
  }

  // string sort = 6;
  if (this->sort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sort().data(), static_cast<int>(this->sort().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_page.request.sort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sort(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_page.request)
  return target;
}

size_t mongo_find_page_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_page.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string where = 2;
  if (this->where().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where());
  }

  // string sort = 6;
  if (this->sort().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sort());
  }

  // int32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page());
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_page_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_page.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_page_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_page_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_page.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_page.request)
    MergeFrom(*source);
  }
}

void mongo_find_page_request::MergeFrom(const mongo_find_page_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_page.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.where().size() > 0) {

    where_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  if (from.sort().size() > 0) {

    sort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_);
  }
  if (from.page() != 0) {
    set_page(from.page());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void mongo_find_page_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_page.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_page_request::CopyFrom(const mongo_find_page_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_page.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_page_request::IsInitialized() const {
  return true;
}

void mongo_find_page_request::Swap(mongo_find_page_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_page_request::InternalSwap(mongo_find_page_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_.Swap(&other->where_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sort_.Swap(&other->sort_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_, other->page_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata mongo_find_page_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_page_response::InitAsDefaultInstance() {
}
class mongo_find_page_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_page_response::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_page_response::mongo_find_page_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_page.response)
}
mongo_find_page_response::mongo_find_page_response(const mongo_find_page_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      json_(from.json_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_page.response)
}

void mongo_find_page_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_page_response_s2s_2fdb_2eproto.base);
}

mongo_find_page_response::~mongo_find_page_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find_page.response)
  SharedDtor();
}

void mongo_find_page_response::SharedDtor() {
}

void mongo_find_page_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_page_response& mongo_find_page_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_page_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_page_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_page.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_page_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_page_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_json();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_page_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_page.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_json()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_page.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_page.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_page_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_page.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes json = 2;
  for (int i = 0, n = this->json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->json(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_page.response)
}

::google::protobuf::uint8* mongo_find_page_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_page.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes json = 2;
  for (int i = 0, n = this->json_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->json(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_page.response)
  return target;
}

size_t mongo_find_page_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_page.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes json = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->json_size());
  for (int i = 0, n = this->json_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->json(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_page_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_page.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_page_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_page_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_page.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_page.response)
    MergeFrom(*source);
  }
}

void mongo_find_page_response::MergeFrom(const mongo_find_page_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_page.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  json_.MergeFrom(from.json_);
}

void mongo_find_page_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_page.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_page_response::CopyFrom(const mongo_find_page_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_page.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_page_response::IsInitialized() const {
  return true;
}

void mongo_find_page_response::Swap(mongo_find_page_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_page_response::InternalSwap(mongo_find_page_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_.InternalSwap(CastToBase(&other->json_));
}

::google::protobuf::Metadata mongo_find_page_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_page::InitAsDefaultInstance() {
}
class mongo_find_page::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_page::mongo_find_page()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_page)
}
mongo_find_page::mongo_find_page(const mongo_find_page& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_page)
}

void mongo_find_page::SharedCtor() {
}

mongo_find_page::~mongo_find_page() {
  // @@protoc_insertion_point(destructor:db.mongo.find_page)
  SharedDtor();
}

void mongo_find_page::SharedDtor() {
}

void mongo_find_page::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_page& mongo_find_page::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_page_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_page::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_page::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_page*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_page)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_page)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_page)
}

::google::protobuf::uint8* mongo_find_page::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_page)
  return target;
}

size_t mongo_find_page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_page)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_page)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_page* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_page>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_page)
    MergeFrom(*source);
  }
}

void mongo_find_page::MergeFrom(const mongo_find_page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find_page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_page::CopyFrom(const mongo_find_page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_page::IsInitialized() const {
  return true;
}

void mongo_find_page::Swap(mongo_find_page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_page::InternalSwap(mongo_find_page* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find_page::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_remove::InitAsDefaultInstance() {
}
class mongo_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_remove::kTabFieldNumber;
const int mongo_remove::kJsonFieldNumber;
const int mongo_remove::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_remove::mongo_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.remove)
}
mongo_remove::mongo_remove(const mongo_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.remove)
}

void mongo_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_remove_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_remove::~mongo_remove() {
  // @@protoc_insertion_point(destructor:db.mongo.remove)
  SharedDtor();
}

void mongo_remove::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_remove& mongo_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_remove_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.remove.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.remove.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.remove.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.remove.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.remove)
}

::google::protobuf::uint8* mongo_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.remove)
  return target;
}

size_t mongo_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.remove)
    MergeFrom(*source);
  }
}

void mongo_remove::MergeFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_remove::CopyFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_remove::IsInitialized() const {
  return true;
}

void mongo_remove::Swap(mongo_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_remove::InternalSwap(mongo_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_index::InitAsDefaultInstance() {
}
class mongo_index::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_index::kTabFieldNumber;
const int mongo_index::kKeyFieldNumber;
const int mongo_index::kSortFieldNumber;
const int mongo_index::kUniqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_index::mongo_index()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.index)
}
mongo_index::mongo_index(const mongo_index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&sort_, &from.sort_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:db.mongo.index)
}

void mongo_index::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_index_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
}

mongo_index::~mongo_index() {
  // @@protoc_insertion_point(destructor:db.mongo.index)
  SharedDtor();
}

void mongo_index::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_index& mongo_index::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_index_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_index::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_index::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_index*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.index.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.index.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 sort = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sort(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool unique = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unique(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.index)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.index.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.index.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.index)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sort(), output);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unique(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.index)
}

::google::protobuf::uint8* mongo_index::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sort(), target);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unique(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.index)
  return target;
}

size_t mongo_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sort());
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.index)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_index* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_index>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.index)
    MergeFrom(*source);
  }
}

void mongo_index::MergeFrom(const mongo_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.sort() != 0) {
    set_sort(from.sort());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
}

void mongo_index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_index::CopyFrom(const mongo_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_index::IsInitialized() const {
  return true;
}

void mongo_index::Swap(mongo_index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_index::InternalSwap(mongo_index* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_, other->sort_);
  swap(unique_, other->unique_);
}

::google::protobuf::Metadata mongo_index::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_updater::InitAsDefaultInstance() {
}
class mongo_updater::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_updater::kFilterFieldNumber;
const int mongo_updater::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_updater::mongo_updater()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.updater)
}
mongo_updater::mongo_updater(const mongo_updater& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.updater)
}

void mongo_updater::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_updater_s2s_2fdb_2eproto.base);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_updater::~mongo_updater() {
  // @@protoc_insertion_point(destructor:db.mongo.updater)
  SharedDtor();
}

void mongo_updater::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_updater::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_updater& mongo_updater::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_updater_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_updater::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.updater)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_updater::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_updater*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string filter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updater.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string document = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updater.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_updater::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.updater)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updater.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string document = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updater.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.updater)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.updater)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_updater::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.updater)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filter(), output);
  }

  // string document = 2;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.updater)
}

::google::protobuf::uint8* mongo_updater::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.updater)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  // string document = 2;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.updater)
  return target;
}

size_t mongo_updater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.updater)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string document = 2;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_updater::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.updater)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_updater* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_updater>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.updater)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.updater)
    MergeFrom(*source);
  }
}

void mongo_updater::MergeFrom(const mongo_updater& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.updater)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
}

void mongo_updater::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.updater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_updater::CopyFrom(const mongo_updater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.updater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_updater::IsInitialized() const {
  return true;
}

void mongo_updater::Swap(mongo_updater* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_updater::InternalSwap(mongo_updater* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_updater::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_updates::InitAsDefaultInstance() {
}
class mongo_updates::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_updates::kTabFieldNumber;
const int mongo_updates::kTagFieldNumber;
const int mongo_updates::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_updates::mongo_updates()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.updates)
}
mongo_updates::mongo_updates(const mongo_updates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      document_(from.document_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.updates)
}

void mongo_updates::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_updates_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_updates::~mongo_updates() {
  // @@protoc_insertion_point(destructor:db.mongo.updates)
  SharedDtor();
}

void mongo_updates::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_updates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_updates& mongo_updates::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_updates_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_updates::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.updates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_updates::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_updates*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updates.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .db.mongo.updater document = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::db::mongo_updater::_InternalParse;
          object = msg->add_document();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updates.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_updates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.updates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updates.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .db.mongo.updater document = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updates.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.updates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.updates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_updates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.updates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updates.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // repeated .db.mongo.updater document = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->document(static_cast<int>(i)),
      output);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updates.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.updates)
}

::google::protobuf::uint8* mongo_updates::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.updates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updates.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // repeated .db.mongo.updater document = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->document(static_cast<int>(i)), target);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updates.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.updates)
  return target;
}

size_t mongo_updates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.updates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .db.mongo.updater document = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->document_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->document(static_cast<int>(i)));
    }
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_updates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.updates)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_updates* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_updates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.updates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.updates)
    MergeFrom(*source);
  }
}

void mongo_updates::MergeFrom(const mongo_updates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.updates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  document_.MergeFrom(from.document_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void mongo_updates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.updates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_updates::CopyFrom(const mongo_updates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.updates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_updates::IsInitialized() const {
  return true;
}

void mongo_updates::Swap(mongo_updates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_updates::InternalSwap(mongo_updates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&document_)->InternalSwap(CastToBase(&other->document_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_updates::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_update::InitAsDefaultInstance() {
  ::db::_mongo_update_default_instance_._instance.get_mutable()->document_ = const_cast< ::db::mongo_updater*>(
      ::db::mongo_updater::internal_default_instance());
}
class mongo_update::HasBitSetters {
 public:
  static const ::db::mongo_updater& document(const mongo_update* msg);
};

const ::db::mongo_updater&
mongo_update::HasBitSetters::document(const mongo_update* msg) {
  return *msg->document_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_update::kTabFieldNumber;
const int mongo_update::kDocumentFieldNumber;
const int mongo_update::kTagFieldNumber;
const int mongo_update::kUpsertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_update::mongo_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.update)
}
mongo_update::mongo_update(const mongo_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_document()) {
    document_ = new ::db::mongo_updater(*from.document_);
  } else {
    document_ = nullptr;
  }
  upsert_ = from.upsert_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.update)
}

void mongo_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_update_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&document_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upsert_) -
      reinterpret_cast<char*>(&document_)) + sizeof(upsert_));
}

mongo_update::~mongo_update() {
  // @@protoc_insertion_point(destructor:db.mongo.update)
  SharedDtor();
}

void mongo_update::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
}

void mongo_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_update& mongo_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_update_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_update::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  upsert_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .db.mongo.updater document = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::db::mongo_updater::_InternalParse;
        object = msg->mutable_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool upsert = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_upsert(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .db.mongo.updater document = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upsert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upsert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // .db.mongo.updater document = 2;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::document(this), output);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // bool upsert = 4;
  if (this->upsert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->upsert(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.update)
}

::google::protobuf::uint8* mongo_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // .db.mongo.updater document = 2;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::document(this), target);
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // bool upsert = 4;
  if (this->upsert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->upsert(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.update)
  return target;
}

size_t mongo_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string tag = 3;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // .db.mongo.updater document = 2;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // bool upsert = 4;
  if (this->upsert() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_update* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.update)
    MergeFrom(*source);
  }
}

void mongo_update::MergeFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_document()) {
    mutable_document()->::db::mongo_updater::MergeFrom(from.document());
  }
  if (from.upsert() != 0) {
    set_upsert(from.upsert());
  }
}

void mongo_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_update::CopyFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_update::IsInitialized() const {
  return true;
}

void mongo_update::Swap(mongo_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_update::InternalSwap(mongo_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(document_, other->document_);
  swap(upsert_, other->upsert_);
}

::google::protobuf::Metadata mongo_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_response::InitAsDefaultInstance() {
}
class mongo_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_response::mongo_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.response)
}
mongo_response::mongo_response(const mongo_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.response)
}

void mongo_response::SharedCtor() {
  count_ = 0;
}

mongo_response::~mongo_response() {
  // @@protoc_insertion_point(destructor:db.mongo.response)
  SharedDtor();
}

void mongo_response::SharedDtor() {
}

void mongo_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_response& mongo_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.response)
}

::google::protobuf::uint8* mongo_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.response)
  return target;
}

size_t mongo_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.response)
    MergeFrom(*source);
  }
}

void mongo_response::MergeFrom(const mongo_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void mongo_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_response::CopyFrom(const mongo_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_response::IsInitialized() const {
  return true;
}

void mongo_response::Swap(mongo_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_response::InternalSwap(mongo_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata mongo_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_inc_request::InitAsDefaultInstance() {
}
class mongo_inc_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_inc_request::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_inc_request::mongo_inc_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.inc.request)
}
mongo_inc_request::mongo_inc_request(const mongo_inc_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.inc.request)
}

void mongo_inc_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_inc_request_s2s_2fdb_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_inc_request::~mongo_inc_request() {
  // @@protoc_insertion_point(destructor:db.mongo.inc.request)
  SharedDtor();
}

void mongo_inc_request::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_inc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_inc_request& mongo_inc_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_inc_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_inc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.inc.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_inc_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_inc_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.inc.request.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_inc_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.inc.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.inc.request.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.inc.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.inc.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_inc_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.inc.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.inc.request.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.inc.request)
}

::google::protobuf::uint8* mongo_inc_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.inc.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.inc.request.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.inc.request)
  return target;
}

size_t mongo_inc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.inc.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_inc_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.inc.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_inc_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_inc_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.inc.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.inc.request)
    MergeFrom(*source);
  }
}

void mongo_inc_request::MergeFrom(const mongo_inc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.inc.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void mongo_inc_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.inc.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_inc_request::CopyFrom(const mongo_inc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.inc.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_inc_request::IsInitialized() const {
  return true;
}

void mongo_inc_request::Swap(mongo_inc_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_inc_request::InternalSwap(mongo_inc_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_inc_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_inc_response::InitAsDefaultInstance() {
}
class mongo_inc_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_inc_response::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_inc_response::mongo_inc_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.inc.response)
}
mongo_inc_response::mongo_inc_response(const mongo_inc_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.inc.response)
}

void mongo_inc_response::SharedCtor() {
  value_ = 0;
}

mongo_inc_response::~mongo_inc_response() {
  // @@protoc_insertion_point(destructor:db.mongo.inc.response)
  SharedDtor();
}

void mongo_inc_response::SharedDtor() {
}

void mongo_inc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_inc_response& mongo_inc_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_inc_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_inc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.inc.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_inc_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_inc_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_inc_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.inc.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.inc.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.inc.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_inc_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.inc.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.inc.response)
}

::google::protobuf::uint8* mongo_inc_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.inc.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.inc.response)
  return target;
}

size_t mongo_inc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.inc.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_inc_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.inc.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_inc_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_inc_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.inc.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.inc.response)
    MergeFrom(*source);
  }
}

void mongo_inc_response::MergeFrom(const mongo_inc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.inc.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void mongo_inc_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.inc.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_inc_response::CopyFrom(const mongo_inc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.inc.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_inc_response::IsInitialized() const {
  return true;
}

void mongo_inc_response::Swap(mongo_inc_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_inc_response::InternalSwap(mongo_inc_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata mongo_inc_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_inc::InitAsDefaultInstance() {
}
class mongo_inc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_inc::mongo_inc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.inc)
}
mongo_inc::mongo_inc(const mongo_inc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.inc)
}

void mongo_inc::SharedCtor() {
}

mongo_inc::~mongo_inc() {
  // @@protoc_insertion_point(destructor:db.mongo.inc)
  SharedDtor();
}

void mongo_inc::SharedDtor() {
}

void mongo_inc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_inc& mongo_inc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_inc_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_inc::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_inc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_inc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_inc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.inc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.inc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.inc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_inc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.inc)
}

::google::protobuf::uint8* mongo_inc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.inc)
  return target;
}

size_t mongo_inc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.inc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_inc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.inc)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_inc* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_inc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.inc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.inc)
    MergeFrom(*source);
  }
}

void mongo_inc::MergeFrom(const mongo_inc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.inc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_inc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.inc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_inc::CopyFrom(const mongo_inc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.inc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_inc::IsInitialized() const {
  return true;
}

void mongo_inc::Swap(mongo_inc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_inc::InternalSwap(mongo_inc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_inc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_modify_request::InitAsDefaultInstance() {
}
class mongo_find_modify_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_modify_request::kTabFieldNumber;
const int mongo_find_modify_request::kQueryFieldNumber;
const int mongo_find_modify_request::kUpdateFieldNumber;
const int mongo_find_modify_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_modify_request::mongo_find_modify_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_modify.request)
}
mongo_find_modify_request::mongo_find_modify_request(const mongo_find_modify_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update().size() > 0) {
    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_modify.request)
}

void mongo_find_modify_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_modify_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_modify_request::~mongo_find_modify_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find_modify.request)
  SharedDtor();
}

void mongo_find_modify_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_modify_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_modify_request& mongo_find_modify_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_modify_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_modify_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_modify.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_modify_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_modify_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.update");
        object = msg->mutable_update();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_modify_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_modify.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update().data(), static_cast<int>(this->update().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.update"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_modify.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_modify.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_modify_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_modify.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.update");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_modify.request)
}

::google::protobuf::uint8* mongo_find_modify_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_modify.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string query = 2;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.update");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_modify.request)
  return target;
}

size_t mongo_find_modify_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_modify.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string query = 2;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // string update = 3;
  if (this->update().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_modify_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_modify.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_modify_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_modify_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_modify.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_modify.request)
    MergeFrom(*source);
  }
}

void mongo_find_modify_request::MergeFrom(const mongo_find_modify_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_modify.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.update().size() > 0) {

    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
}

void mongo_find_modify_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_modify.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_modify_request::CopyFrom(const mongo_find_modify_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_modify.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_modify_request::IsInitialized() const {
  return true;
}

void mongo_find_modify_request::Swap(mongo_find_modify_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_modify_request::InternalSwap(mongo_find_modify_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_.Swap(&other->update_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_modify_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_modify_response::InitAsDefaultInstance() {
}
class mongo_find_modify_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_modify_response::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_modify_response::mongo_find_modify_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_modify.response)
}
mongo_find_modify_response::mongo_find_modify_response(const mongo_find_modify_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_modify.response)
}

void mongo_find_modify_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_modify_response_s2s_2fdb_2eproto.base);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_modify_response::~mongo_find_modify_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find_modify.response)
  SharedDtor();
}

void mongo_find_modify_response::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_modify_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_modify_response& mongo_find_modify_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_modify_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_modify_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_modify.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_modify_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_modify_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string json = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.response.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_modify_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_modify.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.response.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_modify.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_modify.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_modify_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_modify.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.response.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_modify.response)
}

::google::protobuf::uint8* mongo_find_modify_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_modify.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.response.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_modify.response)
  return target;
}

size_t mongo_find_modify_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_modify.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_modify_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_modify.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_modify_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_modify_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_modify.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_modify.response)
    MergeFrom(*source);
  }
}

void mongo_find_modify_response::MergeFrom(const mongo_find_modify_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_modify.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void mongo_find_modify_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_modify.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_modify_response::CopyFrom(const mongo_find_modify_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_modify.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_modify_response::IsInitialized() const {
  return true;
}

void mongo_find_modify_response::Swap(mongo_find_modify_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_modify_response::InternalSwap(mongo_find_modify_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_modify_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_modify::InitAsDefaultInstance() {
}
class mongo_find_modify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_modify::mongo_find_modify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_modify)
}
mongo_find_modify::mongo_find_modify(const mongo_find_modify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_modify)
}

void mongo_find_modify::SharedCtor() {
}

mongo_find_modify::~mongo_find_modify() {
  // @@protoc_insertion_point(destructor:db.mongo.find_modify)
  SharedDtor();
}

void mongo_find_modify::SharedDtor() {
}

void mongo_find_modify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_modify& mongo_find_modify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_modify_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_modify::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_modify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_modify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_modify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_modify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_modify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_modify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_modify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_modify)
}

::google::protobuf::uint8* mongo_find_modify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_modify)
  return target;
}

size_t mongo_find_modify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_modify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_modify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_modify)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_modify* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_modify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_modify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_modify)
    MergeFrom(*source);
  }
}

void mongo_find_modify::MergeFrom(const mongo_find_modify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_modify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find_modify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_modify::CopyFrom(const mongo_find_modify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_modify::IsInitialized() const {
  return true;
}

void mongo_find_modify::Swap(mongo_find_modify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_modify::InternalSwap(mongo_find_modify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find_modify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command_request::InitAsDefaultInstance() {
}
class mongo_command_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_command_request::kTabFieldNumber;
const int mongo_command_request::kCmdFieldNumber;
const int mongo_command_request::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command_request::mongo_command_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command.request)
}
mongo_command_request::mongo_command_request(const mongo_command_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.command.request)
}

void mongo_command_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_command_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_command_request::~mongo_command_request() {
  // @@protoc_insertion_point(destructor:db.mongo.command.request)
  SharedDtor();
}

void mongo_command_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_command_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command_request& mongo_command_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_command_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cmd = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.cmd");
        object = msg->mutable_cmd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // string json = 3;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command.request)
}

::google::protobuf::uint8* mongo_command_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // string json = 3;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command.request)
  return target;
}

size_t mongo_command_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // string json = 3;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command.request)
    MergeFrom(*source);
  }
}

void mongo_command_request::MergeFrom(const mongo_command_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void mongo_command_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command_request::CopyFrom(const mongo_command_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command_request::IsInitialized() const {
  return true;
}

void mongo_command_request::Swap(mongo_command_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command_request::InternalSwap(mongo_command_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmd_.Swap(&other->cmd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_command_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command_response::InitAsDefaultInstance() {
}
class mongo_command_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_command_response::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command_response::mongo_command_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command.response)
}
mongo_command_response::mongo_command_response(const mongo_command_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.command.response)
}

void mongo_command_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_command_response_s2s_2fdb_2eproto.base);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_command_response::~mongo_command_response() {
  // @@protoc_insertion_point(destructor:db.mongo.command.response)
  SharedDtor();
}

void mongo_command_response::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_command_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command_response& mongo_command_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_command_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string json = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.response.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.response.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.response.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command.response)
}

::google::protobuf::uint8* mongo_command_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.response.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command.response)
  return target;
}

size_t mongo_command_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command.response)
    MergeFrom(*source);
  }
}

void mongo_command_response::MergeFrom(const mongo_command_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void mongo_command_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command_response::CopyFrom(const mongo_command_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command_response::IsInitialized() const {
  return true;
}

void mongo_command_response::Swap(mongo_command_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command_response::InternalSwap(mongo_command_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_command_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command::InitAsDefaultInstance() {
}
class mongo_command::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command::mongo_command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command)
}
mongo_command::mongo_command(const mongo_command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.command)
}

void mongo_command::SharedCtor() {
}

mongo_command::~mongo_command() {
  // @@protoc_insertion_point(destructor:db.mongo.command)
  SharedDtor();
}

void mongo_command::SharedDtor() {
}

void mongo_command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command& mongo_command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_command::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command)
}

::google::protobuf::uint8* mongo_command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command)
  return target;
}

size_t mongo_command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command)
    MergeFrom(*source);
  }
}

void mongo_command::MergeFrom(const mongo_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command::CopyFrom(const mongo_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command::IsInitialized() const {
  return true;
}

void mongo_command::Swap(mongo_command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command::InternalSwap(mongo_command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_merge_request::InitAsDefaultInstance() {
}
class mongo_merge_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_merge_request::kFieldFieldNumber;
const int mongo_merge_request::kSourceFieldNumber;
const int mongo_merge_request::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_merge_request::mongo_merge_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.merge.request)
}
mongo_merge_request::mongo_merge_request(const mongo_merge_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target().size() > 0) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.merge.request)
}

void mongo_merge_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_merge_request_s2s_2fdb_2eproto.base);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_merge_request::~mongo_merge_request() {
  // @@protoc_insertion_point(destructor:db.mongo.merge.request)
  SharedDtor();
}

void mongo_merge_request::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_merge_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_merge_request& mongo_merge_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_merge_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_merge_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.merge.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_merge_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_merge_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.request.field");
        object = msg->mutable_field();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string source = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.request.source");
        object = msg->mutable_source();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.request.target");
        object = msg->mutable_target();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_merge_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.merge.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.request.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.request.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.request.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.merge.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.merge.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_merge_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.merge.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field(), output);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.merge.request)
}

::google::protobuf::uint8* mongo_merge_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.merge.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.merge.request)
  return target;
}

size_t mongo_merge_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.merge.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_merge_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.merge.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_merge_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_merge_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.merge.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.merge.request)
    MergeFrom(*source);
  }
}

void mongo_merge_request::MergeFrom(const mongo_merge_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.merge.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
}

void mongo_merge_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.merge.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_merge_request::CopyFrom(const mongo_merge_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.merge.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_merge_request::IsInitialized() const {
  return true;
}

void mongo_merge_request::Swap(mongo_merge_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_merge_request::InternalSwap(mongo_merge_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_.Swap(&other->field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_merge_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_merge_response::InitAsDefaultInstance() {
}
class mongo_merge_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_merge_response::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_merge_response::mongo_merge_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.merge.response)
}
mongo_merge_response::mongo_merge_response(const mongo_merge_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.merge.response)
}

void mongo_merge_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_merge_response_s2s_2fdb_2eproto.base);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_merge_response::~mongo_merge_response() {
  // @@protoc_insertion_point(destructor:db.mongo.merge.response)
  SharedDtor();
}

void mongo_merge_response::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_merge_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_merge_response& mongo_merge_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_merge_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_merge_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.merge.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_merge_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_merge_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.response.uuid");
        object = msg->mutable_uuid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_merge_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.merge.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.response.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.merge.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.merge.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_merge_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.merge.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.response.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.merge.response)
}

::google::protobuf::uint8* mongo_merge_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.merge.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.response.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.merge.response)
  return target;
}

size_t mongo_merge_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.merge.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_merge_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.merge.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_merge_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_merge_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.merge.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.merge.response)
    MergeFrom(*source);
  }
}

void mongo_merge_response::MergeFrom(const mongo_merge_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.merge.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void mongo_merge_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.merge.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_merge_response::CopyFrom(const mongo_merge_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.merge.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_merge_response::IsInitialized() const {
  return true;
}

void mongo_merge_response::Swap(mongo_merge_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_merge_response::InternalSwap(mongo_merge_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_merge_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_merge::InitAsDefaultInstance() {
}
class mongo_merge::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_merge::mongo_merge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.merge)
}
mongo_merge::mongo_merge(const mongo_merge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.merge)
}

void mongo_merge::SharedCtor() {
}

mongo_merge::~mongo_merge() {
  // @@protoc_insertion_point(destructor:db.mongo.merge)
  SharedDtor();
}

void mongo_merge::SharedDtor() {
}

void mongo_merge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_merge& mongo_merge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_merge_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_merge::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_merge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_merge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_merge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.merge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.merge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.merge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_merge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.merge)
}

::google::protobuf::uint8* mongo_merge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.merge)
  return target;
}

size_t mongo_merge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.merge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_merge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.merge)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_merge* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_merge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.merge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.merge)
    MergeFrom(*source);
  }
}

void mongo_merge::MergeFrom(const mongo_merge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.merge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_merge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_merge::CopyFrom(const mongo_merge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_merge::IsInitialized() const {
  return true;
}

void mongo_merge::Swap(mongo_merge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_merge::InternalSwap(mongo_merge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_merge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo::InitAsDefaultInstance() {
}
class mongo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo::mongo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo)
}
mongo::mongo(const mongo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo)
}

void mongo::SharedCtor() {
}

mongo::~mongo() {
  // @@protoc_insertion_point(destructor:db.mongo)
  SharedDtor();
}

void mongo::SharedDtor() {
}

void mongo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo& mongo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo)
}

::google::protobuf::uint8* mongo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo)
  return target;
}

size_t mongo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo* source =
      ::google::protobuf::DynamicCastToGenerated<mongo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo)
    MergeFrom(*source);
  }
}

void mongo::MergeFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo::CopyFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo::IsInitialized() const {
  return true;
}

void mongo::Swap(mongo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo::InternalSwap(mongo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_create::InitAsDefaultInstance() {
}
class mysql_create::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_create::kTableFieldNumber;
const int mysql_create::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_create::mysql_create()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.create)
}
mysql_create::mysql_create(const mysql_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mysql.create)
}

void mysql_create::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_create_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mysql_create::~mysql_create() {
  // @@protoc_insertion_point(destructor:db.mysql.create)
  SharedDtor();
}

void mysql_create::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_create& mysql_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_create_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_create::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_create*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.create.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mysql.create.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.create.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.create.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.create)
}

::google::protobuf::uint8* mysql_create::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.create.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.create)
  return target;
}

size_t mysql_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.create)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_create* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.create)
    MergeFrom(*source);
  }
}

void mysql_create::MergeFrom(const mysql_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
}

void mysql_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_create::CopyFrom(const mysql_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_create::IsInitialized() const {
  return true;
}

void mysql_create::Swap(mysql_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_create::InternalSwap(mysql_create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mysql_create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_exec::InitAsDefaultInstance() {
}
class mysql_exec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_exec::kSqlFieldNumber;
const int mysql_exec::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_exec::mysql_exec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.exec)
}
mysql_exec::mysql_exec(const mysql_exec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.exec)
}

void mysql_exec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_exec_s2s_2fdb_2eproto.base);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_ = false;
}

mysql_exec::~mysql_exec() {
  // @@protoc_insertion_point(destructor:db.mysql.exec)
  SharedDtor();
}

void mysql_exec::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_exec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_exec& mysql_exec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_exec_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_exec::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_exec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_exec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string sql = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.exec.sql");
        object = msg->mutable_sql();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_query(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_exec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.exec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sql = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.exec.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.exec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.exec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_exec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.exec.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  // bool query = 2;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.exec)
}

::google::protobuf::uint8* mysql_exec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.exec.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  // bool query = 2;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.exec)
  return target;
}

size_t mysql_exec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.exec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  // bool query = 2;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_exec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.exec)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_exec* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_exec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.exec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.exec)
    MergeFrom(*source);
  }
}

void mysql_exec::MergeFrom(const mysql_exec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.exec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void mysql_exec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_exec::CopyFrom(const mysql_exec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_exec::IsInitialized() const {
  return true;
}

void mysql_exec::Swap(mysql_exec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_exec::InternalSwap(mysql_exec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sql_.Swap(&other->sql_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_, other->query_);
}

::google::protobuf::Metadata mysql_exec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_add::InitAsDefaultInstance() {
}
class mysql_add::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_add::kFlagFieldNumber;
const int mysql_add::kTableFieldNumber;
const int mysql_add::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_add::mysql_add()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.add)
}
mysql_add::mysql_add(const mysql_add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.add)
}

void mysql_add::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_add_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mysql_add::~mysql_add() {
  // @@protoc_insertion_point(destructor:db.mysql.add)
  SharedDtor();
}

void mysql_add::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_add& mysql_add::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_add_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_add::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_add::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_add*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.add.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.add.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.add)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.add.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.add.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.add.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.add.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.add)
}

::google::protobuf::uint8* mysql_add::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.add.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.add.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.add)
  return target;
}

size_t mysql_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.add)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_add* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.add)
    MergeFrom(*source);
  }
}

void mysql_add::MergeFrom(const mysql_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_add::CopyFrom(const mysql_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_add::IsInitialized() const {
  return true;
}

void mysql_add::Swap(mysql_add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_add::InternalSwap(mysql_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_add::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_save::InitAsDefaultInstance() {
}
class mysql_save::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_save::kFlagFieldNumber;
const int mysql_save::kTableFieldNumber;
const int mysql_save::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_save::mysql_save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.save)
}
mysql_save::mysql_save(const mysql_save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.save)
}

void mysql_save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_save_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mysql_save::~mysql_save() {
  // @@protoc_insertion_point(destructor:db.mysql.save)
  SharedDtor();
}

void mysql_save::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_save& mysql_save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_save_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_save::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.save.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.save.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.save.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.save.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.save.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.save.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.save)
}

::google::protobuf::uint8* mysql_save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.save.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.save.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.save)
  return target;
}

size_t mysql_save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.save)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_save* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.save)
    MergeFrom(*source);
  }
}

void mysql_save::MergeFrom(const mysql_save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_save::CopyFrom(const mysql_save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_save::IsInitialized() const {
  return true;
}

void mysql_save::Swap(mysql_save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_save::InternalSwap(mysql_save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_query::InitAsDefaultInstance() {
}
class mysql_query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_query::kTableFieldNumber;
const int mysql_query::kLimitFieldNumber;
const int mysql_query::kWhereJsonFieldNumber;
const int mysql_query::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_query::mysql_query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.query)
}
mysql_query::mysql_query(const mysql_query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.query)
}

void mysql_query::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_query_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mysql_query::~mysql_query() {
  // @@protoc_insertion_point(destructor:db.mysql.query)
  SharedDtor();
}

void mysql_query::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_query& mysql_query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_query_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_query::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.query.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.query.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mysql.query.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.query.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.query.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.query.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.query)
}

::google::protobuf::uint8* mysql_query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.query.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.query)
  return target;
}

size_t mysql_query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.query)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_query* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.query)
    MergeFrom(*source);
  }
}

void mysql_query::MergeFrom(const mysql_query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mysql_query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_query::CopyFrom(const mysql_query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_query::IsInitialized() const {
  return true;
}

void mysql_query::Swap(mysql_query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_query::InternalSwap(mysql_query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mysql_query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_remove::InitAsDefaultInstance() {
}
class mysql_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_remove::kFlagFieldNumber;
const int mysql_remove::kTableFieldNumber;
const int mysql_remove::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_remove::mysql_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.remove)
}
mysql_remove::mysql_remove(const mysql_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.remove)
}

void mysql_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_remove_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mysql_remove::~mysql_remove() {
  // @@protoc_insertion_point(destructor:db.mysql.remove)
  SharedDtor();
}

void mysql_remove::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_remove& mysql_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_remove_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.remove.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.remove.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.remove.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.remove.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.remove)
}

::google::protobuf::uint8* mysql_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.remove.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.remove)
  return target;
}

size_t mysql_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string where_json = 3;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.remove)
    MergeFrom(*source);
  }
}

void mysql_remove::MergeFrom(const mysql_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_remove::CopyFrom(const mysql_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_remove::IsInitialized() const {
  return true;
}

void mysql_remove::Swap(mysql_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_remove::InternalSwap(mysql_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_update::InitAsDefaultInstance() {
}
class mysql_update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_update::kFlagFieldNumber;
const int mysql_update::kTableFieldNumber;
const int mysql_update::kUpdateJsonFieldNumber;
const int mysql_update::kWhereJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_update::mysql_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.update)
}
mysql_update::mysql_update(const mysql_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_json().size() > 0) {
    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.where_json().size() > 0) {
    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.mysql.update)
}

void mysql_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_update_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

mysql_update::~mysql_update() {
  // @@protoc_insertion_point(destructor:db.mysql.update)
  SharedDtor();
}

void mysql_update::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_update& mysql_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_update_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_update::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.update.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update_json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.update.update_json");
        object = msg->mutable_update_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string where_json = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.update.where_json");
        object = msg->mutable_where_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.update.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update_json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update_json().data(), static_cast<int>(this->update_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.update.update_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string where_json = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_json().data(), static_cast<int>(this->where_json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.update.where_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.update_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update_json(), output);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.where_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->where_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.update)
}

::google::protobuf::uint8* mysql_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_json().data(), static_cast<int>(this->update_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.update_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_json(), target);
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_json().data(), static_cast<int>(this->where_json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.update.where_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->where_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.update)
  return target;
}

size_t mysql_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string update_json = 3;
  if (this->update_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_json());
  }

  // string where_json = 4;
  if (this->where_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_json());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_update* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.update)
    MergeFrom(*source);
  }
}

void mysql_update::MergeFrom(const mysql_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.update_json().size() > 0) {

    update_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_json_);
  }
  if (from.where_json().size() > 0) {

    where_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_json_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void mysql_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_update::CopyFrom(const mysql_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_update::IsInitialized() const {
  return true;
}

void mysql_update::Swap(mysql_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_update::InternalSwap(mysql_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_json_.Swap(&other->update_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_json_.Swap(&other->where_json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata mysql_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql_response::InitAsDefaultInstance() {
}
class mysql_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mysql_response::kErrorFieldNumber;
const int mysql_response::kJsonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql_response::mysql_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql.response)
}
mysql_response::mysql_response(const mysql_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jsons_(from.jsons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mysql.response)
}

void mysql_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mysql_response_s2s_2fdb_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mysql_response::~mysql_response() {
  // @@protoc_insertion_point(destructor:db.mysql.response)
  SharedDtor();
}

void mysql_response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mysql_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql_response& mysql_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsons_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mysql.response.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bytes jsons = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_jsons();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mysql.response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes jsons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_jsons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // repeated bytes jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->jsons(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql.response)
}

::google::protobuf::uint8* mysql_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mysql.response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // repeated bytes jsons = 2;
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->jsons(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql.response)
  return target;
}

size_t mysql_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes jsons = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jsons_size());
  for (int i = 0, n = this->jsons_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->jsons(i));
  }

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql_response* source =
      ::google::protobuf::DynamicCastToGenerated<mysql_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql.response)
    MergeFrom(*source);
  }
}

void mysql_response::MergeFrom(const mysql_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jsons_.MergeFrom(from.jsons_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void mysql_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql_response::CopyFrom(const mysql_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql_response::IsInitialized() const {
  return true;
}

void mysql_response::Swap(mysql_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql_response::InternalSwap(mysql_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsons_.InternalSwap(CastToBase(&other->jsons_));
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mysql_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mysql::InitAsDefaultInstance() {
}
class mysql::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mysql::mysql()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mysql)
}
mysql::mysql(const mysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mysql)
}

void mysql::SharedCtor() {
}

mysql::~mysql() {
  // @@protoc_insertion_point(destructor:db.mysql)
  SharedDtor();
}

void mysql::SharedDtor() {
}

void mysql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mysql& mysql::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mysql_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mysql::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mysql::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mysql*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mysql)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mysql)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mysql)
}

::google::protobuf::uint8* mysql::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mysql)
  return target;
}

size_t mysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mysql)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mysql)
  GOOGLE_DCHECK_NE(&from, this);
  const mysql* source =
      ::google::protobuf::DynamicCastToGenerated<mysql>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mysql)
    MergeFrom(*source);
  }
}

void mysql::MergeFrom(const mysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mysql::CopyFrom(const mysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mysql::IsInitialized() const {
  return true;
}

void mysql::Swap(mysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mysql::InternalSwap(mysql* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mysql::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::db::mongo_insert* Arena::CreateMaybeMessage< ::db::mongo_insert >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_insert >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_request* Arena::CreateMaybeMessage< ::db::mongo_find_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_response* Arena::CreateMaybeMessage< ::db::mongo_find_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find* Arena::CreateMaybeMessage< ::db::mongo_find >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_one_request* Arena::CreateMaybeMessage< ::db::mongo_find_one_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_one_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_one_response* Arena::CreateMaybeMessage< ::db::mongo_find_one_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_one_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_one* Arena::CreateMaybeMessage< ::db::mongo_find_one >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_one >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_sum_request* Arena::CreateMaybeMessage< ::db::mongo_sum_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_sum_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_sum_response* Arena::CreateMaybeMessage< ::db::mongo_sum_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_sum_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_sum* Arena::CreateMaybeMessage< ::db::mongo_sum >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_sum >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_count_request* Arena::CreateMaybeMessage< ::db::mongo_count_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_count_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_count_response* Arena::CreateMaybeMessage< ::db::mongo_count_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_count_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_count* Arena::CreateMaybeMessage< ::db::mongo_count >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_count >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_page_request* Arena::CreateMaybeMessage< ::db::mongo_find_page_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_page_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_page_response* Arena::CreateMaybeMessage< ::db::mongo_find_page_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_page_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_page* Arena::CreateMaybeMessage< ::db::mongo_find_page >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_page >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_remove* Arena::CreateMaybeMessage< ::db::mongo_remove >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_index* Arena::CreateMaybeMessage< ::db::mongo_index >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_index >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_updater* Arena::CreateMaybeMessage< ::db::mongo_updater >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_updater >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_updates* Arena::CreateMaybeMessage< ::db::mongo_updates >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_updates >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_update* Arena::CreateMaybeMessage< ::db::mongo_update >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_update >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_response* Arena::CreateMaybeMessage< ::db::mongo_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_inc_request* Arena::CreateMaybeMessage< ::db::mongo_inc_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_inc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_inc_response* Arena::CreateMaybeMessage< ::db::mongo_inc_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_inc_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_inc* Arena::CreateMaybeMessage< ::db::mongo_inc >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_inc >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_modify_request* Arena::CreateMaybeMessage< ::db::mongo_find_modify_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_modify_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_modify_response* Arena::CreateMaybeMessage< ::db::mongo_find_modify_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_modify_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_modify* Arena::CreateMaybeMessage< ::db::mongo_find_modify >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_modify >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command_request* Arena::CreateMaybeMessage< ::db::mongo_command_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command_response* Arena::CreateMaybeMessage< ::db::mongo_command_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command* Arena::CreateMaybeMessage< ::db::mongo_command >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_merge_request* Arena::CreateMaybeMessage< ::db::mongo_merge_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_merge_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_merge_response* Arena::CreateMaybeMessage< ::db::mongo_merge_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_merge_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_merge* Arena::CreateMaybeMessage< ::db::mongo_merge >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_merge >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo* Arena::CreateMaybeMessage< ::db::mongo >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_create* Arena::CreateMaybeMessage< ::db::mysql_create >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_create >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_exec* Arena::CreateMaybeMessage< ::db::mysql_exec >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_exec >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_add* Arena::CreateMaybeMessage< ::db::mysql_add >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_add >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_save* Arena::CreateMaybeMessage< ::db::mysql_save >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_save >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_query* Arena::CreateMaybeMessage< ::db::mysql_query >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_query >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_remove* Arena::CreateMaybeMessage< ::db::mysql_remove >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_update* Arena::CreateMaybeMessage< ::db::mysql_update >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_update >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql_response* Arena::CreateMaybeMessage< ::db::mysql_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mysql* Arena::CreateMaybeMessage< ::db::mysql >(Arena* arena) {
  return Arena::CreateInternal< ::db::mysql >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
