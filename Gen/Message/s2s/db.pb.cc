// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s/db.proto

#include "s2s/db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_s2s_2fdb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_mongo_updater_s2s_2fdb_2eproto;
namespace db {
class mongo_insertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_insert> _instance;
} _mongo_insert_default_instance_;
class mongo_find_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_request> _instance;
} _mongo_find_request_default_instance_;
class mongo_find_pageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_page> _instance;
} _mongo_find_page_default_instance_;
class mongo_find_moreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_more> _instance;
} _mongo_find_more_default_instance_;
class mongo_find_distinctDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_distinct> _instance;
} _mongo_find_distinct_default_instance_;
class mongo_find_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_response> _instance;
} _mongo_find_response_default_instance_;
class mongo_findDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find> _instance;
} _mongo_find_default_instance_;
class mongo_find_one_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_one_request> _instance;
} _mongo_find_one_request_default_instance_;
class mongo_find_one_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_one_response> _instance;
} _mongo_find_one_response_default_instance_;
class mongo_find_oneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_one> _instance;
} _mongo_find_one_default_instance_;
class mongo_aggregate_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_aggregate_request> _instance;
} _mongo_aggregate_request_default_instance_;
class mongo_aggregate_facetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_aggregate_facet> _instance;
} _mongo_aggregate_facet_default_instance_;
class mongo_aggregateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_aggregate> _instance;
} _mongo_aggregate_default_instance_;
class mongo_count_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_count_request> _instance;
} _mongo_count_request_default_instance_;
class mongo_count_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_count_response> _instance;
} _mongo_count_response_default_instance_;
class mongo_countDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_count> _instance;
} _mongo_count_default_instance_;
class mongo_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_remove> _instance;
} _mongo_remove_default_instance_;
class mongo_indexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_index> _instance;
} _mongo_index_default_instance_;
class mongo_updaterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_updater> _instance;
} _mongo_updater_default_instance_;
class mongo_updatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_updates> _instance;
} _mongo_updates_default_instance_;
class mongo_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_update> _instance;
} _mongo_update_default_instance_;
class mongo_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_response> _instance;
} _mongo_response_default_instance_;
class mongo_inc_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_inc_request> _instance;
} _mongo_inc_request_default_instance_;
class mongo_inc_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_inc_response> _instance;
} _mongo_inc_response_default_instance_;
class mongo_incDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_inc> _instance;
} _mongo_inc_default_instance_;
class mongo_find_modify_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_modify_request> _instance;
} _mongo_find_modify_request_default_instance_;
class mongo_find_modify_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_modify_response> _instance;
} _mongo_find_modify_response_default_instance_;
class mongo_find_modifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_find_modify> _instance;
} _mongo_find_modify_default_instance_;
class mongo_command_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command_request> _instance;
} _mongo_command_request_default_instance_;
class mongo_command_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command_response> _instance;
} _mongo_command_response_default_instance_;
class mongo_commandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_command> _instance;
} _mongo_command_default_instance_;
class mongo_merge_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_merge_request> _instance;
} _mongo_merge_request_default_instance_;
class mongo_merge_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_merge_response> _instance;
} _mongo_merge_response_default_instance_;
class mongo_mergeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo_merge> _instance;
} _mongo_merge_default_instance_;
class mongoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mongo> _instance;
} _mongo_default_instance_;
class sql_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_create> _instance;
} _sql_create_default_instance_;
class sql_indexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_index> _instance;
} _sql_index_default_instance_;
class sql_execDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_exec> _instance;
} _sql_exec_default_instance_;
class sql_insertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_insert> _instance;
} _sql_insert_default_instance_;
class sql_saveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_save> _instance;
} _sql_save_default_instance_;
class sql_query_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_query_request> _instance;
} _sql_query_request_default_instance_;
class sql_query_pageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_query_page> _instance;
} _sql_query_page_default_instance_;
class sql_query_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_query_response> _instance;
} _sql_query_response_default_instance_;
class sql_queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_query> _instance;
} _sql_query_default_instance_;
class sql_delDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_del> _instance;
} _sql_del_default_instance_;
class sql_incDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_inc> _instance;
} _sql_inc_default_instance_;
class sql_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_update> _instance;
} _sql_update_default_instance_;
class sql_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql_response> _instance;
} _sql_response_default_instance_;
class sqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sql> _instance;
} _sql_default_instance_;
}  // namespace db
static void InitDefaultsmongo_insert_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_insert_default_instance_;
    new (ptr) ::db::mongo_insert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_insert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_insert_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_insert_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_request_default_instance_;
    new (ptr) ::db::mongo_find_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_page_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_page_default_instance_;
    new (ptr) ::db::mongo_find_page();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_page::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_page_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_page_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_more_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_more_default_instance_;
    new (ptr) ::db::mongo_find_more();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_more::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_more_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_more_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_distinct_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_distinct_default_instance_;
    new (ptr) ::db::mongo_find_distinct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_distinct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_distinct_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_distinct_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_response_default_instance_;
    new (ptr) ::db::mongo_find_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_default_instance_;
    new (ptr) ::db::mongo_find();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_one_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_one_request_default_instance_;
    new (ptr) ::db::mongo_find_one_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_one_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_one_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_one_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_one_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_one_response_default_instance_;
    new (ptr) ::db::mongo_find_one_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_one_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_one_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_one_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_one_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_one_default_instance_;
    new (ptr) ::db::mongo_find_one();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_one::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_one_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_one_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_aggregate_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_aggregate_request_default_instance_;
    new (ptr) ::db::mongo_aggregate_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_aggregate_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_aggregate_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_aggregate_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_aggregate_facet_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_aggregate_facet_default_instance_;
    new (ptr) ::db::mongo_aggregate_facet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_aggregate_facet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_aggregate_facet_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_aggregate_facet_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_aggregate_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_aggregate_default_instance_;
    new (ptr) ::db::mongo_aggregate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_aggregate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_aggregate_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_aggregate_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_count_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_count_request_default_instance_;
    new (ptr) ::db::mongo_count_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_count_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_count_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_count_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_count_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_count_response_default_instance_;
    new (ptr) ::db::mongo_count_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_count_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_count_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_count_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_count_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_count_default_instance_;
    new (ptr) ::db::mongo_count();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_count::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_count_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_count_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_remove_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_remove_default_instance_;
    new (ptr) ::db::mongo_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_remove_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_remove_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_index_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_index_default_instance_;
    new (ptr) ::db::mongo_index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_index::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_index_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_index_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_updater_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_updater_default_instance_;
    new (ptr) ::db::mongo_updater();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_updater::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_updater_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_updater_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_updates_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_updates_default_instance_;
    new (ptr) ::db::mongo_updates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_updates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mongo_updates_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmongo_updates_s2s_2fdb_2eproto}, {
      &scc_info_mongo_updater_s2s_2fdb_2eproto.base,}};

static void InitDefaultsmongo_update_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_update_default_instance_;
    new (ptr) ::db::mongo_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mongo_update_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmongo_update_s2s_2fdb_2eproto}, {
      &scc_info_mongo_updater_s2s_2fdb_2eproto.base,}};

static void InitDefaultsmongo_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_response_default_instance_;
    new (ptr) ::db::mongo_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_inc_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_inc_request_default_instance_;
    new (ptr) ::db::mongo_inc_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_inc_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_inc_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_inc_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_inc_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_inc_response_default_instance_;
    new (ptr) ::db::mongo_inc_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_inc_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_inc_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_inc_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_inc_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_inc_default_instance_;
    new (ptr) ::db::mongo_inc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_inc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_inc_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_inc_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_modify_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_modify_request_default_instance_;
    new (ptr) ::db::mongo_find_modify_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_modify_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_modify_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_modify_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_modify_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_modify_response_default_instance_;
    new (ptr) ::db::mongo_find_modify_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_modify_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_modify_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_modify_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_find_modify_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_find_modify_default_instance_;
    new (ptr) ::db::mongo_find_modify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_find_modify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_find_modify_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_find_modify_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_command_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_request_default_instance_;
    new (ptr) ::db::mongo_command_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_command_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_response_default_instance_;
    new (ptr) ::db::mongo_command_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_command_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_command_default_instance_;
    new (ptr) ::db::mongo_command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_command_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_command_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_merge_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_merge_request_default_instance_;
    new (ptr) ::db::mongo_merge_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_merge_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_merge_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_merge_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_merge_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_merge_response_default_instance_;
    new (ptr) ::db::mongo_merge_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_merge_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_merge_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_merge_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_merge_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_merge_default_instance_;
    new (ptr) ::db::mongo_merge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo_merge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_merge_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_merge_s2s_2fdb_2eproto}, {}};

static void InitDefaultsmongo_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_mongo_default_instance_;
    new (ptr) ::db::mongo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::mongo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mongo_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmongo_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_create_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_create_default_instance_;
    new (ptr) ::db::sql_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_create_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_create_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_index_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_index_default_instance_;
    new (ptr) ::db::sql_index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_index::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_index_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_index_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_exec_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_exec_default_instance_;
    new (ptr) ::db::sql_exec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_exec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_exec_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_exec_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_insert_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_insert_default_instance_;
    new (ptr) ::db::sql_insert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_insert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_insert_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_insert_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_save_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_save_default_instance_;
    new (ptr) ::db::sql_save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_save_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_save_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_query_request_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_query_request_default_instance_;
    new (ptr) ::db::sql_query_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_query_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_query_request_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_query_request_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_query_page_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_query_page_default_instance_;
    new (ptr) ::db::sql_query_page();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_query_page::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_query_page_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_query_page_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_query_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_query_response_default_instance_;
    new (ptr) ::db::sql_query_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_query_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_query_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_query_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_query_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_query_default_instance_;
    new (ptr) ::db::sql_query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_query_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_query_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_del_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_del_default_instance_;
    new (ptr) ::db::sql_del();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_del::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_del_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_del_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_inc_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_inc_default_instance_;
    new (ptr) ::db::sql_inc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_inc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_inc_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_inc_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_update_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_update_default_instance_;
    new (ptr) ::db::sql_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_update_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_update_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_response_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_response_default_instance_;
    new (ptr) ::db::sql_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_response_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_response_s2s_2fdb_2eproto}, {}};

static void InitDefaultssql_s2s_2fdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_sql_default_instance_;
    new (ptr) ::db::sql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::sql::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_sql_s2s_2fdb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssql_s2s_2fdb_2eproto}, {}};

void InitDefaults_s2s_2fdb_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_insert_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_page_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_more_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_distinct_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_one_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_one_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_one_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_aggregate_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_aggregate_facet_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_aggregate_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_count_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_count_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_count_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_remove_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_index_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_updater_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_updates_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_update_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_inc_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_inc_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_inc_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_modify_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_modify_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_find_modify_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_command_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_merge_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_merge_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_merge_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mongo_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_create_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_index_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_exec_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_insert_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_save_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_query_request_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_query_page_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_query_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_query_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_del_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_inc_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_update_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_response_s2s_2fdb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sql_s2s_2fdb_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_s2s_2fdb_2eproto[49];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_s2s_2fdb_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_s2s_2fdb_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_s2s_2fdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_insert, documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, limit_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, page_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, count_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, sort_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_page, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_more, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_more, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_more, cursor_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_more, batchsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_distinct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_distinct, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_distinct, key_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_distinct, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_response, cursor_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_response, documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one_response, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_one, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, by_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, cmd_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, field_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_request, batchsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_facet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_facet, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_facet, _id_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_facet, group_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_facet, batchsize_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate_facet, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_aggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_request, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count_response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_count, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_remove, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, key_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, sort_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_index, unique_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, cmd_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_updater, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_updates, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, document_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_update, upsert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_request, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc_response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_inc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, filter_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, update_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify_response, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_find_modify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, tab_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, cmd_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_request, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command_response, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, field_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, source_),
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_request, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge_response, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo_merge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::mongo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_create, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_create, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_index, tab_),
  PROTOBUF_FIELD_OFFSET(::db::sql_index, name_),
  PROTOBUF_FIELD_OFFSET(::db::sql_index, sort_),
  PROTOBUF_FIELD_OFFSET(::db::sql_index, unique_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_exec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_exec, sql_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_insert, flag_),
  PROTOBUF_FIELD_OFFSET(::db::sql_insert, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_insert, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_save, flag_),
  PROTOBUF_FIELD_OFFSET(::db::sql_save, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_save, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_query_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_query_request, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_request, limit_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_request, filter_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_request, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, limit_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, filter_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, sorter_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, page_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_page, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_query_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_query_response, error_),
  PROTOBUF_FIELD_OFFSET(::db::sql_query_response, documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_del, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_del, flag_),
  PROTOBUF_FIELD_OFFSET(::db::sql_del, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_del, filter_),
  PROTOBUF_FIELD_OFFSET(::db::sql_del, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_inc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_inc, key_),
  PROTOBUF_FIELD_OFFSET(::db::sql_inc, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_update, flag_),
  PROTOBUF_FIELD_OFFSET(::db::sql_update, table_),
  PROTOBUF_FIELD_OFFSET(::db::sql_update, filter_),
  PROTOBUF_FIELD_OFFSET(::db::sql_update, document_),
  PROTOBUF_FIELD_OFFSET(::db::sql_update, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::sql_response, error_),
  PROTOBUF_FIELD_OFFSET(::db::sql_response, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::sql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db::mongo_insert)},
  { 7, -1, sizeof(::db::mongo_find_request)},
  { 16, -1, sizeof(::db::mongo_find_page)},
  { 27, -1, sizeof(::db::mongo_find_more)},
  { 35, -1, sizeof(::db::mongo_find_distinct)},
  { 43, -1, sizeof(::db::mongo_find_response)},
  { 50, -1, sizeof(::db::mongo_find)},
  { 55, -1, sizeof(::db::mongo_find_one_request)},
  { 63, -1, sizeof(::db::mongo_find_one_response)},
  { 69, -1, sizeof(::db::mongo_find_one)},
  { 74, -1, sizeof(::db::mongo_aggregate_request)},
  { 85, -1, sizeof(::db::mongo_aggregate_facet)},
  { 95, -1, sizeof(::db::mongo_aggregate)},
  { 100, -1, sizeof(::db::mongo_count_request)},
  { 107, -1, sizeof(::db::mongo_count_response)},
  { 113, -1, sizeof(::db::mongo_count)},
  { 118, -1, sizeof(::db::mongo_remove)},
  { 126, -1, sizeof(::db::mongo_index)},
  { 135, -1, sizeof(::db::mongo_updater)},
  { 143, -1, sizeof(::db::mongo_updates)},
  { 150, -1, sizeof(::db::mongo_update)},
  { 158, -1, sizeof(::db::mongo_response)},
  { 164, -1, sizeof(::db::mongo_inc_request)},
  { 170, -1, sizeof(::db::mongo_inc_response)},
  { 176, -1, sizeof(::db::mongo_inc)},
  { 181, -1, sizeof(::db::mongo_find_modify_request)},
  { 190, -1, sizeof(::db::mongo_find_modify_response)},
  { 196, -1, sizeof(::db::mongo_find_modify)},
  { 201, -1, sizeof(::db::mongo_command_request)},
  { 209, -1, sizeof(::db::mongo_command_response)},
  { 215, -1, sizeof(::db::mongo_command)},
  { 220, -1, sizeof(::db::mongo_merge_request)},
  { 228, -1, sizeof(::db::mongo_merge_response)},
  { 234, -1, sizeof(::db::mongo_merge)},
  { 239, -1, sizeof(::db::mongo)},
  { 244, -1, sizeof(::db::sql_create)},
  { 251, -1, sizeof(::db::sql_index)},
  { 260, -1, sizeof(::db::sql_exec)},
  { 266, -1, sizeof(::db::sql_insert)},
  { 274, -1, sizeof(::db::sql_save)},
  { 282, -1, sizeof(::db::sql_query_request)},
  { 291, -1, sizeof(::db::sql_query_page)},
  { 302, -1, sizeof(::db::sql_query_response)},
  { 309, -1, sizeof(::db::sql_query)},
  { 314, -1, sizeof(::db::sql_del)},
  { 323, -1, sizeof(::db::sql_inc)},
  { 330, -1, sizeof(::db::sql_update)},
  { 340, -1, sizeof(::db::sql_response)},
  { 347, -1, sizeof(::db::sql)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_insert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_page_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_more_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_distinct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_one_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_one_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_one_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_aggregate_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_aggregate_facet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_aggregate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_count_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_count_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_count_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_updater_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_updates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_inc_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_inc_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_inc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_modify_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_modify_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_find_modify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_merge_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_merge_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_merge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_mongo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_exec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_insert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_query_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_query_page_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_query_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_del_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_inc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_sql_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_s2s_2fdb_2eproto = {
  {}, AddDescriptors_s2s_2fdb_2eproto, "s2s/db.proto", schemas,
  file_default_instances, TableStruct_s2s_2fdb_2eproto::offsets,
  file_level_metadata_s2s_2fdb_2eproto, 49, file_level_enum_descriptors_s2s_2fdb_2eproto, file_level_service_descriptors_s2s_2fdb_2eproto,
};

const char descriptor_table_protodef_s2s_2fdb_2eproto[] =
  "\n\014s2s/db.proto\022\002db\"\262\013\n\005mongo\032(\n\006insert\022\013"
  "\n\003tab\030\001 \001(\t\022\021\n\tdocuments\030\002 \003(\t\032\312\002\n\004find\032"
  "E\n\007request\022\013\n\003tab\030\001 \001(\t\022\r\n\005limit\030\003 \001(\005\022\016"
  "\n\006filter\030\002 \001(\t\022\016\n\006fields\030\004 \003(\t\032^\n\004page\022\013"
  "\n\003tab\030\001 \001(\t\022\016\n\006filter\030\002 \001(\t\022\014\n\004page\030\003 \001("
  "\005\022\r\n\005count\030\004 \001(\005\022\014\n\004sort\030\006 \001(\t\022\016\n\006fields"
  "\030\005 \003(\t\0326\n\004more\022\013\n\003tab\030\001 \001(\t\022\016\n\006cursor\030\002 "
  "\001(\003\022\021\n\tbatchSize\030\003 \001(\005\0324\n\010distinct\022\013\n\003ta"
  "b\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\016\n\006filter\030\003 \001(\t\032-\n\010"
  "response\022\016\n\006cursor\030\001 \001(\003\022\021\n\tdocuments\030\002 "
  "\003(\014\032`\n\010find_one\0326\n\007request\022\013\n\003tab\030\001 \001(\t\022"
  "\016\n\006filter\030\002 \001(\t\022\016\n\006fields\030\003 \003(\t\032\034\n\010respo"
  "nse\022\020\n\010document\030\001 \001(\t\032\302\001\n\taggregate\032a\n\007r"
  "equest\022\013\n\003tab\030\001 \001(\t\022\n\n\002by\030\002 \001(\t\022\013\n\003cmd\030\005"
  " \001(\t\022\r\n\005field\030\003 \001(\t\022\016\n\006filter\030\004 \001(\t\022\021\n\tb"
  "atchSize\030\006 \001(\005\032R\n\005facet\022\013\n\003tab\030\001 \001(\t\022\013\n\003"
  "_id\030\002 \001(\t\022\r\n\005group\030\003 \001(\t\022\021\n\tbatchSize\030\004 "
  "\001(\005\022\r\n\005match\030\005 \003(\t\032J\n\005count\032&\n\007request\022\013"
  "\n\003tab\030\001 \001(\t\022\016\n\006filter\030\002 \001(\t\032\031\n\010response\022"
  "\r\n\005count\030\001 \001(\005\0324\n\006remove\022\013\n\003tab\030\001 \001(\t\022\016\n"
  "\006filter\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\032\?\n\005index\022\013\n"
  "\003tab\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\014\n\004sort\030\003 \001(\005\022\016\n"
  "\006unique\030\004 \001(\010\0328\n\007updater\022\013\n\003cmd\030\001 \001(\t\022\016\n"
  "\006filter\030\002 \001(\t\022\020\n\010document\030\003 \001(\t\032;\n\007updat"
  "es\022\013\n\003tab\030\001 \001(\t\022#\n\010document\030\002 \003(\0132\021.db.m"
  "ongo.updater\032J\n\006update\022\013\n\003tab\030\001 \001(\t\022#\n\010d"
  "ocument\030\002 \001(\0132\021.db.mongo.updater\022\016\n\006upse"
  "rt\030\003 \001(\010\032\031\n\010response\022\r\n\005count\030\001 \001(\005\0328\n\003i"
  "nc\032\026\n\007request\022\013\n\003key\030\001 \001(\t\032\031\n\010response\022\r"
  "\n\005value\030\001 \001(\005\032s\n\013find_modify\032F\n\007request\022"
  "\013\n\003tab\030\001 \001(\t\022\016\n\006filter\030\002 \001(\t\022\016\n\006update\030\003"
  " \001(\t\022\016\n\006fields\030\004 \003(\t\032\034\n\010response\022\020\n\010docu"
  "ment\030\001 \001(\t\032^\n\007command\0325\n\007request\022\013\n\003tab\030"
  "\001 \001(\t\022\013\n\003cmd\030\002 \001(\t\022\020\n\010document\030\003 \001(\t\032\034\n\010"
  "response\022\020\n\010document\030\001 \001(\t\032[\n\005merge\0328\n\007r"
  "equest\022\r\n\005field\030\001 \001(\t\022\016\n\006source\030\002 \001(\t\022\016\n"
  "\006target\030\003 \001(\t\032\030\n\010response\022\014\n\004uuid\030\001 \001(\t\""
  "\274\005\n\003sql\032%\n\006create\022\r\n\005table\030\001 \001(\t\022\014\n\004keys"
  "\030\002 \003(\t\032@\n\005index\022\013\n\003tab\030\001 \001(\t\022\014\n\004name\030\002 \001"
  "(\t\022\014\n\004sort\030\003 \001(\005\022\016\n\006unique\030\004 \001(\010\032\023\n\004exec"
  "\022\013\n\003sql\030\001 \001(\t\0327\n\006insert\022\014\n\004flag\030\001 \001(\005\022\r\n"
  "\005table\030\002 \001(\t\022\020\n\010document\030\003 \001(\t\0321\n\004save\022\014"
  "\n\004flag\030\001 \001(\005\022\r\n\005table\030\002 \001(\t\022\014\n\004data\030\003 \001("
  "\t\032\342\001\n\005query\032G\n\007request\022\r\n\005table\030\001 \001(\t\022\r\n"
  "\005limit\030\002 \001(\005\022\016\n\006filter\030\003 \001(\t\022\016\n\006fields\030\004"
  " \003(\t\032b\n\004page\022\r\n\005table\030\001 \001(\t\022\r\n\005limit\030\002 \001"
  "(\005\022\016\n\006filter\030\003 \001(\t\022\016\n\006sorter\030\004 \001(\t\022\014\n\004pa"
  "ge\030\005 \001(\005\022\016\n\006fields\030\006 \003(\t\032,\n\010response\022\r\n\005"
  "error\030\001 \001(\t\022\021\n\tdocuments\030\002 \003(\014\032A\n\003del\022\014\n"
  "\004flag\030\001 \001(\005\022\r\n\005table\030\002 \001(\t\022\016\n\006filter\030\003 \001"
  "(\t\022\r\n\005limit\030\004 \001(\005\032!\n\003inc\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005count\030\002 \001(\005\032V\n\006update\022\014\n\004flag\030\001 \001(\005\022\r\n\005"
  "table\030\002 \001(\t\022\016\n\006filter\030\003 \001(\t\022\020\n\010document\030"
  "\004 \001(\t\022\r\n\005limit\030\005 \001(\005\032(\n\010response\022\r\n\005erro"
  "r\030\001 \001(\t\022\r\n\005count\030\002 \001(\rb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_s2s_2fdb_2eproto = {
  false, InitDefaults_s2s_2fdb_2eproto, 
  descriptor_table_protodef_s2s_2fdb_2eproto,
  "s2s/db.proto", &assign_descriptors_table_s2s_2fdb_2eproto, 2190,
};

void AddDescriptors_s2s_2fdb_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_s2s_2fdb_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_s2s_2fdb_2eproto = []() { AddDescriptors_s2s_2fdb_2eproto(); return true; }();
namespace db {

// ===================================================================

void mongo_insert::InitAsDefaultInstance() {
}
class mongo_insert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_insert::kTabFieldNumber;
const int mongo_insert::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_insert::mongo_insert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.insert)
}
mongo_insert::mongo_insert(const mongo_insert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.insert)
}

void mongo_insert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_insert_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_insert::~mongo_insert() {
  // @@protoc_insertion_point(destructor:db.mongo.insert)
  SharedDtor();
}

void mongo_insert::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_insert& mongo_insert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_insert_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_insert::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_insert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_insert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.insert.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string documents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.insert.documents");
          object = msg->add_documents();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.insert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.insert.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_documents()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->documents(this->documents_size() - 1).data(),
            static_cast<int>(this->documents(this->documents_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.insert.documents"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.insert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.insert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // repeated string documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.documents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->documents(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.insert)
}

::google::protobuf::uint8* mongo_insert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // repeated string documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.insert.documents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->documents(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.insert)
  return target;
}

size_t mongo_insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.insert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string documents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_size());
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->documents(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_insert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_insert* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.insert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.insert)
    MergeFrom(*source);
  }
}

void mongo_insert::MergeFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
}

void mongo_insert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_insert::CopyFrom(const mongo_insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_insert::IsInitialized() const {
  return true;
}

void mongo_insert::Swap(mongo_insert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_insert::InternalSwap(mongo_insert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  documents_.InternalSwap(CastToBase(&other->documents_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_insert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_request::InitAsDefaultInstance() {
}
class mongo_find_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_request::kTabFieldNumber;
const int mongo_find_request::kLimitFieldNumber;
const int mongo_find_request::kFilterFieldNumber;
const int mongo_find_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_request::mongo_find_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.request)
}
mongo_find_request::mongo_find_request(const mongo_find_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.request)
}

void mongo_find_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_find_request::~mongo_find_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find.request)
  SharedDtor();
}

void mongo_find_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_request& mongo_find_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.request)
}

::google::protobuf::uint8* mongo_find_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.request)
  return target;
}

size_t mongo_find_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.request)
    MergeFrom(*source);
  }
}

void mongo_find_request::MergeFrom(const mongo_find_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_find_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_request::CopyFrom(const mongo_find_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_request::IsInitialized() const {
  return true;
}

void mongo_find_request::Swap(mongo_find_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_request::InternalSwap(mongo_find_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_find_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_page::InitAsDefaultInstance() {
}
class mongo_find_page::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_page::kTabFieldNumber;
const int mongo_find_page::kFilterFieldNumber;
const int mongo_find_page::kPageFieldNumber;
const int mongo_find_page::kCountFieldNumber;
const int mongo_find_page::kSortFieldNumber;
const int mongo_find_page::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_page::mongo_find_page()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.page)
}
mongo_find_page::mongo_find_page(const mongo_find_page& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  sort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sort().size() > 0) {
    sort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_);
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&page_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.page)
}

void mongo_find_page::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_page_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_)) + sizeof(count_));
}

mongo_find_page::~mongo_find_page() {
  // @@protoc_insertion_point(destructor:db.mongo.find.page)
  SharedDtor();
}

void mongo_find_page::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_page::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_page& mongo_find_page::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_page_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_page::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_page::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_page*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.page.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.page.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string fields = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find.page.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // string sort = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.page.sort");
        object = msg->mutable_sort();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.page)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.page.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.page.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.page.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sort = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sort().data(), static_cast<int>(this->sort().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.page.sort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.page)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // int32 page = 3;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // repeated string fields = 5;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fields(i), output);
  }

  // string sort = 6;
  if (this->sort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sort().data(), static_cast<int>(this->sort().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.sort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sort(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.page)
}

::google::protobuf::uint8* mongo_find_page::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // int32 page = 3;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // repeated string fields = 5;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->fields(i), target);
  }

  // string sort = 6;
  if (this->sort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sort().data(), static_cast<int>(this->sort().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.page.sort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sort(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.page)
  return target;
}

size_t mongo_find_page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.page)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string sort = 6;
  if (this->sort().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sort());
  }

  // int32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page());
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.page)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_page* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_page>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.page)
    MergeFrom(*source);
  }
}

void mongo_find_page::MergeFrom(const mongo_find_page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.sort().size() > 0) {

    sort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_);
  }
  if (from.page() != 0) {
    set_page(from.page());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void mongo_find_page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_page::CopyFrom(const mongo_find_page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_page::IsInitialized() const {
  return true;
}

void mongo_find_page::Swap(mongo_find_page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_page::InternalSwap(mongo_find_page* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sort_.Swap(&other->sort_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_, other->page_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata mongo_find_page::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_more::InitAsDefaultInstance() {
}
class mongo_find_more::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_more::kTabFieldNumber;
const int mongo_find_more::kCursorFieldNumber;
const int mongo_find_more::kBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_more::mongo_find_more()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.more)
}
mongo_find_more::mongo_find_more(const mongo_find_more& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  ::memcpy(&cursor_, &from.cursor_,
    static_cast<size_t>(reinterpret_cast<char*>(&batchsize_) -
    reinterpret_cast<char*>(&cursor_)) + sizeof(batchsize_));
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.more)
}

void mongo_find_more::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_more_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batchsize_) -
      reinterpret_cast<char*>(&cursor_)) + sizeof(batchsize_));
}

mongo_find_more::~mongo_find_more() {
  // @@protoc_insertion_point(destructor:db.mongo.find.more)
  SharedDtor();
}

void mongo_find_more::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_more::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_more& mongo_find_more::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_more_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_more::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.more)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batchsize_) -
      reinterpret_cast<char*>(&cursor_)) + sizeof(batchsize_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_more::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_more*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.more.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 cursor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cursor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 batchSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_batchsize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_more::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.more)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.more.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batchSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.more)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.more)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_more::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.more)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.more.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // int64 cursor = 2;
  if (this->cursor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cursor(), output);
  }

  // int32 batchSize = 3;
  if (this->batchsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->batchsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.more)
}

::google::protobuf::uint8* mongo_find_more::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.more)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.more.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // int64 cursor = 2;
  if (this->cursor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cursor(), target);
  }

  // int32 batchSize = 3;
  if (this->batchsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->batchsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.more)
  return target;
}

size_t mongo_find_more::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.more)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // int64 cursor = 2;
  if (this->cursor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cursor());
  }

  // int32 batchSize = 3;
  if (this->batchsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batchsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_more::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.more)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_more* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_more>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.more)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.more)
    MergeFrom(*source);
  }
}

void mongo_find_more::MergeFrom(const mongo_find_more& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.more)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.cursor() != 0) {
    set_cursor(from.cursor());
  }
  if (from.batchsize() != 0) {
    set_batchsize(from.batchsize());
  }
}

void mongo_find_more::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.more)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_more::CopyFrom(const mongo_find_more& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.more)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_more::IsInitialized() const {
  return true;
}

void mongo_find_more::Swap(mongo_find_more* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_more::InternalSwap(mongo_find_more* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cursor_, other->cursor_);
  swap(batchsize_, other->batchsize_);
}

::google::protobuf::Metadata mongo_find_more::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_distinct::InitAsDefaultInstance() {
}
class mongo_find_distinct::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_distinct::kTabFieldNumber;
const int mongo_find_distinct::kKeyFieldNumber;
const int mongo_find_distinct::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_distinct::mongo_find_distinct()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.distinct)
}
mongo_find_distinct::mongo_find_distinct(const mongo_find_distinct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.distinct)
}

void mongo_find_distinct::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_distinct_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_distinct::~mongo_find_distinct() {
  // @@protoc_insertion_point(destructor:db.mongo.find.distinct)
  SharedDtor();
}

void mongo_find_distinct::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_distinct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_distinct& mongo_find_distinct::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_distinct_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_distinct::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.distinct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_distinct::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_distinct*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.distinct.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.distinct.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find.distinct.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_distinct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.distinct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.distinct.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.distinct.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find.distinct.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.distinct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.distinct)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_distinct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.distinct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.distinct.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.distinct.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.distinct.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.distinct)
}

::google::protobuf::uint8* mongo_find_distinct::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.distinct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.distinct.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.distinct.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find.distinct.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.distinct)
  return target;
}

size_t mongo_find_distinct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.distinct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_distinct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.distinct)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_distinct* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_distinct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.distinct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.distinct)
    MergeFrom(*source);
  }
}

void mongo_find_distinct::MergeFrom(const mongo_find_distinct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.distinct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void mongo_find_distinct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.distinct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_distinct::CopyFrom(const mongo_find_distinct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.distinct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_distinct::IsInitialized() const {
  return true;
}

void mongo_find_distinct::Swap(mongo_find_distinct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_distinct::InternalSwap(mongo_find_distinct* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_distinct::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_response::InitAsDefaultInstance() {
}
class mongo_find_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_response::kCursorFieldNumber;
const int mongo_find_response::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_response::mongo_find_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find.response)
}
mongo_find_response::mongo_find_response(const mongo_find_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_ = from.cursor_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.find.response)
}

void mongo_find_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_response_s2s_2fdb_2eproto.base);
  cursor_ = PROTOBUF_LONGLONG(0);
}

mongo_find_response::~mongo_find_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find.response)
  SharedDtor();
}

void mongo_find_response::SharedDtor() {
}

void mongo_find_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_response& mongo_find_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  cursor_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 cursor = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cursor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes documents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_documents();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cursor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cursor = 1;
  if (this->cursor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cursor(), output);
  }

  // repeated bytes documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->documents(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find.response)
}

::google::protobuf::uint8* mongo_find_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cursor = 1;
  if (this->cursor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cursor(), target);
  }

  // repeated bytes documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->documents(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find.response)
  return target;
}

size_t mongo_find_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes documents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_size());
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->documents(i));
  }

  // int64 cursor = 1;
  if (this->cursor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find.response)
    MergeFrom(*source);
  }
}

void mongo_find_response::MergeFrom(const mongo_find_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (from.cursor() != 0) {
    set_cursor(from.cursor());
  }
}

void mongo_find_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_response::CopyFrom(const mongo_find_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_response::IsInitialized() const {
  return true;
}

void mongo_find_response::Swap(mongo_find_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_response::InternalSwap(mongo_find_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  documents_.InternalSwap(CastToBase(&other->documents_));
  swap(cursor_, other->cursor_);
}

::google::protobuf::Metadata mongo_find_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find::InitAsDefaultInstance() {
}
class mongo_find::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find::mongo_find()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find)
}
mongo_find::mongo_find(const mongo_find& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find)
}

void mongo_find::SharedCtor() {
}

mongo_find::~mongo_find() {
  // @@protoc_insertion_point(destructor:db.mongo.find)
  SharedDtor();
}

void mongo_find::SharedDtor() {
}

void mongo_find::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find& mongo_find::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find)
}

::google::protobuf::uint8* mongo_find::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find)
  return target;
}

size_t mongo_find::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find)
    MergeFrom(*source);
  }
}

void mongo_find::MergeFrom(const mongo_find& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find::CopyFrom(const mongo_find& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find::IsInitialized() const {
  return true;
}

void mongo_find::Swap(mongo_find* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find::InternalSwap(mongo_find* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_one_request::InitAsDefaultInstance() {
}
class mongo_find_one_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_one_request::kTabFieldNumber;
const int mongo_find_one_request::kFilterFieldNumber;
const int mongo_find_one_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_one_request::mongo_find_one_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_one.request)
}
mongo_find_one_request::mongo_find_one_request(const mongo_find_one_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_one.request)
}

void mongo_find_one_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_one_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_one_request::~mongo_find_one_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find_one.request)
  SharedDtor();
}

void mongo_find_one_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_one_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_one_request& mongo_find_one_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_one_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_one_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_one.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_one_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_one_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_one.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_one.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find_one.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_one_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_one.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_one.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_one.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_one_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_one.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_one.request)
}

::google::protobuf::uint8* mongo_find_one_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_one.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_one.request)
  return target;
}

size_t mongo_find_one_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_one.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_one_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_one.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_one_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_one_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_one.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_one.request)
    MergeFrom(*source);
  }
}

void mongo_find_one_request::MergeFrom(const mongo_find_one_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_one.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void mongo_find_one_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_one.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_one_request::CopyFrom(const mongo_find_one_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_one.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_one_request::IsInitialized() const {
  return true;
}

void mongo_find_one_request::Swap(mongo_find_one_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_one_request::InternalSwap(mongo_find_one_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_one_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_one_response::InitAsDefaultInstance() {
}
class mongo_find_one_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_one_response::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_one_response::mongo_find_one_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_one.response)
}
mongo_find_one_response::mongo_find_one_response(const mongo_find_one_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_one.response)
}

void mongo_find_one_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_one_response_s2s_2fdb_2eproto.base);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_one_response::~mongo_find_one_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find_one.response)
  SharedDtor();
}

void mongo_find_one_response::SharedDtor() {
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_one_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_one_response& mongo_find_one_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_one_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_one_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_one.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_one_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_one_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string document = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_one.response.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_one_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_one.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_one.response.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_one.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_one.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_one_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_one.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.response.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_one.response)
}

::google::protobuf::uint8* mongo_find_one_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_one.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_one.response.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_one.response)
  return target;
}

size_t mongo_find_one_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_one.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_one_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_one.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_one_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_one_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_one.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_one.response)
    MergeFrom(*source);
  }
}

void mongo_find_one_response::MergeFrom(const mongo_find_one_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_one.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
}

void mongo_find_one_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_one.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_one_response::CopyFrom(const mongo_find_one_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_one.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_one_response::IsInitialized() const {
  return true;
}

void mongo_find_one_response::Swap(mongo_find_one_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_one_response::InternalSwap(mongo_find_one_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_one_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_one::InitAsDefaultInstance() {
}
class mongo_find_one::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_one::mongo_find_one()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_one)
}
mongo_find_one::mongo_find_one(const mongo_find_one& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_one)
}

void mongo_find_one::SharedCtor() {
}

mongo_find_one::~mongo_find_one() {
  // @@protoc_insertion_point(destructor:db.mongo.find_one)
  SharedDtor();
}

void mongo_find_one::SharedDtor() {
}

void mongo_find_one::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_one& mongo_find_one::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_one_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_one::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_one)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_one::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_one*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_one::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_one)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_one)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_one)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_one::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_one)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_one)
}

::google::protobuf::uint8* mongo_find_one::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_one)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_one)
  return target;
}

size_t mongo_find_one::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_one)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_one::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_one)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_one* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_one>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_one)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_one)
    MergeFrom(*source);
  }
}

void mongo_find_one::MergeFrom(const mongo_find_one& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_one)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find_one::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_one)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_one::CopyFrom(const mongo_find_one& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_one)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_one::IsInitialized() const {
  return true;
}

void mongo_find_one::Swap(mongo_find_one* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_one::InternalSwap(mongo_find_one* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find_one::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_aggregate_request::InitAsDefaultInstance() {
}
class mongo_aggregate_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_aggregate_request::kTabFieldNumber;
const int mongo_aggregate_request::kByFieldNumber;
const int mongo_aggregate_request::kCmdFieldNumber;
const int mongo_aggregate_request::kFieldFieldNumber;
const int mongo_aggregate_request::kFilterFieldNumber;
const int mongo_aggregate_request::kBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_aggregate_request::mongo_aggregate_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.aggregate.request)
}
mongo_aggregate_request::mongo_aggregate_request(const mongo_aggregate_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.by().size() > 0) {
    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  batchsize_ = from.batchsize_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.aggregate.request)
}

void mongo_aggregate_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_aggregate_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchsize_ = 0;
}

mongo_aggregate_request::~mongo_aggregate_request() {
  // @@protoc_insertion_point(destructor:db.mongo.aggregate.request)
  SharedDtor();
}

void mongo_aggregate_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_aggregate_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_aggregate_request& mongo_aggregate_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_aggregate_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_aggregate_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.aggregate.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchsize_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_aggregate_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_aggregate_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string by = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.request.by");
        object = msg->mutable_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string field = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.request.field");
        object = msg->mutable_field();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cmd = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.request.cmd");
        object = msg->mutable_cmd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 batchSize = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_batchsize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_aggregate_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.aggregate.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string by = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->by().data(), static_cast<int>(this->by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.request.by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.request.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.request.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batchSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.aggregate.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.aggregate.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_aggregate_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.aggregate.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string by = 2;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->by(), output);
  }

  // string field = 3;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->field(), output);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  // string cmd = 5;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cmd(), output);
  }

  // int32 batchSize = 6;
  if (this->batchsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->batchsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.aggregate.request)
}

::google::protobuf::uint8* mongo_aggregate_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.aggregate.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string by = 2;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->by(), target);
  }

  // string field = 3;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->field(), target);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  // string cmd = 5;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.request.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cmd(), target);
  }

  // int32 batchSize = 6;
  if (this->batchsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->batchsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.aggregate.request)
  return target;
}

size_t mongo_aggregate_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.aggregate.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string by = 2;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // string field = 3;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string cmd = 5;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // int32 batchSize = 6;
  if (this->batchsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batchsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_aggregate_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.aggregate.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_aggregate_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_aggregate_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.aggregate.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.aggregate.request)
    MergeFrom(*source);
  }
}

void mongo_aggregate_request::MergeFrom(const mongo_aggregate_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.aggregate.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.by().size() > 0) {

    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.batchsize() != 0) {
    set_batchsize(from.batchsize());
  }
}

void mongo_aggregate_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.aggregate.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_aggregate_request::CopyFrom(const mongo_aggregate_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.aggregate.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_aggregate_request::IsInitialized() const {
  return true;
}

void mongo_aggregate_request::Swap(mongo_aggregate_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_aggregate_request::InternalSwap(mongo_aggregate_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  by_.Swap(&other->by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_.Swap(&other->field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmd_.Swap(&other->cmd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batchsize_, other->batchsize_);
}

::google::protobuf::Metadata mongo_aggregate_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_aggregate_facet::InitAsDefaultInstance() {
}
class mongo_aggregate_facet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_aggregate_facet::kTabFieldNumber;
const int mongo_aggregate_facet::kIdFieldNumber;
const int mongo_aggregate_facet::kGroupFieldNumber;
const int mongo_aggregate_facet::kBatchSizeFieldNumber;
const int mongo_aggregate_facet::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_aggregate_facet::mongo_aggregate_facet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.aggregate.facet)
}
mongo_aggregate_facet::mongo_aggregate_facet(const mongo_aggregate_facet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      match_(from.match_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  _id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from._id().size() > 0) {
    _id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._id_);
  }
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  batchsize_ = from.batchsize_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.aggregate.facet)
}

void mongo_aggregate_facet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_aggregate_facet_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchsize_ = 0;
}

mongo_aggregate_facet::~mongo_aggregate_facet() {
  // @@protoc_insertion_point(destructor:db.mongo.aggregate.facet)
  SharedDtor();
}

void mongo_aggregate_facet::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_aggregate_facet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_aggregate_facet& mongo_aggregate_facet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_aggregate_facet_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_aggregate_facet::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.aggregate.facet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchsize_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_aggregate_facet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_aggregate_facet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.facet.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string _id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.facet._id");
        object = msg->mutable__id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.facet.group");
        object = msg->mutable_group();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 batchSize = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_batchsize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string match = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.aggregate.facet.match");
          object = msg->add_match();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_aggregate_facet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.aggregate.facet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.facet.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string _id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->_id().data(), static_cast<int>(this->_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.facet._id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.facet.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batchSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string match = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_match()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match(this->match_size() - 1).data(),
            static_cast<int>(this->match(this->match_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.aggregate.facet.match"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.aggregate.facet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.aggregate.facet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_aggregate_facet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.aggregate.facet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string _id = 2;
  if (this->_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->_id().data(), static_cast<int>(this->_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet._id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->_id(), output);
  }

  // string group = 3;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group(), output);
  }

  // int32 batchSize = 4;
  if (this->batchsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->batchsize(), output);
  }

  // repeated string match = 5;
  for (int i = 0, n = this->match_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match(i).data(), static_cast<int>(this->match(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet.match");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->match(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.aggregate.facet)
}

::google::protobuf::uint8* mongo_aggregate_facet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.aggregate.facet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string _id = 2;
  if (this->_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->_id().data(), static_cast<int>(this->_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet._id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_id(), target);
  }

  // string group = 3;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group(), target);
  }

  // int32 batchSize = 4;
  if (this->batchsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->batchsize(), target);
  }

  // repeated string match = 5;
  for (int i = 0, n = this->match_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match(i).data(), static_cast<int>(this->match(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.aggregate.facet.match");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->match(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.aggregate.facet)
  return target;
}

size_t mongo_aggregate_facet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.aggregate.facet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->match_size());
  for (int i = 0, n = this->match_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->match(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string _id = 2;
  if (this->_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->_id());
  }

  // string group = 3;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // int32 batchSize = 4;
  if (this->batchsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batchsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_aggregate_facet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.aggregate.facet)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_aggregate_facet* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_aggregate_facet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.aggregate.facet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.aggregate.facet)
    MergeFrom(*source);
  }
}

void mongo_aggregate_facet::MergeFrom(const mongo_aggregate_facet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.aggregate.facet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from._id().size() > 0) {

    _id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._id_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.batchsize() != 0) {
    set_batchsize(from.batchsize());
  }
}

void mongo_aggregate_facet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.aggregate.facet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_aggregate_facet::CopyFrom(const mongo_aggregate_facet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.aggregate.facet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_aggregate_facet::IsInitialized() const {
  return true;
}

void mongo_aggregate_facet::Swap(mongo_aggregate_facet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_aggregate_facet::InternalSwap(mongo_aggregate_facet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  match_.InternalSwap(CastToBase(&other->match_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _id_.Swap(&other->_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batchsize_, other->batchsize_);
}

::google::protobuf::Metadata mongo_aggregate_facet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_aggregate::InitAsDefaultInstance() {
}
class mongo_aggregate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_aggregate::mongo_aggregate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.aggregate)
}
mongo_aggregate::mongo_aggregate(const mongo_aggregate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.aggregate)
}

void mongo_aggregate::SharedCtor() {
}

mongo_aggregate::~mongo_aggregate() {
  // @@protoc_insertion_point(destructor:db.mongo.aggregate)
  SharedDtor();
}

void mongo_aggregate::SharedDtor() {
}

void mongo_aggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_aggregate& mongo_aggregate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_aggregate_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.aggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_aggregate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_aggregate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_aggregate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.aggregate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.aggregate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.aggregate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_aggregate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.aggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.aggregate)
}

::google::protobuf::uint8* mongo_aggregate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.aggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.aggregate)
  return target;
}

size_t mongo_aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.aggregate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_aggregate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_aggregate* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_aggregate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.aggregate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.aggregate)
    MergeFrom(*source);
  }
}

void mongo_aggregate::MergeFrom(const mongo_aggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_aggregate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_aggregate::CopyFrom(const mongo_aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_aggregate::IsInitialized() const {
  return true;
}

void mongo_aggregate::Swap(mongo_aggregate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_aggregate::InternalSwap(mongo_aggregate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_aggregate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_count_request::InitAsDefaultInstance() {
}
class mongo_count_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_count_request::kTabFieldNumber;
const int mongo_count_request::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_count_request::mongo_count_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.count.request)
}
mongo_count_request::mongo_count_request(const mongo_count_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.count.request)
}

void mongo_count_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_count_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_count_request::~mongo_count_request() {
  // @@protoc_insertion_point(destructor:db.mongo.count.request)
  SharedDtor();
}

void mongo_count_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_count_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_count_request& mongo_count_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_count_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_count_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.count.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_count_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_count_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.count.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.count.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_count_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.count.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.count.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.count.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.count.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.count.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_count_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.count.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.count.request)
}

::google::protobuf::uint8* mongo_count_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.count.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.count.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.count.request)
  return target;
}

size_t mongo_count_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.count.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_count_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.count.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_count_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_count_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.count.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.count.request)
    MergeFrom(*source);
  }
}

void mongo_count_request::MergeFrom(const mongo_count_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.count.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void mongo_count_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.count.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_count_request::CopyFrom(const mongo_count_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.count.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_count_request::IsInitialized() const {
  return true;
}

void mongo_count_request::Swap(mongo_count_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_count_request::InternalSwap(mongo_count_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_count_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_count_response::InitAsDefaultInstance() {
}
class mongo_count_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_count_response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_count_response::mongo_count_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.count.response)
}
mongo_count_response::mongo_count_response(const mongo_count_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.count.response)
}

void mongo_count_response::SharedCtor() {
  count_ = 0;
}

mongo_count_response::~mongo_count_response() {
  // @@protoc_insertion_point(destructor:db.mongo.count.response)
  SharedDtor();
}

void mongo_count_response::SharedDtor() {
}

void mongo_count_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_count_response& mongo_count_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_count_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_count_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.count.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_count_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_count_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_count_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.count.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.count.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.count.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_count_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.count.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.count.response)
}

::google::protobuf::uint8* mongo_count_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.count.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.count.response)
  return target;
}

size_t mongo_count_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.count.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_count_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.count.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_count_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_count_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.count.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.count.response)
    MergeFrom(*source);
  }
}

void mongo_count_response::MergeFrom(const mongo_count_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.count.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void mongo_count_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.count.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_count_response::CopyFrom(const mongo_count_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.count.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_count_response::IsInitialized() const {
  return true;
}

void mongo_count_response::Swap(mongo_count_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_count_response::InternalSwap(mongo_count_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata mongo_count_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_count::InitAsDefaultInstance() {
}
class mongo_count::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_count::mongo_count()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.count)
}
mongo_count::mongo_count(const mongo_count& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.count)
}

void mongo_count::SharedCtor() {
}

mongo_count::~mongo_count() {
  // @@protoc_insertion_point(destructor:db.mongo.count)
  SharedDtor();
}

void mongo_count::SharedDtor() {
}

void mongo_count::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_count& mongo_count::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_count_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_count::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_count::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_count*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.count)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.count)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.count)
}

::google::protobuf::uint8* mongo_count::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.count)
  return target;
}

size_t mongo_count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.count)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_count::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.count)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_count* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_count>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.count)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.count)
    MergeFrom(*source);
  }
}

void mongo_count::MergeFrom(const mongo_count& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.count)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_count::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_count::CopyFrom(const mongo_count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_count::IsInitialized() const {
  return true;
}

void mongo_count::Swap(mongo_count* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_count::InternalSwap(mongo_count* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_count::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_remove::InitAsDefaultInstance() {
}
class mongo_remove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_remove::kTabFieldNumber;
const int mongo_remove::kFilterFieldNumber;
const int mongo_remove::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_remove::mongo_remove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.remove)
}
mongo_remove::mongo_remove(const mongo_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.remove)
}

void mongo_remove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_remove_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

mongo_remove::~mongo_remove() {
  // @@protoc_insertion_point(destructor:db.mongo.remove)
  SharedDtor();
}

void mongo_remove::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_remove& mongo_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_remove_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_remove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.remove.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.remove.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.remove.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.remove.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.remove)
}

::google::protobuf::uint8* mongo_remove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.remove.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.remove)
  return target;
}

size_t mongo_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_remove* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_remove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.remove)
    MergeFrom(*source);
  }
}

void mongo_remove::MergeFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void mongo_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_remove::CopyFrom(const mongo_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_remove::IsInitialized() const {
  return true;
}

void mongo_remove::Swap(mongo_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_remove::InternalSwap(mongo_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata mongo_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_index::InitAsDefaultInstance() {
}
class mongo_index::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_index::kTabFieldNumber;
const int mongo_index::kKeyFieldNumber;
const int mongo_index::kSortFieldNumber;
const int mongo_index::kUniqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_index::mongo_index()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.index)
}
mongo_index::mongo_index(const mongo_index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&sort_, &from.sort_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:db.mongo.index)
}

void mongo_index::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_index_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
}

mongo_index::~mongo_index() {
  // @@protoc_insertion_point(destructor:db.mongo.index)
  SharedDtor();
}

void mongo_index::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_index& mongo_index::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_index_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_index::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_index::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_index*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.index.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.index.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 sort = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sort(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool unique = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unique(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.index)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.index.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.index.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.index)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sort(), output);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unique(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.index)
}

::google::protobuf::uint8* mongo_index::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.index.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sort(), target);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unique(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.index)
  return target;
}

size_t mongo_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sort());
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.index)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_index* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_index>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.index)
    MergeFrom(*source);
  }
}

void mongo_index::MergeFrom(const mongo_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.sort() != 0) {
    set_sort(from.sort());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
}

void mongo_index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_index::CopyFrom(const mongo_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_index::IsInitialized() const {
  return true;
}

void mongo_index::Swap(mongo_index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_index::InternalSwap(mongo_index* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_, other->sort_);
  swap(unique_, other->unique_);
}

::google::protobuf::Metadata mongo_index::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_updater::InitAsDefaultInstance() {
}
class mongo_updater::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_updater::kCmdFieldNumber;
const int mongo_updater::kFilterFieldNumber;
const int mongo_updater::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_updater::mongo_updater()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.updater)
}
mongo_updater::mongo_updater(const mongo_updater& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.updater)
}

void mongo_updater::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_updater_s2s_2fdb_2eproto.base);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_updater::~mongo_updater() {
  // @@protoc_insertion_point(destructor:db.mongo.updater)
  SharedDtor();
}

void mongo_updater::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_updater::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_updater& mongo_updater::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_updater_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_updater::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.updater)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_updater::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_updater*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cmd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updater.cmd");
        object = msg->mutable_cmd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updater.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string document = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updater.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_updater::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.updater)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updater.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updater.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string document = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updater.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.updater)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.updater)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_updater::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.updater)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // string document = 3;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.updater)
}

::google::protobuf::uint8* mongo_updater::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.updater)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // string document = 3;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updater.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.updater)
  return target;
}

size_t mongo_updater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.updater)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string document = 3;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_updater::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.updater)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_updater* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_updater>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.updater)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.updater)
    MergeFrom(*source);
  }
}

void mongo_updater::MergeFrom(const mongo_updater& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.updater)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
}

void mongo_updater::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.updater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_updater::CopyFrom(const mongo_updater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.updater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_updater::IsInitialized() const {
  return true;
}

void mongo_updater::Swap(mongo_updater* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_updater::InternalSwap(mongo_updater* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmd_.Swap(&other->cmd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_updater::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_updates::InitAsDefaultInstance() {
}
class mongo_updates::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_updates::kTabFieldNumber;
const int mongo_updates::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_updates::mongo_updates()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.updates)
}
mongo_updates::mongo_updates(const mongo_updates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      document_(from.document_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.updates)
}

void mongo_updates::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_updates_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_updates::~mongo_updates() {
  // @@protoc_insertion_point(destructor:db.mongo.updates)
  SharedDtor();
}

void mongo_updates::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_updates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_updates& mongo_updates::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_updates_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_updates::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.updates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_updates::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_updates*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.updates.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .db.mongo.updater document = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::db::mongo_updater::_InternalParse;
          object = msg->add_document();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_updates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.updates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.updates.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .db.mongo.updater document = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.updates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.updates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_updates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.updates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updates.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // repeated .db.mongo.updater document = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->document(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.updates)
}

::google::protobuf::uint8* mongo_updates::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.updates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.updates.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // repeated .db.mongo.updater document = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->document(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.updates)
  return target;
}

size_t mongo_updates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.updates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .db.mongo.updater document = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->document_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->document(static_cast<int>(i)));
    }
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_updates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.updates)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_updates* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_updates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.updates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.updates)
    MergeFrom(*source);
  }
}

void mongo_updates::MergeFrom(const mongo_updates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.updates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  document_.MergeFrom(from.document_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
}

void mongo_updates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.updates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_updates::CopyFrom(const mongo_updates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.updates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_updates::IsInitialized() const {
  return true;
}

void mongo_updates::Swap(mongo_updates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_updates::InternalSwap(mongo_updates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&document_)->InternalSwap(CastToBase(&other->document_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_updates::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_update::InitAsDefaultInstance() {
  ::db::_mongo_update_default_instance_._instance.get_mutable()->document_ = const_cast< ::db::mongo_updater*>(
      ::db::mongo_updater::internal_default_instance());
}
class mongo_update::HasBitSetters {
 public:
  static const ::db::mongo_updater& document(const mongo_update* msg);
};

const ::db::mongo_updater&
mongo_update::HasBitSetters::document(const mongo_update* msg) {
  return *msg->document_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_update::kTabFieldNumber;
const int mongo_update::kDocumentFieldNumber;
const int mongo_update::kUpsertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_update::mongo_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.update)
}
mongo_update::mongo_update(const mongo_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.has_document()) {
    document_ = new ::db::mongo_updater(*from.document_);
  } else {
    document_ = nullptr;
  }
  upsert_ = from.upsert_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.update)
}

void mongo_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_update_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&document_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upsert_) -
      reinterpret_cast<char*>(&document_)) + sizeof(upsert_));
}

mongo_update::~mongo_update() {
  // @@protoc_insertion_point(destructor:db.mongo.update)
  SharedDtor();
}

void mongo_update::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
}

void mongo_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_update& mongo_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_update_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_update::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  upsert_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.update.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .db.mongo.updater document = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::db::mongo_updater::_InternalParse;
        object = msg->mutable_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool upsert = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_upsert(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.update.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .db.mongo.updater document = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upsert = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upsert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // .db.mongo.updater document = 2;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::document(this), output);
  }

  // bool upsert = 3;
  if (this->upsert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->upsert(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.update)
}

::google::protobuf::uint8* mongo_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.update.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // .db.mongo.updater document = 2;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::document(this), target);
  }

  // bool upsert = 3;
  if (this->upsert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->upsert(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.update)
  return target;
}

size_t mongo_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // .db.mongo.updater document = 2;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // bool upsert = 3;
  if (this->upsert() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_update* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.update)
    MergeFrom(*source);
  }
}

void mongo_update::MergeFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.has_document()) {
    mutable_document()->::db::mongo_updater::MergeFrom(from.document());
  }
  if (from.upsert() != 0) {
    set_upsert(from.upsert());
  }
}

void mongo_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_update::CopyFrom(const mongo_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_update::IsInitialized() const {
  return true;
}

void mongo_update::Swap(mongo_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_update::InternalSwap(mongo_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(document_, other->document_);
  swap(upsert_, other->upsert_);
}

::google::protobuf::Metadata mongo_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_response::InitAsDefaultInstance() {
}
class mongo_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_response::mongo_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.response)
}
mongo_response::mongo_response(const mongo_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.response)
}

void mongo_response::SharedCtor() {
  count_ = 0;
}

mongo_response::~mongo_response() {
  // @@protoc_insertion_point(destructor:db.mongo.response)
  SharedDtor();
}

void mongo_response::SharedDtor() {
}

void mongo_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_response& mongo_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.response)
}

::google::protobuf::uint8* mongo_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.response)
  return target;
}

size_t mongo_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.response)
    MergeFrom(*source);
  }
}

void mongo_response::MergeFrom(const mongo_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void mongo_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_response::CopyFrom(const mongo_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_response::IsInitialized() const {
  return true;
}

void mongo_response::Swap(mongo_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_response::InternalSwap(mongo_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata mongo_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_inc_request::InitAsDefaultInstance() {
}
class mongo_inc_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_inc_request::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_inc_request::mongo_inc_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.inc.request)
}
mongo_inc_request::mongo_inc_request(const mongo_inc_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.inc.request)
}

void mongo_inc_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_inc_request_s2s_2fdb_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_inc_request::~mongo_inc_request() {
  // @@protoc_insertion_point(destructor:db.mongo.inc.request)
  SharedDtor();
}

void mongo_inc_request::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_inc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_inc_request& mongo_inc_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_inc_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_inc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.inc.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_inc_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_inc_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.inc.request.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_inc_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.inc.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.inc.request.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.inc.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.inc.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_inc_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.inc.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.inc.request.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.inc.request)
}

::google::protobuf::uint8* mongo_inc_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.inc.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.inc.request.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.inc.request)
  return target;
}

size_t mongo_inc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.inc.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_inc_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.inc.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_inc_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_inc_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.inc.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.inc.request)
    MergeFrom(*source);
  }
}

void mongo_inc_request::MergeFrom(const mongo_inc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.inc.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void mongo_inc_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.inc.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_inc_request::CopyFrom(const mongo_inc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.inc.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_inc_request::IsInitialized() const {
  return true;
}

void mongo_inc_request::Swap(mongo_inc_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_inc_request::InternalSwap(mongo_inc_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_inc_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_inc_response::InitAsDefaultInstance() {
}
class mongo_inc_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_inc_response::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_inc_response::mongo_inc_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.inc.response)
}
mongo_inc_response::mongo_inc_response(const mongo_inc_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:db.mongo.inc.response)
}

void mongo_inc_response::SharedCtor() {
  value_ = 0;
}

mongo_inc_response::~mongo_inc_response() {
  // @@protoc_insertion_point(destructor:db.mongo.inc.response)
  SharedDtor();
}

void mongo_inc_response::SharedDtor() {
}

void mongo_inc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_inc_response& mongo_inc_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_inc_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_inc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.inc.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_inc_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_inc_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_inc_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.inc.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.inc.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.inc.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_inc_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.inc.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.inc.response)
}

::google::protobuf::uint8* mongo_inc_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.inc.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.inc.response)
  return target;
}

size_t mongo_inc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.inc.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_inc_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.inc.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_inc_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_inc_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.inc.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.inc.response)
    MergeFrom(*source);
  }
}

void mongo_inc_response::MergeFrom(const mongo_inc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.inc.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void mongo_inc_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.inc.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_inc_response::CopyFrom(const mongo_inc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.inc.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_inc_response::IsInitialized() const {
  return true;
}

void mongo_inc_response::Swap(mongo_inc_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_inc_response::InternalSwap(mongo_inc_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata mongo_inc_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_inc::InitAsDefaultInstance() {
}
class mongo_inc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_inc::mongo_inc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.inc)
}
mongo_inc::mongo_inc(const mongo_inc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.inc)
}

void mongo_inc::SharedCtor() {
}

mongo_inc::~mongo_inc() {
  // @@protoc_insertion_point(destructor:db.mongo.inc)
  SharedDtor();
}

void mongo_inc::SharedDtor() {
}

void mongo_inc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_inc& mongo_inc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_inc_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_inc::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_inc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_inc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_inc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.inc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.inc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.inc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_inc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.inc)
}

::google::protobuf::uint8* mongo_inc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.inc)
  return target;
}

size_t mongo_inc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.inc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_inc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.inc)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_inc* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_inc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.inc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.inc)
    MergeFrom(*source);
  }
}

void mongo_inc::MergeFrom(const mongo_inc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.inc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_inc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.inc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_inc::CopyFrom(const mongo_inc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.inc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_inc::IsInitialized() const {
  return true;
}

void mongo_inc::Swap(mongo_inc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_inc::InternalSwap(mongo_inc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_inc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_modify_request::InitAsDefaultInstance() {
}
class mongo_find_modify_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_modify_request::kTabFieldNumber;
const int mongo_find_modify_request::kFilterFieldNumber;
const int mongo_find_modify_request::kUpdateFieldNumber;
const int mongo_find_modify_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_modify_request::mongo_find_modify_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_modify.request)
}
mongo_find_modify_request::mongo_find_modify_request(const mongo_find_modify_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update().size() > 0) {
    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_modify.request)
}

void mongo_find_modify_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_modify_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_modify_request::~mongo_find_modify_request() {
  // @@protoc_insertion_point(destructor:db.mongo.find_modify.request)
  SharedDtor();
}

void mongo_find_modify_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_modify_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_modify_request& mongo_find_modify_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_modify_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_modify_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_modify.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_modify_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_modify_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.update");
        object = msg->mutable_update();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_modify_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_modify.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update().data(), static_cast<int>(this->update().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.update"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_modify.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_modify.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_modify_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_modify.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.update");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->update(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_modify.request)
}

::google::protobuf::uint8* mongo_find_modify_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_modify.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // string update = 3;
  if (this->update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update().data(), static_cast<int>(this->update().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.update");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_modify.request)
  return target;
}

size_t mongo_find_modify_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_modify.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string update = 3;
  if (this->update().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_modify_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_modify.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_modify_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_modify_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_modify.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_modify.request)
    MergeFrom(*source);
  }
}

void mongo_find_modify_request::MergeFrom(const mongo_find_modify_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_modify.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.update().size() > 0) {

    update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
  }
}

void mongo_find_modify_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_modify.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_modify_request::CopyFrom(const mongo_find_modify_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_modify.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_modify_request::IsInitialized() const {
  return true;
}

void mongo_find_modify_request::Swap(mongo_find_modify_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_modify_request::InternalSwap(mongo_find_modify_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_.Swap(&other->update_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_modify_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_modify_response::InitAsDefaultInstance() {
}
class mongo_find_modify_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_find_modify_response::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_modify_response::mongo_find_modify_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_modify.response)
}
mongo_find_modify_response::mongo_find_modify_response(const mongo_find_modify_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_modify.response)
}

void mongo_find_modify_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_find_modify_response_s2s_2fdb_2eproto.base);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_find_modify_response::~mongo_find_modify_response() {
  // @@protoc_insertion_point(destructor:db.mongo.find_modify.response)
  SharedDtor();
}

void mongo_find_modify_response::SharedDtor() {
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_find_modify_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_modify_response& mongo_find_modify_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_modify_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_modify_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_modify.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_modify_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_modify_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string document = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.find_modify.response.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_modify_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_modify.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.find_modify.response.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_modify.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_modify.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_modify_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_modify.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.response.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_modify.response)
}

::google::protobuf::uint8* mongo_find_modify_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_modify.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.find_modify.response.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_modify.response)
  return target;
}

size_t mongo_find_modify_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_modify.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_modify_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_modify.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_modify_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_modify_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_modify.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_modify.response)
    MergeFrom(*source);
  }
}

void mongo_find_modify_response::MergeFrom(const mongo_find_modify_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_modify.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
}

void mongo_find_modify_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_modify.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_modify_response::CopyFrom(const mongo_find_modify_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_modify.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_modify_response::IsInitialized() const {
  return true;
}

void mongo_find_modify_response::Swap(mongo_find_modify_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_modify_response::InternalSwap(mongo_find_modify_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_find_modify_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_find_modify::InitAsDefaultInstance() {
}
class mongo_find_modify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_find_modify::mongo_find_modify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.find_modify)
}
mongo_find_modify::mongo_find_modify(const mongo_find_modify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.find_modify)
}

void mongo_find_modify::SharedCtor() {
}

mongo_find_modify::~mongo_find_modify() {
  // @@protoc_insertion_point(destructor:db.mongo.find_modify)
  SharedDtor();
}

void mongo_find_modify::SharedDtor() {
}

void mongo_find_modify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_find_modify& mongo_find_modify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_find_modify_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_find_modify::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.find_modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_find_modify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_find_modify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_find_modify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.find_modify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.find_modify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.find_modify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_find_modify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.find_modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.find_modify)
}

::google::protobuf::uint8* mongo_find_modify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.find_modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.find_modify)
  return target;
}

size_t mongo_find_modify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.find_modify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_find_modify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.find_modify)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_find_modify* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_find_modify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.find_modify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.find_modify)
    MergeFrom(*source);
  }
}

void mongo_find_modify::MergeFrom(const mongo_find_modify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.find_modify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_find_modify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.find_modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_find_modify::CopyFrom(const mongo_find_modify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.find_modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_find_modify::IsInitialized() const {
  return true;
}

void mongo_find_modify::Swap(mongo_find_modify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_find_modify::InternalSwap(mongo_find_modify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_find_modify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command_request::InitAsDefaultInstance() {
}
class mongo_command_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_command_request::kTabFieldNumber;
const int mongo_command_request::kCmdFieldNumber;
const int mongo_command_request::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command_request::mongo_command_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command.request)
}
mongo_command_request::mongo_command_request(const mongo_command_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.command.request)
}

void mongo_command_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_command_request_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_command_request::~mongo_command_request() {
  // @@protoc_insertion_point(destructor:db.mongo.command.request)
  SharedDtor();
}

void mongo_command_request::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_command_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command_request& mongo_command_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_command_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cmd = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.cmd");
        object = msg->mutable_cmd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string document = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.request.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string document = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.request.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // string document = 3;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command.request)
}

::google::protobuf::uint8* mongo_command_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // string document = 3;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.request.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command.request)
  return target;
}

size_t mongo_command_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // string document = 3;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command.request)
    MergeFrom(*source);
  }
}

void mongo_command_request::MergeFrom(const mongo_command_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
}

void mongo_command_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command_request::CopyFrom(const mongo_command_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command_request::IsInitialized() const {
  return true;
}

void mongo_command_request::Swap(mongo_command_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command_request::InternalSwap(mongo_command_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmd_.Swap(&other->cmd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_command_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command_response::InitAsDefaultInstance() {
}
class mongo_command_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_command_response::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command_response::mongo_command_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command.response)
}
mongo_command_response::mongo_command_response(const mongo_command_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.command.response)
}

void mongo_command_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_command_response_s2s_2fdb_2eproto.base);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_command_response::~mongo_command_response() {
  // @@protoc_insertion_point(destructor:db.mongo.command.response)
  SharedDtor();
}

void mongo_command_response::SharedDtor() {
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_command_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command_response& mongo_command_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_command_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string document = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.command.response.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.command.response.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.response.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command.response)
}

::google::protobuf::uint8* mongo_command_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.command.response.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command.response)
  return target;
}

size_t mongo_command_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string document = 1;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command.response)
    MergeFrom(*source);
  }
}

void mongo_command_response::MergeFrom(const mongo_command_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
}

void mongo_command_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command_response::CopyFrom(const mongo_command_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command_response::IsInitialized() const {
  return true;
}

void mongo_command_response::Swap(mongo_command_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command_response::InternalSwap(mongo_command_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_command_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_command::InitAsDefaultInstance() {
}
class mongo_command::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_command::mongo_command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.command)
}
mongo_command::mongo_command(const mongo_command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.command)
}

void mongo_command::SharedCtor() {
}

mongo_command::~mongo_command() {
  // @@protoc_insertion_point(destructor:db.mongo.command)
  SharedDtor();
}

void mongo_command::SharedDtor() {
}

void mongo_command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_command& mongo_command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_command_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_command::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.command)
}

::google::protobuf::uint8* mongo_command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.command)
  return target;
}

size_t mongo_command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.command)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_command* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.command)
    MergeFrom(*source);
  }
}

void mongo_command::MergeFrom(const mongo_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_command::CopyFrom(const mongo_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_command::IsInitialized() const {
  return true;
}

void mongo_command::Swap(mongo_command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_command::InternalSwap(mongo_command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_merge_request::InitAsDefaultInstance() {
}
class mongo_merge_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_merge_request::kFieldFieldNumber;
const int mongo_merge_request::kSourceFieldNumber;
const int mongo_merge_request::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_merge_request::mongo_merge_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.merge.request)
}
mongo_merge_request::mongo_merge_request(const mongo_merge_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target().size() > 0) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.merge.request)
}

void mongo_merge_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_merge_request_s2s_2fdb_2eproto.base);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_merge_request::~mongo_merge_request() {
  // @@protoc_insertion_point(destructor:db.mongo.merge.request)
  SharedDtor();
}

void mongo_merge_request::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_merge_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_merge_request& mongo_merge_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_merge_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_merge_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.merge.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_merge_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_merge_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.request.field");
        object = msg->mutable_field();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string source = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.request.source");
        object = msg->mutable_source();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.request.target");
        object = msg->mutable_target();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_merge_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.merge.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.request.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.request.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.request.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.merge.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.merge.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_merge_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.merge.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field(), output);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.merge.request)
}

::google::protobuf::uint8* mongo_merge_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.merge.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.request.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.merge.request)
  return target;
}

size_t mongo_merge_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.merge.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_merge_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.merge.request)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_merge_request* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_merge_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.merge.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.merge.request)
    MergeFrom(*source);
  }
}

void mongo_merge_request::MergeFrom(const mongo_merge_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.merge.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
}

void mongo_merge_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.merge.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_merge_request::CopyFrom(const mongo_merge_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.merge.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_merge_request::IsInitialized() const {
  return true;
}

void mongo_merge_request::Swap(mongo_merge_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_merge_request::InternalSwap(mongo_merge_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_.Swap(&other->field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_merge_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_merge_response::InitAsDefaultInstance() {
}
class mongo_merge_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mongo_merge_response::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_merge_response::mongo_merge_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.merge.response)
}
mongo_merge_response::mongo_merge_response(const mongo_merge_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:db.mongo.merge.response)
}

void mongo_merge_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_mongo_merge_response_s2s_2fdb_2eproto.base);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mongo_merge_response::~mongo_merge_response() {
  // @@protoc_insertion_point(destructor:db.mongo.merge.response)
  SharedDtor();
}

void mongo_merge_response::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mongo_merge_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_merge_response& mongo_merge_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_merge_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_merge_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.merge.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_merge_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_merge_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.mongo.merge.response.uuid");
        object = msg->mutable_uuid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_merge_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.merge.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.mongo.merge.response.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.merge.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.merge.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_merge_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.merge.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.response.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.merge.response)
}

::google::protobuf::uint8* mongo_merge_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.merge.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.mongo.merge.response.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.merge.response)
  return target;
}

size_t mongo_merge_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.merge.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_merge_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.merge.response)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_merge_response* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_merge_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.merge.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.merge.response)
    MergeFrom(*source);
  }
}

void mongo_merge_response::MergeFrom(const mongo_merge_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.merge.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void mongo_merge_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.merge.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_merge_response::CopyFrom(const mongo_merge_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.merge.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_merge_response::IsInitialized() const {
  return true;
}

void mongo_merge_response::Swap(mongo_merge_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_merge_response::InternalSwap(mongo_merge_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata mongo_merge_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo_merge::InitAsDefaultInstance() {
}
class mongo_merge::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo_merge::mongo_merge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo.merge)
}
mongo_merge::mongo_merge(const mongo_merge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo.merge)
}

void mongo_merge::SharedCtor() {
}

mongo_merge::~mongo_merge() {
  // @@protoc_insertion_point(destructor:db.mongo.merge)
  SharedDtor();
}

void mongo_merge::SharedDtor() {
}

void mongo_merge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo_merge& mongo_merge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_merge_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo_merge::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo.merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo_merge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo_merge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo_merge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo.merge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo.merge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo.merge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo_merge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo.merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo.merge)
}

::google::protobuf::uint8* mongo_merge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo.merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo.merge)
  return target;
}

size_t mongo_merge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo.merge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo_merge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo.merge)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo_merge* source =
      ::google::protobuf::DynamicCastToGenerated<mongo_merge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo.merge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo.merge)
    MergeFrom(*source);
  }
}

void mongo_merge::MergeFrom(const mongo_merge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo.merge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo_merge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo.merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo_merge::CopyFrom(const mongo_merge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo.merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo_merge::IsInitialized() const {
  return true;
}

void mongo_merge::Swap(mongo_merge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo_merge::InternalSwap(mongo_merge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo_merge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void mongo::InitAsDefaultInstance() {
}
class mongo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mongo::mongo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.mongo)
}
mongo::mongo(const mongo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.mongo)
}

void mongo::SharedCtor() {
}

mongo::~mongo() {
  // @@protoc_insertion_point(destructor:db.mongo)
  SharedDtor();
}

void mongo::SharedDtor() {
}

void mongo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mongo& mongo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_mongo_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void mongo::Clear() {
// @@protoc_insertion_point(message_clear_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mongo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<mongo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mongo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.mongo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.mongo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.mongo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mongo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.mongo)
}

::google::protobuf::uint8* mongo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.mongo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.mongo)
  return target;
}

size_t mongo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.mongo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mongo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  const mongo* source =
      ::google::protobuf::DynamicCastToGenerated<mongo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.mongo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.mongo)
    MergeFrom(*source);
  }
}

void mongo::MergeFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.mongo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void mongo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mongo::CopyFrom(const mongo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mongo::IsInitialized() const {
  return true;
}

void mongo::Swap(mongo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mongo::InternalSwap(mongo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mongo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_create::InitAsDefaultInstance() {
}
class sql_create::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_create::kTableFieldNumber;
const int sql_create::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_create::sql_create()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.create)
}
sql_create::sql_create(const sql_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  // @@protoc_insertion_point(copy_constructor:db.sql.create)
}

void sql_create::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_create_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

sql_create::~sql_create() {
  // @@protoc_insertion_point(destructor:db.sql.create)
  SharedDtor();
}

void sql_create::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_create& sql_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_create_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_create::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_create::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_create*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.create.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.sql.create.keys");
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.create.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.create.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.create)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.create.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.create.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.create)
}

::google::protobuf::uint8* sql_create::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.create.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.create.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.create)
  return target;
}

size_t sql_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.create)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_create* source =
      ::google::protobuf::DynamicCastToGenerated<sql_create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.create)
    MergeFrom(*source);
  }
}

void sql_create::MergeFrom(const sql_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
}

void sql_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_create::CopyFrom(const sql_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_create::IsInitialized() const {
  return true;
}

void sql_create::Swap(sql_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_create::InternalSwap(sql_create* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata sql_create::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_index::InitAsDefaultInstance() {
}
class sql_index::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_index::kTabFieldNumber;
const int sql_index::kNameFieldNumber;
const int sql_index::kSortFieldNumber;
const int sql_index::kUniqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_index::sql_index()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.index)
}
sql_index::sql_index(const sql_index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab().size() > 0) {
    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&sort_, &from.sort_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:db.sql.index)
}

void sql_index::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_index_s2s_2fdb_2eproto.base);
  tab_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
}

sql_index::~sql_index() {
  // @@protoc_insertion_point(destructor:db.sql.index)
  SharedDtor();
}

void sql_index::SharedDtor() {
  tab_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_index& sql_index::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_index_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_index::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&sort_)) + sizeof(unique_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_index::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_index*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tab = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.index.tab");
        object = msg->mutable_tab();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.index.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 sort = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sort(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool unique = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unique(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.index)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab().data(), static_cast<int>(this->tab().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.index.tab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.index.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.index)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.index.tab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tab(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.index.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sort(), output);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unique(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.index)
}

::google::protobuf::uint8* sql_index::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab().data(), static_cast<int>(this->tab().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.index.tab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tab(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.index.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sort(), target);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unique(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.index)
  return target;
}

size_t sql_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tab = 1;
  if (this->tab().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 sort = 3;
  if (this->sort() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sort());
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.index)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_index* source =
      ::google::protobuf::DynamicCastToGenerated<sql_index>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.index)
    MergeFrom(*source);
  }
}

void sql_index::MergeFrom(const sql_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tab().size() > 0) {

    tab_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sort() != 0) {
    set_sort(from.sort());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
}

void sql_index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_index::CopyFrom(const sql_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_index::IsInitialized() const {
  return true;
}

void sql_index::Swap(sql_index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_index::InternalSwap(sql_index* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tab_.Swap(&other->tab_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_, other->sort_);
  swap(unique_, other->unique_);
}

::google::protobuf::Metadata sql_index::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_exec::InitAsDefaultInstance() {
}
class sql_exec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_exec::kSqlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_exec::sql_exec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.exec)
}
sql_exec::sql_exec(const sql_exec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  // @@protoc_insertion_point(copy_constructor:db.sql.exec)
}

void sql_exec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_exec_s2s_2fdb_2eproto.base);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

sql_exec::~sql_exec() {
  // @@protoc_insertion_point(destructor:db.sql.exec)
  SharedDtor();
}

void sql_exec::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_exec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_exec& sql_exec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_exec_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_exec::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_exec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_exec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string sql = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.exec.sql");
        object = msg->mutable_sql();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_exec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.exec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sql = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.exec.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.exec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.exec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_exec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.exec.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.exec)
}

::google::protobuf::uint8* sql_exec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.exec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.exec.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.exec)
  return target;
}

size_t sql_exec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.exec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sql = 1;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_exec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.exec)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_exec* source =
      ::google::protobuf::DynamicCastToGenerated<sql_exec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.exec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.exec)
    MergeFrom(*source);
  }
}

void sql_exec::MergeFrom(const sql_exec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.exec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
}

void sql_exec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_exec::CopyFrom(const sql_exec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_exec::IsInitialized() const {
  return true;
}

void sql_exec::Swap(sql_exec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_exec::InternalSwap(sql_exec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sql_.Swap(&other->sql_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata sql_exec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_insert::InitAsDefaultInstance() {
}
class sql_insert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_insert::kFlagFieldNumber;
const int sql_insert::kTableFieldNumber;
const int sql_insert::kDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_insert::sql_insert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.insert)
}
sql_insert::sql_insert(const sql_insert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.sql.insert)
}

void sql_insert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_insert_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

sql_insert::~sql_insert() {
  // @@protoc_insertion_point(destructor:db.sql.insert)
  SharedDtor();
}

void sql_insert::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_insert& sql_insert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_insert_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_insert::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_insert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_insert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.insert.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string document = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.insert.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.insert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.insert.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string document = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.insert.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.insert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.insert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.insert.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string document = 3;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.insert.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->document(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.insert)
}

::google::protobuf::uint8* sql_insert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.insert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.insert.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string document = 3;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.insert.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->document(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.insert)
  return target;
}

size_t sql_insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.insert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string document = 3;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_insert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.insert)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_insert* source =
      ::google::protobuf::DynamicCastToGenerated<sql_insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.insert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.insert)
    MergeFrom(*source);
  }
}

void sql_insert::MergeFrom(const sql_insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void sql_insert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_insert::CopyFrom(const sql_insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_insert::IsInitialized() const {
  return true;
}

void sql_insert::Swap(sql_insert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_insert::InternalSwap(sql_insert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata sql_insert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_save::InitAsDefaultInstance() {
}
class sql_save::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_save::kFlagFieldNumber;
const int sql_save::kTableFieldNumber;
const int sql_save::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_save::sql_save()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.save)
}
sql_save::sql_save(const sql_save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:db.sql.save)
}

void sql_save::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_save_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

sql_save::~sql_save() {
  // @@protoc_insertion_point(destructor:db.sql.save)
  SharedDtor();
}

void sql_save::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_save& sql_save::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_save_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_save::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_save::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_save*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.save.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.save.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.save.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.save.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.save)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.save.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.save.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.save)
}

::google::protobuf::uint8* sql_save::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.save.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.save.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.save)
  return target;
}

size_t sql_save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.save)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.save)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_save* source =
      ::google::protobuf::DynamicCastToGenerated<sql_save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.save)
    MergeFrom(*source);
  }
}

void sql_save::MergeFrom(const sql_save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void sql_save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_save::CopyFrom(const sql_save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_save::IsInitialized() const {
  return true;
}

void sql_save::Swap(sql_save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_save::InternalSwap(sql_save* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::google::protobuf::Metadata sql_save::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_query_request::InitAsDefaultInstance() {
}
class sql_query_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_query_request::kTableFieldNumber;
const int sql_query_request::kLimitFieldNumber;
const int sql_query_request::kFilterFieldNumber;
const int sql_query_request::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_query_request::sql_query_request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.query.request)
}
sql_query_request::sql_query_request(const sql_query_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:db.sql.query.request)
}

void sql_query_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_query_request_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

sql_query_request::~sql_query_request() {
  // @@protoc_insertion_point(destructor:db.sql.query.request)
  SharedDtor();
}

void sql_query_request::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_query_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_query_request& sql_query_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_query_request_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_query_request::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_query_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_query_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.query.request.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.query.request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string fields = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.sql.query.request.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_query_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.query.request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.request.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.request.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.query.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.query.request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_query_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.request.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filter(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.query.request)
}

::google::protobuf::uint8* sql_query_request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.query.request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.request.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filter(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.query.request)
  return target;
}

size_t sql_query_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.query.request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_query_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_query_request* source =
      ::google::protobuf::DynamicCastToGenerated<sql_query_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.query.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.query.request)
    MergeFrom(*source);
  }
}

void sql_query_request::MergeFrom(const sql_query_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.query.request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void sql_query_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_query_request::CopyFrom(const sql_query_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.query.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_query_request::IsInitialized() const {
  return true;
}

void sql_query_request::Swap(sql_query_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_query_request::InternalSwap(sql_query_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata sql_query_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_query_page::InitAsDefaultInstance() {
}
class sql_query_page::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_query_page::kTableFieldNumber;
const int sql_query_page::kLimitFieldNumber;
const int sql_query_page::kFilterFieldNumber;
const int sql_query_page::kSorterFieldNumber;
const int sql_query_page::kPageFieldNumber;
const int sql_query_page::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_query_page::sql_query_page()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.query.page)
}
sql_query_page::sql_query_page(const sql_query_page& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  sorter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sorter().size() > 0) {
    sorter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sorter_);
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(page_));
  // @@protoc_insertion_point(copy_constructor:db.sql.query.page)
}

void sql_query_page::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_query_page_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sorter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(page_));
}

sql_query_page::~sql_query_page() {
  // @@protoc_insertion_point(destructor:db.sql.query.page)
  SharedDtor();
}

void sql_query_page::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sorter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_query_page::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_query_page& sql_query_page::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_query_page_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_query_page::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.query.page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sorter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(page_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_query_page::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_query_page*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.query.page.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.query.page.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string sorter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.query.page.sorter");
        object = msg->mutable_sorter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_page(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string fields = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("db.sql.query.page.fields");
          object = msg->add_fields();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_query_page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.query.page)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.page.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.page.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sorter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sorter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sorter().data(), static_cast<int>(this->sorter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.page.sorter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.page.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.query.page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.query.page)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_query_page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.query.page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filter(), output);
  }

  // string sorter = 4;
  if (this->sorter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sorter().data(), static_cast<int>(this->sorter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.sorter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sorter(), output);
  }

  // int32 page = 5;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page(), output);
  }

  // repeated string fields = 6;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.query.page)
}

::google::protobuf::uint8* sql_query_page::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.query.page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filter(), target);
  }

  // string sorter = 4;
  if (this->sorter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sorter().data(), static_cast<int>(this->sorter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.sorter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sorter(), target);
  }

  // int32 page = 5;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page(), target);
  }

  // repeated string fields = 6;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.page.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.query.page)
  return target;
}

size_t sql_query_page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.query.page)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string sorter = 4;
  if (this->sorter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sorter());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  // int32 page = 5;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_query_page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.query.page)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_query_page* source =
      ::google::protobuf::DynamicCastToGenerated<sql_query_page>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.query.page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.query.page)
    MergeFrom(*source);
  }
}

void sql_query_page::MergeFrom(const sql_query_page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.query.page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.sorter().size() > 0) {

    sorter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sorter_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.page() != 0) {
    set_page(from.page());
  }
}

void sql_query_page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.query.page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_query_page::CopyFrom(const sql_query_page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.query.page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_query_page::IsInitialized() const {
  return true;
}

void sql_query_page::Swap(sql_query_page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_query_page::InternalSwap(sql_query_page* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(CastToBase(&other->fields_));
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sorter_.Swap(&other->sorter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(page_, other->page_);
}

::google::protobuf::Metadata sql_query_page::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_query_response::InitAsDefaultInstance() {
}
class sql_query_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_query_response::kErrorFieldNumber;
const int sql_query_response::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_query_response::sql_query_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.query.response)
}
sql_query_response::sql_query_response(const sql_query_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:db.sql.query.response)
}

void sql_query_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_query_response_s2s_2fdb_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

sql_query_response::~sql_query_response() {
  // @@protoc_insertion_point(destructor:db.sql.query.response)
  SharedDtor();
}

void sql_query_response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_query_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_query_response& sql_query_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_query_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_query_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_query_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_query_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.query.response.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bytes documents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_documents();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_query_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.query.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.query.response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.query.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.query.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_query_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // repeated bytes documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->documents(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.query.response)
}

::google::protobuf::uint8* sql_query_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.query.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.query.response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // repeated bytes documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->documents(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.query.response)
  return target;
}

size_t sql_query_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.query.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes documents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_size());
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->documents(i));
  }

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_query_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_query_response* source =
      ::google::protobuf::DynamicCastToGenerated<sql_query_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.query.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.query.response)
    MergeFrom(*source);
  }
}

void sql_query_response::MergeFrom(const sql_query_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.query.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void sql_query_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_query_response::CopyFrom(const sql_query_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.query.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_query_response::IsInitialized() const {
  return true;
}

void sql_query_response::Swap(sql_query_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_query_response::InternalSwap(sql_query_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  documents_.InternalSwap(CastToBase(&other->documents_));
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata sql_query_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_query::InitAsDefaultInstance() {
}
class sql_query::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_query::sql_query()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.query)
}
sql_query::sql_query(const sql_query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.sql.query)
}

void sql_query::SharedCtor() {
}

sql_query::~sql_query() {
  // @@protoc_insertion_point(destructor:db.sql.query)
  SharedDtor();
}

void sql_query::SharedDtor() {
}

void sql_query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_query& sql_query::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_query_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_query::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_query::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_query*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.query)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.query)
}

::google::protobuf::uint8* sql_query::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.query)
  return target;
}

size_t sql_query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.query)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_query* source =
      ::google::protobuf::DynamicCastToGenerated<sql_query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.query)
    MergeFrom(*source);
  }
}

void sql_query::MergeFrom(const sql_query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void sql_query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_query::CopyFrom(const sql_query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_query::IsInitialized() const {
  return true;
}

void sql_query::Swap(sql_query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_query::InternalSwap(sql_query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata sql_query::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_del::InitAsDefaultInstance() {
}
class sql_del::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_del::kFlagFieldNumber;
const int sql_del::kTableFieldNumber;
const int sql_del::kFilterFieldNumber;
const int sql_del::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_del::sql_del()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.del)
}
sql_del::sql_del(const sql_del& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:db.sql.del)
}

void sql_del::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_del_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(limit_));
}

sql_del::~sql_del() {
  // @@protoc_insertion_point(destructor:db.sql.del)
  SharedDtor();
}

void sql_del::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_del::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_del& sql_del::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_del_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_del::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_del::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_del*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.del.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.del.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_del::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.del)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.del.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.del.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.del)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.del)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_del::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.del.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.del.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filter(), output);
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.del)
}

::google::protobuf::uint8* sql_del::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.del.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.del.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filter(), target);
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.del)
  return target;
}

size_t sql_del::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.del)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_del::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.del)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_del* source =
      ::google::protobuf::DynamicCastToGenerated<sql_del>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.del)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.del)
    MergeFrom(*source);
  }
}

void sql_del::MergeFrom(const sql_del& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.del)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void sql_del::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_del::CopyFrom(const sql_del& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_del::IsInitialized() const {
  return true;
}

void sql_del::Swap(sql_del* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_del::InternalSwap(sql_del* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata sql_del::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_inc::InitAsDefaultInstance() {
}
class sql_inc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_inc::kKeyFieldNumber;
const int sql_inc::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_inc::sql_inc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.inc)
}
sql_inc::sql_inc(const sql_inc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:db.sql.inc)
}

void sql_inc::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_inc_s2s_2fdb_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

sql_inc::~sql_inc() {
  // @@protoc_insertion_point(destructor:db.sql.inc)
  SharedDtor();
}

void sql_inc::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_inc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_inc& sql_inc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_inc_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_inc::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_inc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_inc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.inc.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_inc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.inc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.inc.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.inc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.inc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_inc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.inc.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.inc)
}

::google::protobuf::uint8* sql_inc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.inc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.inc.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.inc)
  return target;
}

size_t sql_inc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.inc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_inc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.inc)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_inc* source =
      ::google::protobuf::DynamicCastToGenerated<sql_inc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.inc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.inc)
    MergeFrom(*source);
  }
}

void sql_inc::MergeFrom(const sql_inc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.inc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void sql_inc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.inc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_inc::CopyFrom(const sql_inc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.inc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_inc::IsInitialized() const {
  return true;
}

void sql_inc::Swap(sql_inc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_inc::InternalSwap(sql_inc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::google::protobuf::Metadata sql_inc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_update::InitAsDefaultInstance() {
}
class sql_update::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_update::kFlagFieldNumber;
const int sql_update::kTableFieldNumber;
const int sql_update::kFilterFieldNumber;
const int sql_update::kDocumentFieldNumber;
const int sql_update::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_update::sql_update()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.update)
}
sql_update::sql_update(const sql_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:db.sql.update)
}

void sql_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_update_s2s_2fdb_2eproto.base);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(limit_));
}

sql_update::~sql_update() {
  // @@protoc_insertion_point(destructor:db.sql.update)
  SharedDtor();
}

void sql_update::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_update& sql_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_update_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_update::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_update*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.update.table");
        object = msg->mutable_table();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.update.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string document = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.update.document");
        object = msg->mutable_document();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.update.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.update.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string document = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document().data(), static_cast<int>(this->document().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.update.document"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.update.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.update.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filter(), output);
  }

  // string document = 4;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.update.document");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->document(), output);
  }

  // int32 limit = 5;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.update)
}

::google::protobuf::uint8* sql_update::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.update.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.update.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filter(), target);
  }

  // string document = 4;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document().data(), static_cast<int>(this->document().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.update.document");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->document(), target);
  }

  // int32 limit = 5;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.update)
  return target;
}

size_t sql_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string document = 4;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document());
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  // int32 limit = 5;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.update)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_update* source =
      ::google::protobuf::DynamicCastToGenerated<sql_update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.update)
    MergeFrom(*source);
  }
}

void sql_update::MergeFrom(const sql_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void sql_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_update::CopyFrom(const sql_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_update::IsInitialized() const {
  return true;
}

void sql_update::Swap(sql_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_update::InternalSwap(sql_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  document_.Swap(&other->document_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata sql_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql_response::InitAsDefaultInstance() {
}
class sql_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sql_response::kErrorFieldNumber;
const int sql_response::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql_response::sql_response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql.response)
}
sql_response::sql_response(const sql_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:db.sql.response)
}

void sql_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_sql_response_s2s_2fdb_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

sql_response::~sql_response() {
  // @@protoc_insertion_point(destructor:db.sql.response)
  SharedDtor();
}

void sql_response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sql_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql_response& sql_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_response_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql_response::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("db.sql.response.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql.response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "db.sql.response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql.response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql.response)
}

::google::protobuf::uint8* sql_response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "db.sql.response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql.response)
  return target;
}

size_t sql_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql.response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql.response)
  GOOGLE_DCHECK_NE(&from, this);
  const sql_response* source =
      ::google::protobuf::DynamicCastToGenerated<sql_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql.response)
    MergeFrom(*source);
  }
}

void sql_response::MergeFrom(const sql_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void sql_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_response::CopyFrom(const sql_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_response::IsInitialized() const {
  return true;
}

void sql_response::Swap(sql_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql_response::InternalSwap(sql_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::google::protobuf::Metadata sql_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void sql::InitAsDefaultInstance() {
}
class sql::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sql::sql()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.sql)
}
sql::sql(const sql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.sql)
}

void sql::SharedCtor() {
}

sql::~sql() {
  // @@protoc_insertion_point(destructor:db.sql)
  SharedDtor();
}

void sql::SharedDtor() {
}

void sql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sql& sql::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_sql_s2s_2fdb_2eproto.base);
  return *internal_default_instance();
}


void sql::Clear() {
// @@protoc_insertion_point(message_clear_start:db.sql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sql::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<sql*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.sql)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:db.sql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.sql)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.sql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.sql)
}

::google::protobuf::uint8* sql::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.sql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.sql)
  return target;
}

size_t sql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.sql)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.sql)
  GOOGLE_DCHECK_NE(&from, this);
  const sql* source =
      ::google::protobuf::DynamicCastToGenerated<sql>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.sql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.sql)
    MergeFrom(*source);
  }
}

void sql::MergeFrom(const sql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.sql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void sql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.sql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql::CopyFrom(const sql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.sql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql::IsInitialized() const {
  return true;
}

void sql::Swap(sql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sql::InternalSwap(sql* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata sql::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_s2s_2fdb_2eproto);
  return ::file_level_metadata_s2s_2fdb_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::db::mongo_insert* Arena::CreateMaybeMessage< ::db::mongo_insert >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_insert >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_request* Arena::CreateMaybeMessage< ::db::mongo_find_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_page* Arena::CreateMaybeMessage< ::db::mongo_find_page >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_page >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_more* Arena::CreateMaybeMessage< ::db::mongo_find_more >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_more >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_distinct* Arena::CreateMaybeMessage< ::db::mongo_find_distinct >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_distinct >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_response* Arena::CreateMaybeMessage< ::db::mongo_find_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find* Arena::CreateMaybeMessage< ::db::mongo_find >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_one_request* Arena::CreateMaybeMessage< ::db::mongo_find_one_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_one_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_one_response* Arena::CreateMaybeMessage< ::db::mongo_find_one_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_one_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_one* Arena::CreateMaybeMessage< ::db::mongo_find_one >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_one >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_aggregate_request* Arena::CreateMaybeMessage< ::db::mongo_aggregate_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_aggregate_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_aggregate_facet* Arena::CreateMaybeMessage< ::db::mongo_aggregate_facet >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_aggregate_facet >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_aggregate* Arena::CreateMaybeMessage< ::db::mongo_aggregate >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_aggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_count_request* Arena::CreateMaybeMessage< ::db::mongo_count_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_count_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_count_response* Arena::CreateMaybeMessage< ::db::mongo_count_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_count_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_count* Arena::CreateMaybeMessage< ::db::mongo_count >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_count >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_remove* Arena::CreateMaybeMessage< ::db::mongo_remove >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_index* Arena::CreateMaybeMessage< ::db::mongo_index >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_index >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_updater* Arena::CreateMaybeMessage< ::db::mongo_updater >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_updater >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_updates* Arena::CreateMaybeMessage< ::db::mongo_updates >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_updates >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_update* Arena::CreateMaybeMessage< ::db::mongo_update >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_update >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_response* Arena::CreateMaybeMessage< ::db::mongo_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_inc_request* Arena::CreateMaybeMessage< ::db::mongo_inc_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_inc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_inc_response* Arena::CreateMaybeMessage< ::db::mongo_inc_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_inc_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_inc* Arena::CreateMaybeMessage< ::db::mongo_inc >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_inc >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_modify_request* Arena::CreateMaybeMessage< ::db::mongo_find_modify_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_modify_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_modify_response* Arena::CreateMaybeMessage< ::db::mongo_find_modify_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_modify_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_find_modify* Arena::CreateMaybeMessage< ::db::mongo_find_modify >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_find_modify >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command_request* Arena::CreateMaybeMessage< ::db::mongo_command_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command_response* Arena::CreateMaybeMessage< ::db::mongo_command_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_command* Arena::CreateMaybeMessage< ::db::mongo_command >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_command >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_merge_request* Arena::CreateMaybeMessage< ::db::mongo_merge_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_merge_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_merge_response* Arena::CreateMaybeMessage< ::db::mongo_merge_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_merge_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo_merge* Arena::CreateMaybeMessage< ::db::mongo_merge >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo_merge >(arena);
}
template<> PROTOBUF_NOINLINE ::db::mongo* Arena::CreateMaybeMessage< ::db::mongo >(Arena* arena) {
  return Arena::CreateInternal< ::db::mongo >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_create* Arena::CreateMaybeMessage< ::db::sql_create >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_create >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_index* Arena::CreateMaybeMessage< ::db::sql_index >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_index >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_exec* Arena::CreateMaybeMessage< ::db::sql_exec >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_exec >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_insert* Arena::CreateMaybeMessage< ::db::sql_insert >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_insert >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_save* Arena::CreateMaybeMessage< ::db::sql_save >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_save >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_query_request* Arena::CreateMaybeMessage< ::db::sql_query_request >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_query_request >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_query_page* Arena::CreateMaybeMessage< ::db::sql_query_page >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_query_page >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_query_response* Arena::CreateMaybeMessage< ::db::sql_query_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_query_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_query* Arena::CreateMaybeMessage< ::db::sql_query >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_query >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_del* Arena::CreateMaybeMessage< ::db::sql_del >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_del >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_inc* Arena::CreateMaybeMessage< ::db::sql_inc >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_inc >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_update* Arena::CreateMaybeMessage< ::db::sql_update >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_update >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql_response* Arena::CreateMaybeMessage< ::db::sql_response >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql_response >(arena);
}
template<> PROTOBUF_NOINLINE ::db::sql* Arena::CreateMaybeMessage< ::db::sql >(Arena* arena) {
  return Arena::CreateInternal< ::db::sql >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
